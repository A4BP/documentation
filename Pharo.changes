'From Pharo3.0 of 18 March 2013 [Latest update: #30841] on 29 April 2014 at 12:30:26.618664 pm'!----STARTUP----2014-04-29T12:29:46.011042+02:00 as /Users/denker/Desktop/30841/Pharo-30841.image!----QUIT----2014-04-29T12:30:29.564372+02:00 Pharo-30841.image priorSource: 0!----STARTUP----2014-04-29T12:30:44.676632+02:00 as /Users/denker/Desktop/30841/Pharo-30841.image!----QUIT----2014-04-29T12:31:00.983451+02:00 Pharo-30841.image priorSource: 197!----STARTUP----2014-04-29T12:40:57.02195+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 12:39' prior: 52726330!commentForCurrentUpdate ^ '- fix direct links to sources file in image'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 12:39'!script104	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.424.mczSlotTests-MarcusDenker.87.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 12:39'!update30842	"self new update30842"	self withUpdateLog: '- fix direct links to sources file in image'.	self loadTogether: self script104 merge: false.	self flushCaches.! !"ScriptLoader30"!!ZnClientTests methodsFor: 'testing' stamp: 'MarcusDenker 4/29/2014 12:38' prior: 59056542!testProgress	"[ :bar |		bar title: 'Downloading Sources...'.		[			ZnClient new 				url: 'http://files.pharo.org/sources/PharoV30.sources'; 				signalProgress: true;					downloadTo: FileLocator temp ]			on: HTTPProgress 			do: [ :progress |				progress isEmpty ifFalse: [ bar current: progress percentage ]. 				progress resume ] ] asJob run."			self 		should: [ 			ZnClient new				beOneShot;				signalProgress: true;				get: 'http://zn.stfx.eu/zn/small.html' ] 		raise: HTTPProgress! !!SmalltalkImage methodsFor: '*Zinc-System-Support' stamp: 'MarcusDenker 4/29/2014 12:38' prior: 53545406!downloadSources	"Try downloading the sources file from 2 different locations to the shared directory.	Be silent when this does not work: a missing sources will be triggered later on.	For now, use the VM directory."		| sharedDirectory |	self shouldDownloadSourcesFile ifFalse: [ ^ self ].	sharedDirectory := self vmDirectory.	self sourcesDownloadClient		url: 'http://files.pharo.org/sources/PharoV30.sources';		downloadTo: sharedDirectory;		close.	(sharedDirectory / self sourcesFile basename) exists		ifTrue: [ ^ self ].	self sourcesDownloadClient		url: 'http://stfx.eu/PharoV30.sources';		downloadTo: sharedDirectory;		close.					! !"Zinc-System-Support"!"Zinc-Tests"!----End fileIn----!----QUIT----2014-04-29T12:40:59.00638+02:00 Pharo.image priorSource: 377!----STARTUP----2014-04-29T12:40:59.191645+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T12:41:03.453641+02:00 Pharo.image priorSource: 13764!----STARTUP----2014-04-29T12:47:47.241618+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T12:47:47.397619+02:00 Pharo-30842.image priorSource: 13955!----STARTUP----2014-04-29T13:00:54.923393+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 12:59' prior: 33555097!commentForCurrentUpdate ^ '- cut MC history. Saves 5MB image size'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 12:59'!script105	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.424.mczSlotTests-MarcusDenker.87.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 12:59'!update30843	"self new update30843"	self withUpdateLog: '- cut MC history. Saves 5MB image size'.	self loadTogether: self script105 merge: false.	MCWorkingCopy allManagers do:  [ :each |     each ancestry ancestors do:  [  :eachAncestor |         eachAncestor instVarNamed: 'ancestors' put: nil ] ].	self flushCaches.! !"ScriptLoader30"!----End fileIn----!----QUIT----2014-04-29T13:00:56.158057+02:00 Pharo.image priorSource: 14149!----STARTUP----2014-04-29T13:00:56.292831+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T13:00:59.96883+02:00 Pharo.image priorSource: 26292!----STARTUP----2014-04-29T13:09:00.328798+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T13:09:00.484798+02:00 Pharo-30843.image priorSource: 26486!----STARTUP----2014-04-29T14:59:55.888738+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 14:58' prior: 33568876!commentForCurrentUpdate ^ '13028 Adding ClassVariables corrupts class hierarchy	https://pharo.fogbugz.com/f/cases/13028'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 14:58'!script106	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 14:58'!update30844	"self new update30844"	self withUpdateLog: '13028 Adding ClassVariables corrupts class hierarchy	https://pharo.fogbugz.com/f/cases/13028'.	self loadTogether: self script106 merge: false.	self flushCaches.! !"ScriptLoader30"!!SlotClassBuilder methodsFor: 'private' stamp: 'MartinDias 4/29/2014 12:39' prior: 53321361!applyAndUpdateSharedVariableOrSharedPool: classModification	^ self track: classModification during: [ :old :new |		installer sharedVariableOrSharedPoolChangedFrom: old to:  new by: classModification ].! !!SlotClassBuilder methodsFor: 'deprecated' stamp: 'MartinDias 1/28/2014 18:43' prior: 53329188!client: anInstaller	"deprecated"		installer := anInstaller! !!PharoClassInstaller methodsFor: 'notifications' stamp: 'MartinDias 4/29/2014 13:48'!sharedVariableOrSharedPoolChangedFrom: oldClass to: newClass by: classModification 	self 		classDefinitionChangedFrom: oldClass 		to: newClass 		by: classModification.		"Adopt sub-hierarchies. No need to propagate the modification to them."	oldClass subclasses do: [ :each | 		each superclass: newClass.		newClass addSubclass: each ]! !!SlotMigrationTest methodsFor: 'tests' stamp: 'MartinDias 4/29/2014 12:18'!testAddSharedVariableKeepSubclasses	"Reproduces fogbugz case 13028"	"Define original hierarchy"	aClass := self make: [ :builder |		builder 			name: self aClassName;			superclass: Object ]. 	anotherClass := self make: [ :builder |		builder 			name: self anotherClassName;			superclass: aClass ].	self assert: aClass subclasses size equals: 1.	self assert: aClass subclasses anyOne == anotherClass.	"Add a shared variable"	aClass := self make: [ :builder |		builder 			name: self aClassName;			superclass: Object;			sharedVariables: 'Var' ]. 		self assert: aClass subclasses size equals: 1.	self assert: aClass subclasses anyOne == anotherClass.! !!SlotMigrationTest methodsFor: 'tests' stamp: 'MartinDias 4/29/2014 12:27'!testChangeSuperclass	"Define original hierarchy"	aClass := self make: [ :builder |		builder 			name: self aClassName;			superclass: Object ]. 	anotherClass := self make: [ :builder |		builder 			name: self anotherClassName;			superclass: aClass ].	self assert: aClass subclasses size equals: 1.	self assert: aClass subclasses anyOne == anotherClass.	self assert: anotherClass superclass == aClass.	"Change to a new superclass"	yetAnotherClass := self make: [ :builder |		builder 			name: self yetAnotherClassName;			superclass: Object ]. 	anotherClass := self make: [ :builder |		builder 			name: self anotherClassName;			superclass: yetAnotherClass ]. 		self assert: aClass subclasses isEmpty.	self assert: yetAnotherClass subclasses size equals: 1.	self assert: yetAnotherClass subclasses anyOne == anotherClass.	self assert: anotherClass superclass == yetAnotherClass.! !"Slot"!"SlotTests"!----End fileIn----!----QUIT----2014-04-29T14:59:57.909241+02:00 Pharo.image priorSource: 26679!----STARTUP----2014-04-29T14:59:58.055809+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T15:00:01.849804+02:00 Pharo.image priorSource: 41424!----STARTUP----2014-04-29T15:07:48.572804+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T15:07:48.722803+02:00 Pharo-30844.image priorSource: 41618!----STARTUP----2014-04-29T15:29:54.822698+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 15:27' prior: 33581406!commentForCurrentUpdate ^ '- workspace- cleanups'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 15:27'!script107	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 15:28'!update30845	"self new update30845"	self withUpdateLog: '- workspace- cleanups'.	self loadTogether: self script107 merge: false.		ScriptLoader resetLogStream.MCWorkingCopy allManagers do:  [ :each |     each ancestry ancestors do:  [  :eachAncestor |         eachAncestor instVarNamed: 'ancestors' put: nil ] ].[ | workspace window |		workspace := Workspace openContents:'"Pharo 3.0=======Welcome to Pharo, a clean, innovative, free, and open-source Smalltalk-inspired environment.You can learn pharo by executing:"PharoTutorial go."Pharo 3.0 comes with a whole set of packages you can use to explore the system and develop your own applications. But maybe you need other stuff or feel more comfortable using a tool you already know. To easily load projects, you can open the Configurations Browser by executing:"MetacelloConfigurationBrowser open."You can also open the World menu (just click the desktop) and go to Tools, then Configuration Browser.You can find information about Pharo on http://www.pharo.org. In particular, you may be interested in:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 2300 issues treated in this release. Sumarized issues for 3.0:=========================UI--- New theme and iconset.Infrastructure--------------- Zeroconf scripts updated- Ubuntu ppa- Better [ackaging for standard download- Enhanced continuous integration infrastructureKernel------- Opal Compiler replaces old compiler- Continuation class now part of the core- Simple delayed execution for blocks- Announcement usage simplifiedMore------ New debugger- New inspectors- New code importer- New class builderAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo30ChangeLogs.md"'	label: 'Welcome to Pharo 3.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 3.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.			self flushCaches.! !"ScriptLoader30"!----End fileIn----!----QUIT----2014-04-29T15:29:56.269733+02:00 Pharo.image priorSource: 41812!----STARTUP----2014-04-29T15:29:56.422704+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T15:30:00.652695+02:00 Pharo.image priorSource: 55989!----STARTUP----2014-04-29T16:36:32.460567+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T16:36:32.616569+02:00 Pharo-30845.image priorSource: 56183!----STARTUP----2014-04-30T13:06:57.344458+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/30/2014 13:02' prior: 33596539!commentForCurrentUpdate ^ '13236 Fix 1 extra height for Cairo surface	https://pharo.fogbugz.com/f/cases/13236'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/30/2014 13:02'!script108	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/30/2014 13:04'!update30846	"self new update30846"	self withUpdateLog: '13236 Fix 1 extra height for Cairo surface	https://pharo.fogbugz.com/f/cases/13236'.	self loadTogether: self script108 merge: false.	(World submorphs 	detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label =  'Welcome to Pharo 3.0!!' ] ])	delete.	[ | workspace window |		workspace := Workspace openContents: '"Pharo 3.0=======Welcome to Pharo, an immersive live programming environment.You can learn pharo by highlighting the next line and selecting [Do it] from the context menu:"PharoTutorial go."Pharo 3.0 comes with a whole set of packages you can use to explore the system and develop your own applications. But maybe you need other stuff or feel more comfortable using a tool you already know. To easily load projects, you can open the Configurations Browser by executing:"MetacelloConfigurationBrowser open."You can also open the World menu (just click the desktop) and go to Tools, then Configuration Browser.You can find information about Pharo on http://www.pharo.org. In particular, you may be interested in:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 2300 issues treated in this release. Sumarized issues for 3.0:=========================UI--- New theme and iconset.Infrastructure--------------- Zeroconf scripts updated- Ubuntu ppa- Better [ackaging for standard download- Enhanced continuous integration infrastructureKernel------- Opal Compiler replaces old compiler- Continuation class now part of the core- Simple delayed execution for blocks- Announcement usage simplifiedMore------ New debugger- New inspectors- New code importer- New class builderAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo30ChangeLogs.md"'	label: 'Welcome to Pharo 3.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 3.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.	self flushCaches.! !"ScriptLoader30"!!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!AthensCairoSurface commentStamp: 'IgorStasenko 4/29/2014 17:05' prior: 18038621!i am a concrete implementation of Athens surface which using cairo graphics library for rendering.Cairo library, by itself can have multiple surface types.This class uses image surface (a bitmap located in system memory) and maps to cairo_image_surface_t* C type.**NOTE**As a workaround of bitblt bug, the actual Cairo surfaces, created internally is with 1 extra pixel higher than requested. This is, however completely hidden from users.!!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!AthensCairoSurface commentStamp: 'IgorStasenko 4/29/2014 17:05' prior: 33625217!i am a concrete implementation of Athens surface which using cairo graphics library for rendering.Cairo library, by itself can have multiple surface types.This class uses image surface (a bitmap located in system memory) and maps to cairo_image_surface_t* C type.**NOTE**As a workaround of bitblt bug, the actual Cairo surfaces, created internally is with 1 extra pixel higher than requested. This is, however completely hidden from users.!!AthensCairoSurface class methodsFor: 'instance creation' stamp: 'IgorStasenko 4/29/2014 17:00' prior: 18057373!extent: anExtent format: aFormat	^ ( self primImage: aFormat width: anExtent x height: anExtent y + 1) initialize! !!AthensCairoSurface class methodsFor: 'instance creation' stamp: 'IgorStasenko 4/29/2014 17:00' prior: 18063496!width: aWidth height: aHeight	^ (self primWidth: aWidth height: aHeight+1) initialize! !!AthensCairoSurface methodsFor: 'accessing' stamp: 'IgorStasenko 4/29/2014 16:59' prior: 18040215!height		^self privateHeight - 1! !!AthensCairoSurface methodsFor: 'private' stamp: 'IgorStasenko 4/29/2014 16:59'!privateHeight	<primitive: #primitiveNativeCall module: #NativeBoostPlugin>		^self nbCall: #(		int cairo_image_surface_get_height ( self ) )! !"Athens-Cairo"!----End fileIn----!----QUIT----2014-04-30T13:06:59.142973+02:00 Pharo.image priorSource: 56377!----STARTUP----2014-04-30T13:06:59.28117+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-30T13:07:03.315169+02:00 Pharo.image priorSource: 72679!----STARTUP----2014-04-30T13:14:09.780771+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-30T13:14:09.93077+02:00 Pharo-30846.image priorSource: 72872!----STARTUP----2014-05-07T17:25:48.770811+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 5/7/2014 17:23' prior: 33611104!commentForCurrentUpdate ^ '13247 copying a class also copies his comment	https://pharo.fogbugz.com/f/cases/1324713241 switching between package and  hierarchy view loses tag selection	https://pharo.fogbugz.com/f/cases/13241'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 5/7/2014 17:23'!script109	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 5/7/2014 17:23'!update30847	"self new update30847"	self withUpdateLog: '13247 copying a class also copies his comment	https://pharo.fogbugz.com/f/cases/1324713241 switching between package and  hierarchy view loses tag selection	https://pharo.fogbugz.com/f/cases/13241'.	self loadTogether: self script109 merge: false.	self flushCaches.! !"ScriptLoader30"!!Nautilus methodsFor: 'initialization' stamp: 'EstebanLorenzano 11/20/2013 16:28' prior: 30178654!initialize	super initialize.	plugins := OrderedCollection new.	self class pluginClasses do: [:each || class position |		class := each first.		position := each second.		plugins add: ((class model: self) position: position; yourself)]! !!Nautilus methodsFor: 'browser compatibility' stamp: 'EstebanLorenzano 11/20/2013 16:18' prior: 30179858!spawnHierarchy 	self 		showHierarchy: true;		open.	self ui showPackages: false! !!MultipleMethodsEditor methodsFor: 'initialization' stamp: 'EstebanLorenzano 10/16/2013 09:22' prior: 29423332!initialize	super initialize.	self changeProportionalLayout.	"self color: Color white."	lock := false.	buttonsContainer := PanelMorph new							changeTableLayout;							listDirection: #rightToLeft;							hResizing: #spaceFill;							vResizing: #spaceFill;							yourself.								editors := OrderedCollection new.	container := self newProportionalPanelMorph.						self updateLayoutForSingle! !!MultipleMethodsEditor methodsFor: 'updating' stamp: 'EstebanLorenzano 11/20/2013 14:20' prior: 29421233!updateLayoutForSingle	current ifNil: [ ^ self ].	self 		addMorph: current		fullFrame: LayoutFrame identity.						"current color: Color white."! !!MultipleMethodsEditor methodsFor: 'updating' stamp: 'EstebanLorenzano 4/29/2014 11:26' prior: 29429948!updateLayoutForSingleWithButtons	current ifNil: [ ^ self ].		self 		addMorph: current		fullFrame: (LayoutFrame identity 						bottomOffset: -25).					self 		addMorph: buttonsContainer		fullFrame: ((0@1 corner: 1@1) asLayoutFrame 						topOffset: -25).	"current color: Color white."! !!NautilusUI methodsFor: 'displaying' stamp: 'EstebanLorenzano 4/30/2014 09:22' prior: 30331589!addAll: aWindow	| topHeight middleHeight bottomMorph bottomHeight delta |		delta := 0.	bottomHeight := 0.	middleHeight := 0.	topHeight := 0.	" reverse order in column ..."	"column vResizing: #rigid."	self buildTopPlugins ifNotNil: [:top |		topHeight := top height.		aWindow 			addMorph: top			fullFrame: ((0 @ 0 corner: 1 @ 0) asLayoutFrame bottomOffset: topHeight).		delta := 4.		topHeight := topHeight + delta.		top color: Color transparent].		"navigationRow := self buildNavigationRow: aWindow height: topHeight."	self buildColumns: aWindow height: topHeight"+navigationRow".	self setShortcuts: #NautilusSourceCodeShortcuts to: aWindow.		self buildMiddlePlugins ifNotNil: [:middle |		middleHeight := middle height+4.		aWindow 			addMorph: middle			fullFrame: ((0 @ 0.5 corner: 1 @ 0.5) asLayoutFrame bottomOffset: middleHeight).		middle color: Color transparent].		sourceCodePanel := PanelMorph new.	self setShortcuts: #NautilusSourceCodeShortcuts to: sourceCodePanel.	sourceCodePanel changeProportionalLayout.			sourceCodePanel 		addMorph: self buildCodePane		fullFrame: LayoutFrame identity.			"self buildCommentPane."	sourceCodePanel 		hResizing: #spaceFill;		vResizing: #spaceFill.	sourceCodeContainer := PanelMorph new.	self setShortcuts: #NautilusSourceCodeShortcuts to: sourceCodeContainer.	sourceCodeContainer 		changeTableLayout;		listDirection: #leftToRight.	{	sourceCodePanel.		self buildTextAreaButtonsColumn: aWindow} reverse do: [:each | sourceCodeContainer addMorph: each].		bottomMorph := self buildBottomPlugins.		bottomMorph ifNotNil: [:bottom | bottomHeight := bottom height + 8].	aWindow		addMorph: sourceCodeContainer		fullFrame: ( (0@0.5 corner: 1 @ 1) asLayoutFrame 						topOffset: middleHeight;  bottomOffset: bottomHeight negated).							bottomMorph ifNotNil: [:bottom |							aWindow							addMorph: bottom			fullFrame: ((0 @ 1 corner: 1 @ 1) asLayoutFrame topOffset:  bottomHeight negated).		bottom color: Color transparent]! !!TClass methodsFor: 'copying' stamp: 'EstebanLorenzano 5/6/2014 14:12' prior: 59694817!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!PackageTreeNautilusUI methodsFor: 'private' stamp: 'EstebanLorenzano 5/7/2014 17:16'!selectPackageFor: aClass	"I'm called to properly select a class pache/tag.	 Since we are showing root tags as packages when their are the only ones, we need to determine 	 if we are going to select the package or the tag..."	| package tag |		package := aClass package.	tag := package classTagForClass: aClass.	self selectedPackage: ((tag isRoot and: [ package classTags size = 1 ])		ifTrue: [ tag package ]		ifFalse: [ tag ])	! !!PackageTreeNautilusUI methodsFor: 'accessing' stamp: 'EstebanLorenzano 5/4/2014 13:43' prior: 32206942!showPackages: aBoolean	self okToChange ifFalse: [ ^ nil ].	list enabled: aBoolean.	aBoolean ifFalse: [ self basicShowHierarchy ].			listElements := nil.	list2Elements := nil.		"If showPackages false(Hierarchy)-->true(Flat) then selected package needs to synch to that of selected class"	(aBoolean and: [ self model showPackages not ]) 		ifTrue: [			self model showPackages: aBoolean.			self selectPackageFor: self selectedClass ] 		ifFalse: [ 				self model showPackages: aBoolean ].	self changed: #groupsButtonLabel.	self updateClassView.	self changed: #toggleButtonState.	self changed: #toggleButtonLabel.	self changedLabels.! !!AbstractNautilusUI methodsFor: 'item creation' stamp: 'EstebanLorenzano 4/29/2014 11:27' prior: 17418318!buildCommentPane	commentTextArea := PluggableTextMorph		on: self		text: #getComments		accept: #addComment:notifying:		readSelection: nil		menu: #codePaneMenu:shifted:.			"commentTextArea color: Color white."	commentTextArea		askBeforeDiscardingEdits: true;		vResizing: #spaceFill;		hResizing: #spaceFill.		self setCommentShorcutsTo: commentTextArea.		commentTextArea spaceFillWeight: 1.	^ commentTextArea! !!AbstractNautilusUI methodsFor: 'source code area' stamp: 'EstebanLorenzano 10/16/2013 09:21' prior: 17496153!buildNewSourceTextArea	sourceTextArea := self textMorphClass				on: self				text: #sourceCodeFrom:				accept: #compileSource:notifying:				readSelection: #contentsSelectionFrom:				menu: #sourceCodeMenu:shifted:.					sourceTextArea		askBeforeDiscardingEdits: true;		"color: Color white;"		lockSelector: #lockTextArea:from:;		canLockChangeSelector: #canChangeLockFor:;		vResizing: #spaceFill;		hResizing: #spaceFill; 		font: StandardFonts codeFont;		spaceFillWeight: 3;		on: #keyStroke send: #keyStroke:fromSourceCodeMorph: to: self;		warningLimit: self warningLimit.			self setSourceCodeShorcutsTo: sourceTextArea.			sourceTextAreaLimit := sourceTextArea warningLimit.		sourceTextArea warningLimit: -1.	sourceTextAreas addFirst: (sourceTextArea -> nil).		^ sourceTextArea ! !!AbstractNautilusUI methodsFor: 'displaying' stamp: 'EstebanLorenzano 4/30/2014 11:54' prior: 17446520!open	window := NautilusWindow new model: self.	self addAll: window.	window openInWorld.	self changed:#sourceCodeFrom:.	self setWindowTitle.! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !"Nautilus"!"Traits"!----End fileIn----!----QUIT----2014-05-07T17:25:51.689142+02:00 Pharo.image priorSource: 73066!----STARTUP----2014-05-07T17:25:51.838726+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-05-07T17:25:55.912717+02:00 Pharo.image priorSource: 94186!----STARTUP----2014-05-07T17:32:48.004071+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-05-07T17:32:48.15407+02:00 Pharo-30847.image priorSource: 94380!----STARTUP----2014-05-14T14:51:06.101876+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 5/14/2014 14:06' prior: 33627795!commentForCurrentUpdate ^ '13261 rpackage renameTo: is renaming all classes, not just defined ones	https://pharo.fogbugz.com/f/cases/13261'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 5/14/2014 14:06'!script110	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 5/14/2014 14:06'!update30848	"self new update30848"	self withUpdateLog: '13261 rpackage renameTo: is renaming all classes, not just defined ones	https://pharo.fogbugz.com/f/cases/13261'.	self loadTogether: self script110 merge: false.	self flushCaches.! !"ScriptLoader30"!!RPackage methodsFor: 'accessing' stamp: 'EstebanLorenzano 5/13/2014 20:15' prior: 51711580!renameTo: aSymbol	| oldName newName oldCategoryNames |	oldName := self name.	newName := aSymbol asSymbol.		(self organizer includesPackageNamed: aSymbol)		ifTrue: [ RPackageConflictError  signal: ('A package named {1} already exists' format: { aSymbol }) ].	oldCategoryNames  := (self classTags collect: #categoryName as: Set) 		add: self categoryName;		yourself.	self name: aSymbol.	SystemAnnouncer uniqueInstance suspendAllWhile: [		self definedClasses do: [ :each | each category: newName, (each category allButFirst: oldName size) ].		oldCategoryNames do: [ :each | SystemOrganizer default removeCategory: each ] ].	self renameTagsPrefixedWith: oldName to: newName. 	self renameExtensionsPrefixedWith: oldName to: newName.				self organizer 		basicUnregisterPackageNamed: oldName;		basicRegisterPackage: self.		SystemAnnouncer uniqueInstance 		announce: (RPackageRenamed 			to: self 			oldName: oldName 			newName: newName).! !"RPackage-Core"!----End fileIn----!----QUIT----2014-05-14T14:51:07.806443+02:00 Pharo.image priorSource: 94574!----STARTUP----2014-05-14T14:51:07.959182+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-05-14T14:51:11.777175+02:00 Pharo.image priorSource: 107801!----STARTUP----2014-05-14T14:58:12.315005+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-05-14T14:58:12.473009+02:00 Pharo-30848.image priorSource: 107995!----STARTUP----2014-06-11T17:29:47.451249+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 6/11/2014 17:27' prior: 33649304!commentForCurrentUpdate ^ '13321 findSubstringViaPrimitive: key in: body startingAt: start matchTable: matchTable do not rely to correct character in source.	https://pharo.fogbugz.com/f/cases/13321'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 6/11/2014 17:27'!script111	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 6/11/2014 17:27'!update30849	"self new update30849"	self withUpdateLog: '13321 findSubstringViaPrimitive: key in: body startingAt: start matchTable: matchTable do not rely to correct character in source.	https://pharo.fogbugz.com/f/cases/13321'.	self loadTogether: self script111 merge: false.	self flushCaches.! !"ScriptLoader30"!!String methodsFor: 'comparing' stamp: 'jeanbaptistearnaud 6/11/2014 17:16' prior: 54694369!findSubstringViaPrimitive: key in: body startingAt: start matchTable: matchTable	"Answer the index in the string body at which the substring key first occurs, at or beyond start.  The match is determined using matchTable, which can be used to effect, eg, case-insensitive matches.  If no match is found, zero will be returned.	The algorithm below is not optimum -- it is intended to be translated to C which will go so fast that it wont matter."	| index |	<primitive: 'primitiveFindSubstring' module: 'MiscPrimitivePlugin'>	<var: #key declareC: 'unsigned char *key'>	<var: #body  declareC: 'unsigned char *body'>	<var: #matchTable declareC: 'unsigned char *matchTable'>		key size = 0 ifTrue: [^ 0].	start to: body size - key size + 1 do:		[:startIndex |		index := 1.			[(matchTable at: (body at: startIndex+index-1) asciiValue + 1)				= (matchTable at: (key at: index) asciiValue + 1)]				whileTrue:				[index = key size ifTrue: [^ startIndex].				index := index+1]].	^ 0"' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 1 matchTable: CaseSensitiveOrder 1' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 2 matchTable: CaseSensitiveOrder 7' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 8 matchTable: CaseSensitiveOrder 0' ' findSubstring: 'abc' in: 'abcdefABcd' startingAt: 2 matchTable: CaseSensitiveOrder 0' ' findSubstring: 'abc' in: 'abcdefABcd' startingAt: 2 matchTable: CaseInsensitiveOrder 7"! !"Collections-Strings"!----End fileIn----!----QUIT----2014-06-11T17:29:49.241403+02:00 Pharo.image priorSource: 108190!----STARTUP----2014-06-11T17:29:49.385934+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-06-11T17:29:53.353927+02:00 Pharo.image priorSource: 122017!----STARTUP----2014-06-11T17:36:34.930703+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-06-11T17:36:35.154699+02:00 Pharo-30849.image priorSource: 122212!----STARTUP----2014-06-24T09:20:46.76172+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 6/24/2014 09:18' prior: 33662918!commentForCurrentUpdate ^ '13349 PackPort to 3: 11987 Launching ProfStef should not require initials	https://pharo.fogbugz.com/f/cases/13349'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 6/24/2014 09:18'!script112	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 6/24/2014 09:18'!update30850	"self new update30850"	self withUpdateLog: '13349 PackPort to 3: 11987 Launching ProfStef should not require initials	https://pharo.fogbugz.com/f/cases/13349'.	self loadTogether: self script112 merge: false.	self flushCaches.! !"ScriptLoader30"!!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'MarcusDenker 6/19/2014 13:34' prior: 32562546!prepareDebuggerExample	Author fullName: 'AutoGenTutorial'.	self class compileSilently: 'divideTwoByZero	2/0.		"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.		- Remove the line of code above.	- Right-click and select ''Accept'' to compile the new version of the method	- click the button ''Proceed'' to continue execution.	".	PharoTutorial next. '		classified: 'interactive'.	Author reset.! !"ProfStef-Core"!----End fileIn----!----QUIT----2014-06-24T09:20:48.41227+02:00 Pharo.image priorSource: 122407!----STARTUP----2014-06-24T09:20:48.559906+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-06-24T09:20:52.3859+02:00 Pharo.image priorSource: 135127!----STARTUP----2014-06-24T09:27:53.067444+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-06-24T09:27:53.227445+02:00 Pharo-30850.image priorSource: 135321!----STARTUP----2014-07-02T11:40:47.931037+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 7/2/2014 11:35' prior: 33677134!commentForCurrentUpdate ^ '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/1342213405 Get support for temporary files (backport)	https://pharo.fogbugz.com/f/cases/13405	13452 Backport Pharo3: Issue 13415 Smalltalk resetTools breaks keybindings	https://pharo.fogbugz.com/f/cases/13452'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 7/2/2014 11:35'!script113	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.289.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.82.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 7/2/2014 11:35'!update30851	"self new update30851"	self withUpdateLog: '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/1342213405 Get support for temporary files (backport)	https://pharo.fogbugz.com/f/cases/13405	13452 Backport Pharo3: Issue 13415 Smalltalk resetTools breaks keybindings	https://pharo.fogbugz.com/f/cases/13452'.	self loadTogether: self script113 merge: false.	self flushCaches.! !"ScriptLoader30"!!MorphTreeMorphTests commentStamp: '<historical>' prior: 0!A MorphTreeMorphTests tests aspects of a MorphTreeMorph!!FileReferenceTest methodsFor: 'tests' stamp: 'ChristopheDemarey 6/25/2014 16:34'!testTempFilePrefixSuffix	| fileRef |	fileRef := FileReference newTempFilePrefix: 'FileReference' suffix: 'Test'.	self assert: (fileRef isKindOf: FileReference).	self assert: fileRef exists not.! !!MorphicShortcutHandler class methodsFor: 'tools' stamp: 'MarcusDenker 7/2/2014 10:09' prior: 29244521!registerToolsOn: aToolRegistry	"commente out as Smalltalk resetTools might register this handler and break keybindings"	"aToolRegistry register: self new as: #shortcuts"! !!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 6/30/2014 20:24' prior: 29046606!updateContentsWithPreviouslyExpanded: aNodeList	"Make sure we notice the removal of the contained nodes."	nodeList := nil.	self noteRemovalOfAll: self allNodeMorphs.	"<-- Changed"	(self nodeList isNil or: [ self nodeList isEmpty ])		ifTrue: [ 			nodeList := nil.			^ self emptySelection ].	self addSubmorphsFromNodeList: self currentNodelist previouslyExpanded: aNodeList! !!FileReference class methodsFor: 'instance creation' stamp: 'ChristopheDemarey 6/25/2014 16:36'!newTempFilePrefix: prefix suffix: suffix	| tmpDir random fileName |		tmpDir := FileLocator temp asFileReference.	[ random := UUIDGenerator default generateRandomBitsOfLength: 100.	fileName := prefix , random asString, suffix ] doWhileTrue: [ (tmpDir / fileName) exists ].	^ fileName asFileReference! !!MorphTreeMorphTests commentStamp: '<historical>' prior: 33702612!A MorphTreeMorphTests tests aspects of a MorphTreeMorph!!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 6/30/2014 19:46'!testLeakingSelectionsOnUpdate	"Test that selected morphs are forgotten on update."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	t selectAll.	c updateList.	t listManager selectedMorphList do: [ :each | self assert: (t allNodeMorphs includes: each) ] ]		ensure: [ w close ]! !"FileSystem-Core"!"FileSystem-Tests-Core"!"Morphic-Base"!"Morphic-Core"!"MorphicTests"!----End fileIn----!----QUIT----2014-07-02T11:40:54.343427+02:00 Pharo.image priorSource: 135514!----STARTUP----2014-07-02T11:40:54.496521+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-07-02T11:40:58.420517+02:00 Pharo.image priorSource: 150370!----STARTUP----2014-07-02T11:48:04.620362+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-07-02T11:48:04.77036+02:00 Pharo-30851.image priorSource: 150565!----STARTUP----2014-07-10T10:58:46.895664+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 7/10/2014 10:56' prior: 33690241!commentForCurrentUpdate ^ '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/13422'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 7/10/2014 10:56'!script114	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.293.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 7/10/2014 10:57'!update30852	"self new update30852"	self withUpdateLog: '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/13422'.	self loadTogether: self script114 merge: false.	self flushCaches.! !"ScriptLoader30"!!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 7/3/2014 19:53' prior: 29046210!noteRemovalOfAll: aCollection	"TODO: update the selection as well"	scroller removeAllMorphsIn: aCollection.	self listManager isCheckList		ifFalse: [ self listManager noteRemovalOfAll: aCollection ].	aCollection do: [ :each | each delete ].	self adjustSubmorphPositions! !!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 7/4/2014 10:10' prior: 33703329!updateContentsWithPreviouslyExpanded: aNodeList	"Make sure we notice the removal of the contained nodes."	nodeList := nil.	self noteRemovalOfAll: self allNodeMorphs.	"<-- Changed"	(self nodeList isNil or: [ self nodeList isEmpty ])		ifTrue: [ 			nodeList := nil.			^ self emptySelection ].	self addSubmorphsFromNodeList: self currentNodelist previouslyExpanded: aNodeList.	self listManager updateLastClickedMorph! !!MorphTreeModel methodsFor: 'updating' stamp: 'ThierryGoubier 7/4/2014 09:22' prior: 29028818!updateList	| items |	items := self selectedItems.	self requestView: MorphTreeChangeRequest updateList.	self selectItems: items! !!MorphTreeListManager methodsFor: 'selection change' stamp: 'ThierryGoubier 7/4/2014 09:48'!noteRemovalOfAll: aMorphList	aMorphList		do: [ :each | 			(self selectedMorphList includes: each)				ifTrue: [ 					each selected: false.					each unhighlight.					self selectedMorphList remove: each ifAbsent: [  ] ].			lastClickedMorph == each				ifTrue: [ lastClickedMorph := nil ] ]! !!MorphTreeListManager methodsFor: 'selection change' stamp: 'ThierryGoubier 7/4/2014 10:18'!updateLastClickedMorph	"When the contents have been updated, ensure that lastClickedMorph refer to a correct morph."	lastClickedMorph		ifNil: [ lastClickedMorph := self selectedMorphList ifEmpty: [  ] ifNotEmpty: [ self selectedMorphList last ] ]		ifNotNil: [ 			self allNodeMorphs				do: [ :each | 					each complexContents withoutListWrapper = lastClickedMorph complexContents withoutListWrapper						ifTrue: [ lastClickedMorph := each ] ] ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 10:25'!testLastClickedMorphSetUponUpdateList	"Test that lastClickedMorph isn't set to nil after an update list."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{CharacterSet}.	self assert: t listManager lastClickedMorph notNil.	c rootClass: Bag.	"We change completely the list. CharacterSet is not anymore in the list after the update."	c updateList.	self assert: t listManager lastClickedMorph isNil.	c selectItems: { Bag }.	self assert: t listManager lastClickedMorph notNil ]		ensure: [ w close ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 07:11'!testMaintainingSelectionsOnUpdate	"Test that the selection is well maintained on list update."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{Bag.			CharacterSet}.	t selectedMorphList		do: [ :e | 			self				assert:					({Bag.					CharacterSet} includes: e complexContents withoutListWrapper) ].	c updateList.	t selectedMorphList		do: [ :e | 			self				assert:					({Bag.					CharacterSet} includes: e complexContents withoutListWrapper) ] ]		ensure: [ w close ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 09:36'!testUpdatingSelectionsOnUpdate	"Test that the selection does not refer to non-existing nodes after updates."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{Bag.			CharacterSet}.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ].	c rootClass: Bag.	c updateList.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ] ]		ensure: [ w close ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 09:41'!testUpdatingSelectionsOnUpdateWithRemoval	"Test that the selection does not refer to non-existing nodes after updates, including if the update removes nodes."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{Bag.			CharacterSet}.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ].	c rootClass: Bag.	"We change completely the list. CharacterSet is not anymore in the list after the update."	c updateList.	self assert: t selectedMorphList size = 1.	"We have only Bag selected now."	self assert: t selectedMorphList first complexContents withoutListWrapper == Bag.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ] ]		ensure: [ w close ]! !"Morphic-Base"!"MorphicTests"!----End fileIn----!----QUIT----2014-07-10T10:58:51.184511+02:00 Pharo.image priorSource: 150760!----STARTUP----2014-07-10T10:58:51.338907+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-07-10T10:58:55.344903+02:00 Pharo.image priorSource: 168041!----STARTUP----2014-07-10T11:05:06.865887+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-07-10T11:05:07.02389+02:00 Pharo-30852.image priorSource: 168236!----STARTUP----2014-08-08T11:36:55.164075+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/8/2014 11:34' prior: 33705487!commentForCurrentUpdate ^ '13796 DNU ReadWriteStream>>fileIn in SmalltalkEditor>>fileItIn	https://pharo.fogbugz.com/f/cases/1379613658 backport 3.0: 13654 Pressing Enter in EyeInspector gives MNU: TextModel>>asText	https://pharo.fogbugz.com/f/cases/1365813626 SelectorException>>signalFor:In: does not understand object:	https://pharo.fogbugz.com/f/cases/13626'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/8/2014 11:35'!script115	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1751.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.293.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/8/2014 11:35'!update30853	"self new update30853"	self withUpdateLog: '13796 DNU ReadWriteStream>>fileIn in SmalltalkEditor>>fileItIn	https://pharo.fogbugz.com/f/cases/1379613658 backport 3.0: 13654 Pressing Enter in EyeInspector gives MNU: TextModel>>asText	https://pharo.fogbugz.com/f/cases/1365813626 SelectorException>>signalFor:In: does not understand object:	https://pharo.fogbugz.com/f/cases/13626'.	self loadTogether: self script115 merge: false.	self flushCaches.! !"ScriptLoader30"!!SelectorException class methodsFor: 'signaling' stamp: 'VincentBlondeau 7/21/2014 14:50' prior: 52891363!signalFor: aSelector in: aReceiver	"Create and signal an exception for aSelector in aReceiver."	^ self new		selector: aSelector;		signaler: aReceiver;		signal! !!SmalltalkEditor methodsFor: 'menu messages' stamp: 'VincentBlondeau 8/7/2014 15:15' prior: 53456904!fileItIn	"Make a Stream on the text selection and fileIn it.	 Moved here from FileController; this function can be useful from any text window that shows stuff in chunk format"	| selection |	selection := self selection.	CodeImporter evaluateReadStream: (ReadWriteStream on: selection string from: 1 to: selection size).	self inform: 'Code imported'.! !!EyeInspector methodsFor: 'accessing' stamp: 'NicolaiHess 7/23/2014 11:08' prior: 22235422!selectedElement	^ self list selectedItem ifNil: [ 		"sometimes the new list model desynchronize its selected index from its selected element,		this mean that the inspector evaluates 'list setSelectedIndex: 1' but 'list selectedItem' still returns nil.		This code fixes this case, that is triggered for example when you do Cmd+c in an ObjectExplorer."		self list selectedIndex ifNotNil: [ :currentIndex | 			currentIndex = 0				ifTrue: [ ^ nil ].			self list listItems ifNotEmpty: [ :aList | 				aList at: currentIndex  ] ] ]! !"Kernel"!"Spec-Inspector"!"Text-Edition"!----End fileIn----!----QUIT----2014-08-08T11:36:59.380563+02:00 Pharo.image priorSource: 168431!----STARTUP----2014-08-08T11:36:59.525131+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-08T11:37:03.363126+02:00 Pharo.image priorSource: 182430!----STARTUP----2014-08-08T11:43:37.555736+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-08T11:43:37.727737+02:00 Pharo-30853.image priorSource: 182625!----STARTUP----2014-08-15T10:56:55.611624+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/15/2014 10:53' prior: 33723157!commentForCurrentUpdate ^ '13680 [Backport 3.0] receiver of NodeModel is Nil	https://pharo.fogbugz.com/f/cases/1368013844 Extended search... fooled by block arguments (backport)	https://pharo.fogbugz.com/f/cases/13844'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/15/2014 10:54'!script116	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.308.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1751.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/15/2014 10:54'!update30854	"self new update30854"	self withUpdateLog: '13680 [Backport 3.0] receiver of NodeModel is Nil	https://pharo.fogbugz.com/f/cases/1368013844 Extended search... fooled by block arguments (backport)	https://pharo.fogbugz.com/f/cases/13844'.	self loadTogether: self script116 merge: false.	self flushCaches.! !"ScriptLoader30"!!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 7/24/2014 15:01' prior: 33717477!noteRemovalOfAll: aCollection	"TODO: update the selection as well"	self listManager noteRemovalOfAll: aCollection.	aCollection do: [ :each | each delete ].	scroller removeAllMorphsIn: aCollection.	self adjustSubmorphPositions! !!MorphTreeListManager methodsFor: 'selection change' stamp: 'ThierryGoubier 7/24/2014 15:02' prior: 33718599!noteRemovalOfAll: aMorphList	aMorphList		do: [ :each | 			self selectedMorphList remove: each ifAbsent: [  ].			lastClickedMorph == each				ifTrue: [ lastClickedMorph := nil ] ]! !!String methodsFor: 'converting' stamp: 'BenComan 8/14/2014 00:18' prior: 54626207!findSelector	"Dan's code for hunting down selectors with keyword parts; while this doesn't give a true parse, in most cases it does what we want, in where it doesn't, we're none the worse for it."	| sel possibleParens |	sel := self trimBoth.	sel := sel copyReplaceAll: '#' with: ''.	sel := sel copyReplaceAll: '[' with: '[ '.	(sel includes: $:) ifTrue:		[sel := sel copyReplaceAll: ':' with: ': '.	"for the style (aa max:bb) with no space"		possibleParens := sel findTokens: Character separators.		sel := self class streamContents:			[:s | | level | level := 0.			possibleParens do:				[:token | | n |				(level = 0 and: [token endsWith: ':'])					ifTrue: [s nextPutAll: token]					ifFalse: [(n := token occurrencesOf: $( ) > 0 ifTrue: [level := level + n].							(n := token occurrencesOf: $[ ) > 0 ifTrue: [level := level + n].							(n := token occurrencesOf: $] ) > 0 ifTrue: [level := level - n].							(n := token occurrencesOf: $) ) > 0 ifTrue: [level := level - n]]]]].	sel isEmpty ifTrue: [^ nil].	sel isOctetString ifTrue: [sel := sel asOctetString].	Symbol hasInterned: sel ifTrue:		[:aSymbol | ^ aSymbol].	^ nil! !!MorphTreeNodeMorph methodsFor: 'initialization' stamp: 'ThierryGoubier 7/24/2014 15:00' prior: 29149924!initWithContents: anObject prior: priorMorph forList: hostList indentLevel: newLevel	"Make sure that we will be removed from our model dependents when deleted."	container := hostList.	self cellInset: container resizerWidth @ 0.	complexContents := anObject.	anObject addDependent: self.	self		onAnnouncement: MorphDeleted		do: [ :ann | 			anObject removeDependent: ann morph.			ann morph announcer unsubscribe: anObject ].	isExpanded := anObject isExpanded.	nextSibling := firstChild := nil.	priorMorph ifNotNil: [ priorMorph nextSibling: self ].	indentLevel := newLevel.	self setBalloonText: anObject helpText.	self initRow.	anObject selected		ifTrue: [ self selectedWithoutNotifyingComplexContents: true ]! !"Collections-Strings"!"Morphic-Base"!----End fileIn----!----QUIT----2014-08-15T10:56:59.785963+02:00 Pharo.image priorSource: 182820!----STARTUP----2014-08-15T10:56:59.94937+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-15T10:57:03.737367+02:00 Pharo.image priorSource: 197855!----STARTUP----2014-08-15T11:01:52.049784+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-15T11:01:52.221786+02:00 Pharo-30854.image priorSource: 198049!----STARTUP----2014-08-25T10:00:54.921998+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/25/2014 09:58' prior: 33737548!commentForCurrentUpdate ^ '13902 inconsistent behaviour when debugging Pharo3.0	https://pharo.fogbugz.com/f/cases/1390213858 Backport 3.0 case 13857	https://pharo.fogbugz.com/f/cases/13858'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/25/2014 09:58'!script117	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.308.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/25/2014 09:58'!update30855	"self new update30855"	self withUpdateLog: '13902 inconsistent behaviour when debugging Pharo3.0	https://pharo.fogbugz.com/f/cases/1390213858 Backport 3.0 case 13857	https://pharo.fogbugz.com/f/cases/13858'.	self loadTogether: self script117 merge: false.	self flushCaches.! !"ScriptLoader30"!!Browser methodsFor: 'message functions' stamp: 'EstebanLorenzano 8/17/2014 12:35' prior: 19216511!defineMessageFrom: aString notifying: aController	"Compile the expressions in aString. Notify aController if a syntax error occurs. Install the compiled method in the selected class classified under  the currently selected message category name. Answer the selector obtained if compilation succeeds, nil otherwise."	| selectedMessageName selector category oldMessageList |	selectedMessageName := self selectedMessageName.	oldMessageList := self messageList.	contents := nil.	selector := self selectedClassOrMetaClass				compile: aString				classified: ((category := self selectedMessageCategoryName) ifNil: [ Protocol unclassified ])				notifying: aController.	selector == nil ifTrue: [^ nil].	contents := aString copy.	selector ~~ selectedMessageName		ifTrue: 			[category = Protocol nullCategory				ifTrue: [self changed: #classSelectionChanged.						self changed: #classList.						self messageCategoryListIndex: 1].			self setClassOrganizer.  "In case organization not cached"			(oldMessageList includes: selector)				ifFalse: [self changed: #messageList].			self messageListIndex: (self messageList indexOf: selector)].	^ selector! !!Browser methodsFor: 'initialization' stamp: 'EstebanLorenzano 8/17/2014 12:36' prior: 19224018!setSelector: aSymbol	"Make the receiver point at the given selector, in the currently chosen class"	| aClass messageCatIndex |	aSymbol ifNil: [^ self].	(aClass := self selectedClassOrMetaClass) ifNil: [^ self].	messageCatIndex := aClass organization protocols 		indexOf: (aClass organization protocolOrganizer protocolsOfSelector: aSymbol) anyOne.	self messageCategoryListIndex: messageCatIndex + 1.	messageCatIndex = 0 ifTrue: [^ self].	self messageListIndex:			((aClass organization listAtCategoryNumber: messageCatIndex)					indexOf: aSymbol)! !!ContextPart methodsFor: 'controlling' stamp: 'NicolaiHess 8/24/2014 11:41' prior: 20907150!runUntilErrorOrReturnFrom: aSender 	"ASSUMES aSender is a sender of self.  Execute self's stack until aSender returns or an unhandled exception is raised.  Return a pair containing the new top context and a possibly nil exception.  The exception is not nil if it was raised before aSender returned and it was not handled.  The exception is returned rather than openning the debugger, giving the caller the choice of how to handle it."	"Self is run by jumping directly to it (the active process abandons thisContext and executes self).  However, before jumping to self we insert an ensure block under aSender that jumps back to thisContext when evaluated.  We also insert an exception handler under aSender that jumps back to thisContext when an unhandled exception is raised.  In either case, the inserted ensure and exception handler are removed once control jumps back to thisContext."	| error context here topContext |	here := thisContext.	"Insert ensure and exception handler contexts under aSender"	error := nil.	context := aSender insertSender: (ContextPart		contextOn: UnhandledError, Halt do: [:ex |			error ifNil: [				"this is ugly but it fixes the side-effects of not sending an Unhandled error on Halt"				error := (ex isKindOf: Halt) ifTrue: [ ex ] ifFalse: [ ex exception ].				topContext := thisContext.				ex resumeUnchecked: here jump ]			ifNotNil: [ ex pass ]]).	context := context insertSender: (ContextPart		contextEnsure: [error ifNil: [				topContext := thisContext.				here jump]		]).	self jump.  "Control jumps to self"	"Control resumes here once above ensure block or exception handler is executed"	^ error ifNil: [		"No error was raised, remove ensure context by stepping until popped"		[context isDead] whileFalse: [topContext := topContext stepToCallee].		{topContext. nil}	] ifNotNil: [		"Error was raised, remove inserted above contexts then return signaler context"		aSender terminateTo: context sender.  "remove above ensure and handler contexts"		{topContext. error}	].! !"Kernel"!"Tools"!----End fileIn----!----QUIT----2014-08-25T10:00:59.693999+02:00 Pharo.image priorSource: 198244!----STARTUP----2014-08-25T10:00:59.844666+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-25T10:01:03.736663+02:00 Pharo.image priorSource: 214549!----STARTUP----2014-08-25T10:07:05.05323+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-25T10:07:05.20523+02:00 Pharo-30855.image priorSource: 214744!----STARTUP----2014-08-29T16:45:55.863361+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/29/2014 16:43' prior: 33752972!commentForCurrentUpdate ^ '13912 backport: 13911: Metacello test packages not properly unload	https://pharo.fogbugz.com/f/cases/1391213725 NativeBoost crashes when reading null pointer field in a structure	https://pharo.fogbugz.com/f/cases/13725'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/29/2014 16:43'!script118	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.308.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/29/2014 16:43'!update30856	"self new update30856"	self withUpdateLog: '13912 backport: 13911: Metacello test packages not properly unload	https://pharo.fogbugz.com/f/cases/1391213725 NativeBoost crashes when reading null pointer field in a structure	https://pharo.fogbugz.com/f/cases/13725'.	self loadTogether: self script118 merge: false.	self flushCaches.! !"ScriptLoader30"!!MetacelloTestsMCPackage methodsFor: 'accessing' stamp: 'ChristopheDemarey 8/20/2014 19:26'!species	^ MCPackage! !!GoferResource methodsFor: 'running' stamp: 'ChristopheDemarey 8/20/2014 19:25' prior: 23748222!setUpMonticelloRepository	"This method builds a fake repository with the version references from #buildReferences."	| packages |		packages := Dictionary new.	monticelloRepository := MCDictionaryRepository new.	versionReferences do: [ :reference |		monticelloRepository basicStoreVersion: (MCVersion new			setPackage:  (packages 				at: reference packageName 				ifAbsentPut: [ MetacelloTestsMCPackage new name: reference packageName ])			info: (MCVersionInfo				name: reference name				id: UUID new				message: 'This is a mock version'				date: Date today				time: Time now				author: reference author				ancestors: #())			snapshot: (MCSnapshot fromDefinitions: (Array				with: (MCOrganizationDefinition categories: (Array with: reference packageName asSymbol))				with: (MCClassDefinition name: (reference packageName copyWithout: $-) asSymbol superclassName: #Object category: reference packageName asSymbol instVarNames: #() comment: '')))			dependencies: #()) ].! !!NBFFIExternalStructTests methodsFor: 'tests' stamp: 'CiprianTeodorov 7/28/2014 22:50'!testStructWithPointerAccess	| struct |		struct := NBTestStructureWithPointer1 new.	self assert: struct isExternal not.	self assert: struct field isNil.! !!NBExternalStructureType methodsFor: 'emitting code' stamp: 'CiprianTeodorov 7/28/2014 22:38' prior: 29596512!coerceReturnPointer: gen	"input: pointer to struct in EAX	output: instance of external structure oop pointing to given address"		| asm proxy oop cont done |		asm := gen asm.	proxy := gen proxy.		"we only care for 1 arity e.g. 'Struct *', otherwise use generic marshalling."	pointerArity > 1 ifTrue: [  ^ super coerceReturnPointer: gen ].		"handle the case where the pointer is null here"	cont := asm uniqueLabelName: #cont.	done := asm uniqueLabelName: #done.	asm or: asm EAX with: asm EAX.	asm jnz: cont.	gen proxy nilObject.	asm jmp: done.	asm label: cont.		"first create an instance of NBExternalAddress"	NBExternalAddressType new 		createInstanceWithValue: asm EAX generator: gen.			proxy pushRemappableOop: asm EAX.		oop := gen reserveTemp.	proxy createInstanceOf: objectClass.	asm mov: asm EAX to: oop.		proxy popRemappableOop.	proxy storePointer: self dataIvarIndex ofObject: oop withValue: asm EAX.	"return an instance of objectClass as result"	asm mov: oop to: asm EAX.	gen releaseTemps: 1.	asm label: done.! !!NBTestStructureWithPointer1 class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/28/2014 22:50'!fieldsDesc" self rebuildFieldAccessors "	^ #(		int * field		)! !"Gofer-Tests"!"Metacello-TestsMCResources"!"NativeBoost-Core"!"NativeBoost-Tests"!----End fileIn----!----QUIT----2014-08-29T16:45:59.090156+02:00 Pharo.image priorSource: 214938!----STARTUP----2014-08-29T16:45:59.240934+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-29T16:46:03.310927+02:00 Pharo.image priorSource: 230172!----STARTUP----2014-08-29T16:51:31.484582+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-29T16:51:31.646582+02:00 Pharo-30856.image priorSource: 230367!----STARTUP----2014-09-18T13:43:03.563787+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 9/18/2014 13:39' prior: 33769665!commentForCurrentUpdate ^ '14018 backport #uncapitalized to Pharo3	https://pharo.fogbugz.com/f/cases/1401814025 DateModel Broken in 3.0	https://pharo.fogbugz.com/f/cases/14025'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 9/18/2014 13:40'!script119	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.310.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 9/18/2014 13:40'!update30857	"self new update30857"	self withUpdateLog: '14018 backport #uncapitalized to Pharo3	https://pharo.fogbugz.com/f/cases/1401814025 DateModel Broken in 3.0	https://pharo.fogbugz.com/f/cases/14025'.	self loadTogether: self script119 merge: false.	self flushCaches.! !"ScriptLoader30"!!SymbolTest methodsFor: 'tests' stamp: 'BernardoContreras 8/11/2014 19:13'!testUncapitalized	| uc lc empty |			uc := #MElViN.	lc := #mElViN.	empty := #' '.	self assert:  uc uncapitalized = lc.	self assert: lc uncapitalized = lc.	! !!StringTest methodsFor: 'tests - converting' stamp: 'BernardoContreras 8/11/2014 19:13'!testUncapitalized	| uc lc empty |			uc := 'MElViN'.	lc := 'mElViN'.	empty := ' '.	self assert:  uc uncapitalized = lc.	self assert: lc uncapitalized = lc.	"the string gets copied"	self deny: lc uncapitalized == lc.	self deny: empty uncapitalized == empty.! !!Symbol methodsFor: 'converting' stamp: 'BernardoContreras 8/11/2014 19:23'!uncapitalized	"Answer an object like the receiver but with first character downshifted if necessary"	^ self asString uncapitalized asSymbol! !!String methodsFor: 'converting' stamp: 'BernardoContreras 8/11/2014 19:12'!uncapitalized	"Return a copy with the first letter downShifted (in lower case)"		| answer |	self ifEmpty: [ ^ self copy ].	answer := self copy.	answer at: 1 put: answer first asLowercase.	^ answer! !!DateModel methodsFor: 'initialization' stamp: 'SeanDeNigris 9/16/2014 09:28' prior: 21162720!initializeWidgets	self instantiateModels: #(		dateLabel LabelModel		dateModel TextInputFieldModel		chooseDateButton ButtonModel).		dateLabel		text: 'Date'.			dateModel		text: Date today asString;		isCodeCompletionAllowed: false.		chooseDateButton		icon: self iconMorph;		action: [ self chooseDate ];		extent: self iconMorph extent.! !"Collections-Strings"!"CollectionsTests"!"Spec-PolyWidgets"!----End fileIn----!----QUIT----2014-09-18T13:43:13.105808+02:00 Pharo.image priorSource: 230562!----STARTUP----2014-09-18T13:43:13.33198+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-09-18T13:43:17.301979+02:00 Pharo.image priorSource: 244391!----STARTUP----2014-09-18T13:48:26.640337+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-09-18T13:48:26.795372+02:00 Pharo-30857.image priorSource: 244585!----STARTUP----2014-09-24T16:57:12.599992+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 9/24/2014 16:54' prior: 33785291!commentForCurrentUpdate ^ '14034 add to Pharo3: substrings:	https://pharo.fogbugz.com/f/cases/14034'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 9/24/2014 16:54'!script120	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.311.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 9/24/2014 16:54'!update30858	"self new update30858"	self withUpdateLog: '14034 add to Pharo3: substrings:	https://pharo.fogbugz.com/f/cases/14034'.	self loadTogether: self script120 merge: false.	self flushCaches.! !"ScriptLoader30"!!String methodsFor: 'converting' stamp: 'BenComan 9/21/2014 08:55'!substrings: separators 	"Answer an array containing the substrings in the receiver separated 	by the elements of separators."			"Adds forwards compatibility with planned conversion of #subStrings: to #substrings in Pharo4 	and deprecation of #subStrings: in Pharo5 (Issue 14034 and parent 7592)"		^ self subStrings: separators ! !"Collections-Strings"!----End fileIn----!----QUIT----2014-09-24T16:57:14.892262+02:00 Pharo.image priorSource: 244780!----STARTUP----2014-09-24T16:57:15.055404+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-09-24T16:57:19.017402+02:00 Pharo.image priorSource: 257256!----STARTUP----2014-09-24T17:42:28.243624+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-09-24T17:42:28.399626+02:00 Pharo-30858.image priorSource: 257451!----STARTUP----2014-10-24T13:48:05.804641+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 10/24/2014 13:45' prior: 33799508!commentForCurrentUpdate ^ '14244 MNU: MessageListBrowser>>guessTypeforName:	https://pharo.fogbugz.com/f/cases/14244'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 10/24/2014 13:45'!script121	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.311.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 10/24/2014 13:45'!update30859	"self new update30859"	self withUpdateLog: '14244 MNU: MessageListBrowser>>guessTypeforName:	https://pharo.fogbugz.com/f/cases/14244'.	self loadTogether: self script121 merge: false.	self flushCaches.! !"ScriptLoader30"!!MessageListBrowser methodsFor: 'accessing' stamp: 'MarcusDenker 10/15/2014 17:13'!guessTypeForName: aString	^nil! !"RecentSubmissions"!----End fileIn----!----QUIT----2014-10-24T13:48:08.002715+02:00 Pharo.image priorSource: 257646!----STARTUP----2014-10-24T13:48:08.14861+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-10-24T13:48:11.884622+02:00 Pharo.image priorSource: 269872!----STARTUP----2014-10-24T14:42:21.067636+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-10-24T14:42:21.21563+02:00 Pharo-30859.image priorSource: 270066!----STARTUP----2014-11-07T09:33:14.50955+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 11/7/2014 09:30' prior: 33812376!commentForCurrentUpdate ^ '14405 (backport pharo3) FileOut creates invalid comment entries for classes with class side methods	https://pharo.fogbugz.com/f/cases/14405'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 11/7/2014 09:31'!script122	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.311.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 11/7/2014 09:31'!update30860	"self new update30860"	self withUpdateLog: '14405 (backport pharo3) FileOut creates invalid comment entries for classes with class side methods	https://pharo.fogbugz.com/f/cases/14405'.	self loadTogether: self script122 merge: false.	self flushCaches.! !"ScriptLoader30"!!ClassOrganization methodsFor: 'backward compatibility - file in/out' stamp: 'NicolaiHess 11/5/2014 20:10' prior: 20005767!putCommentOnFile: aFileStream numbered: sourceIndex moveSource: moveSource forClass: aClass	"Store the comment about the class onto file, aFileStream."	| header |		self classComment isEmptyOrNil ifTrue:[ ^ self ].	aFileStream cr; nextPut: $!!.	header := String streamContents: [:strm | 			strm nextPutAll: aClass name;			nextPutAll: ' commentStamp: '.			commentStamp ifNil: [commentStamp := '<historical>'].			commentStamp storeOn: strm.			strm nextPutAll: ' prior: '; nextPutAll: '0'].	aFileStream nextChunkPut: header.	aClass organization fileOutCommentOn: aFileStream			moveSource: moveSource toFile: sourceIndex.	aFileStream cr! !"ClassOrganizer-Core"!----End fileIn----!----QUIT----2014-11-07T09:33:16.843832+01:00 Pharo.image priorSource: 270261!----STARTUP----2014-11-07T09:33:16.984683+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-11-07T09:33:20.79868+01:00 Pharo.image priorSource: 283243!----STARTUP----2014-11-07T09:39:10.402339+01:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-11-07T09:39:10.554343+01:00 Pharo-30860.image priorSource: 283438!----STARTUP----2014-12-12T14:53:15.317837+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 12/12/2014 14:50' prior: 33824988!commentForCurrentUpdate ^ '14575 Backport Pharo3: 14571 Add String class>>#loremIpsum constant and dynamically sized filler text feature	https://pharo.fogbugz.com/f/cases/14575'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 12/12/2014 14:50'!script123	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.313.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.655.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-TheIntegrator.75.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 12/12/2014 14:51'!update30861	"self new update30861"	self withUpdateLog: '14575 Backport Pharo3: 14571 Add String class>>#loremIpsum constant and dynamically sized filler text feature	https://pharo.fogbugz.com/f/cases/14575'.	self loadTogether: self script123 merge: false.	self flushCaches.! !"ScriptLoader30"!!ScrollSyncExample methodsFor: 'private' stamp: 'MarcusDenker 12/12/2014 14:38' prior: 52823707!loremIpsum	^ String loremIpsum: 2854! !!StringTest methodsFor: 'testing - instance creation' stamp: 'MarcusDenker 12/12/2014 14:37'!testLoremIpsum	| fillerText |	fillerText := String loremIpsum.	self deny: fillerText isEmpty.	self assert: (fillerText beginsWith: 'Lorem ipsum').	self assert: (fillerText endsWith: 'laborum.').	self assert: fillerText lines first equals: fillerText.	self assert: fillerText isAsciiString.	self assert: (Character space split: fillerText) size > 10! !!StringTest methodsFor: 'testing - instance creation' stamp: 'MarcusDenker 12/12/2014 14:37'!testLoremIpsum2048	| fillerText |	fillerText := String loremIpsum: 2048.	self assert: fillerText size equals: 2048.	self assert: (fillerText beginsWith: 'Lorem ipsum').	self assert: (fillerText includesSubstring: 'laborum.').	self assert: (fillerText endsWith: ('.', String cr)).	self assert: fillerText lines size > 2.	self assert: fillerText isAsciiString.	self assert: (Character space split: fillerText) size > 75! !!String class methodsFor: 'instance creation' stamp: 'MarcusDenker 12/12/2014 14:35'!loremIpsum	"Return a constant string with one paragraph of text, the famous Lorem ipsum filler text.	The result is pure ASCII (Latin words) and contains no newlines."		^ 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'! !!String class methodsFor: 'instance creation' stamp: 'MarcusDenker 12/12/2014 14:35'!loremIpsum: size	"Return a mostly random multi-paragraph filler string of the specified size.	The result is pure ASCII, uses CR for newlines and ends with a dot and newline."		"self loremIpsum: 2048"		| words out |	words := (self loremIpsum findTokens: ' ,.') collect: #asLowercase.	(out := LimitedWriteStream on: (self new: size))		setLimit: size - 2 		limitBlock: [ 			^ out originalContents 				at: size - 1 put: $.; 				at: size put: Character cr; 				yourself ].	[ 		out << self loremIpsum; cr; cr.		5 atRandom timesRepeat: [			15 atRandom timesRepeat: [	 			out << words atRandom capitalized.				20 atRandom timesRepeat: [ out space; << words atRandom ].				out nextPut: $.; space ].			out cr; cr ] ] repeat! !"Collections-Strings"!"CollectionsTests"!"Spec-Examples"!----End fileIn----!----QUIT----2014-12-12T14:53:18.659839+01:00 Pharo.image priorSource: 283632!----STARTUP----2014-12-12T14:53:18.816714+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-12-12T14:53:22.93071+01:00 Pharo.image priorSource: 298557!----STARTUP----2014-12-12T15:00:07.492395+01:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-12-12T15:00:07.656398+01:00 Pharo-30861.image priorSource: 298752!----STARTUP----2014-12-12T15:31:53.372871+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 12/12/2014 15:29' prior: 33838362!commentForCurrentUpdate ^ '14012 RGMetaclassDefinition and RGMetatraitDefinition DNU #category	https://pharo.fogbugz.com/f/cases/1401214382 Fix Search Code refactoring menu item in Nautilus	https://pharo.fogbugz.com/f/cases/14382'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 12/12/2014 15:29'!script124	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.313.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.655.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-TheIntegrator.738.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-TheIntegrator.162.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-TheIntegrator.164.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-TheIntegrator.75.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 12/12/2014 15:29'!update30862	"self new update30862"	self withUpdateLog: '14012 RGMetaclassDefinition and RGMetatraitDefinition DNU #category	https://pharo.fogbugz.com/f/cases/1401214382 Fix Search Code refactoring menu item in Nautilus	https://pharo.fogbugz.com/f/cases/14382'.	self loadTogether: self script124 merge: false.	self flushCaches.! !"ScriptLoader30"!!CodeSearchingRule commentStamp: 'PaulDeBruicker 11/3/2014 19:58' prior: 0!I am a lint rule for Code Searching!!CodeSearchingAcceptor commentStamp: 'PaulDeBruicker 11/3/2014 19:57' prior: 0!I am an acceptor in the context of code rewriting using RBTreeSearching!!RGMetaclassDefinition methodsFor: 'accessing' stamp: 'MarcusDenker 12/12/2014 15:11'!category	^ self theNonMetaClass category! !!NautilusUI methodsFor: '*NautilusRefactoring' stamp: 'PaulDeBruicker 11/3/2014 20:06'!searchCode: aText	acceptor := CodeSearchingAcceptor model: self.	self sourceCode: aText! !!NautilusRefactoring methodsFor: 'rewrite code' stamp: 'PaulDeBruicker 11/3/2014 20:05' prior: 30257951!searchCode		self model searchCode: self searchCodeText! !!CodeSearchingRule commentStamp: 'PaulDeBruicker 11/3/2014 19:58' prior: 33865755!I am a lint rule for Code Searching!!CodeSearchingRule methodsFor: 'accessing' stamp: 'PaulDeBruicker 11/3/2014 20:27'!matcher: aRule	matcher := aRule! !!CodeSearchingRule methodsFor: 'accessing' stamp: 'PaulDeBruicker 11/3/2014 19:58'!name	^ 'Code Searching'! !!CodeSearchingAcceptor commentStamp: 'PaulDeBruicker 11/3/2014 19:57' prior: 33865872!I am an acceptor in the context of code rewriting using RBTreeSearching!!CodeSearchingAcceptor methodsFor: 'protocol' stamp: 'PaulDeBruicker 11/3/2014 20:51'!accept: aText notifying: aController	| environment tree rule result |	self model sourceTextArea update: #clearUserEdits.		environment := self model browsedEnvironment.	tree := self class compiler evaluate: aText.		rule := CodeSearchingRule new		matcher: tree;		yourself.		result := RBSmalllintChecker runRule: rule onEnvironment: environment.	(MethodBrowser new methods: result result methods) openWithSpec ! !!RGMetatraitDefinition methodsFor: 'accessing' stamp: 'MarcusDenker 12/12/2014 15:12'!category	^ self theNonMetaClass category! !"Nautilus"!"NautilusRefactoring"!"Ring-Core-Kernel"!----End fileIn----!----QUIT----2014-12-12T15:31:56.61525+01:00 Pharo.image priorSource: 298946!----STARTUP----2014-12-12T15:31:56.775052+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-12-12T15:32:00.88905+01:00 Pharo.image priorSource: 313227!----STARTUP----2014-12-12T15:38:10.996073+01:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-12-12T15:38:11.154071+01:00 Pharo-30862.image priorSource: 313421!----STARTUP----2015-02-16T15:32:52.361179+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 2/16/2015 15:30' prior: 33853676!commentForCurrentUpdate ^ '13290 Pharo 3.0: Recover lost changes does not recover classes created	https://pharo.fogbugz.com/f/cases/13290'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 2/16/2015 15:30'!script125	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.313.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.655.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-TheIntegrator.738.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-TheIntegrator.162.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-TheIntegrator.164.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-TheIntegrator.75.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 2/16/2015 15:30'!update30863	"self new update30863"	self withUpdateLog: '13290 Pharo 3.0: Recover lost changes does not recover classes created	https://pharo.fogbugz.com/f/cases/13290'.	self loadTogether: self script125 merge: false.	ChangesLog reset;default.	self flushCaches.! !"ScriptLoader30"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo30/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader30-TheIntegrator.1039.mcz') load.ScriptLoader new update30863.!----End fileIn----!----QUIT----2015-02-16T15:32:56.095182+01:00 Pharo.image priorSource: 313615!----STARTUP----2015-02-16T15:32:56.254785+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-02-16T15:33:00.156786+01:00 Pharo.image priorSource: 326335!----STARTUP----2015-02-16T15:40:24.155154+01:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2015-02-16T15:40:24.327155+01:00 Pharo-30863.image priorSource: 326530!----STARTUP----2015-03-11T17:03:47.84737+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 3/11/2015 16:54' prior: 33868344!commentForCurrentUpdate ^ '14944 Pharo 3.0: Add subStrXyz to substrXYZ compatibility methods	https://pharo.fogbugz.com/f/cases/14944'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 3/11/2015 16:54'!script126	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.315.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.655.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-TheIntegrator.738.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-TheIntegrator.162.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-TheIntegrator.164.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-TheIntegrator.75.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-TheIntegrator.35.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 3/11/2015 16:54'!update30864	"self new update30864"	self withUpdateLog: '14944 Pharo 3.0: Add subStrXyz to substrXYZ compatibility methods	https://pharo.fogbugz.com/f/cases/14944'.	self loadTogether: self script126 merge: false.	self flushCaches.! !"ScriptLoader30"!!String methodsFor: 'accessing' stamp: 'SeanDeNigris 2/16/2015 10:00'!allRangesOfSubstring: aSubString	"Ease transition to Pharo 4.0 where subStringXyz messages have been renamed to substringXyz"	^ self allRangesOfSubString: aSubString! !!String methodsFor: 'accessing' stamp: 'SeanDeNigris 2/16/2015 10:00'!findAnySubstr: delimiters startingAt: start 	"Ease transition to Pharo 4.0 where subStringXyz messages have been renamed to substringXyz"	^ self findAnySubStr: delimiters startingAt: start! !!String methodsFor: 'accessing' stamp: 'SeanDeNigris 2/16/2015 10:01'!findBetweenSubstrs: delimiters	"Ease transition to Pharo 4.0 where subStringXyz messages have been renamed to substringXyz"	^ self findBetweenSubStrs: delimiters! !!String methodsFor: 'accessing' stamp: 'SeanDeNigris 2/16/2015 10:03'!skipAnySubstr: delimiters startingAt: start 	"Ease transition to Pharo 4.0 where subStringXyz messages have been renamed to substringXyz"	^ self skipAnySubStr: delimiters startingAt: start! !!String methodsFor: 'converting' stamp: 'SeanDeNigris 2/16/2015 10:03' prior: 33811306!substrings: separators 	"Ease transition to Pharo 4.0 where subStringXyz messages have been renamed to substringXyz"	^ self subStrings: separators! !!FindReplaceService methodsFor: 'services' stamp: 'SeanDeNigris 2/16/2015 10:01'!findNextSubstring: aSubString inTextMorph: aTextMorph	"Ease transition to Pharo 4.0 where subStringXyz messages have been renamed to substringXyz"	^ self findNextSubString: aSubString inTextMorph: aTextMorph! !"Collections-Strings"!"Text-Edition"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo30/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader30-TheIntegrator.1040.mcz') load.ScriptLoader new update30864.!----End fileIn----!----QUIT----2015-03-11T17:03:50.377353+01:00 Pharo.image priorSource: 326725!----STARTUP----2015-03-11T17:03:50.531184+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-03-11T17:03:54.469191+01:00 Pharo.image priorSource: 341004!----STARTUP----2015-03-11T17:09:28.109363+01:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2015-03-11T17:09:28.253364+01:00 Pharo-30864.image priorSource: 341199!----STARTUP----2015-04-22T00:42:10.642215+02:00 as /builds/workspace/Pillar/PHARO/30/VERSION/stable/VM/vm/Pharo.image!----SNAPSHOT----2015-04-22T00:42:10.790221+02:00 Pillar.image priorSource: 341394!!ConfigurationOfPillar commentStamp: '<historical>' prior: 0!I describe Pillar's dependencies and versions.!!ConfigurationOfPillar commentStamp: '<historical>' prior: 33896183!I describe Pillar's dependencies and versions.!----STARTUP----2015-04-22T00:42:11.119422+02:00 as /builds/workspace/Pillar/PHARO/30/VERSION/stable/VM/vm/Pillar.image!!ConfigurationOfPillar class methodsFor: 'development support' stamp: 'DamienCassou 10/7/2013 11:10'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfPillar class methodsFor: 'private' stamp: 'DamienCassou 10/7/2013 11:10'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfPillar class methodsFor: 'metadata' stamp: 'DamienCassou 12/19/2013 13:34'!catalogChangeLog	^ 'nothing'! !!ConfigurationOfPillar class methodsFor: 'metadata' stamp: 'DamienCassou 12/19/2013 12:12'!catalogContactInfo	^ 'The original creator of Pillar (formerly known as ''''the syntax behind the Pier CMS'''') is Lukas Renggli. Nevertheless, *Damien Cassou>damien.cassou@gmail.com* is now the maintainer. The website is at *http://www.smalltalkhub.com/#!!/~Pier/Pillar*.'! !!ConfigurationOfPillar class methodsFor: 'metadata' stamp: 'DamienCassou 3/16/2015 19:41'!catalogDescription	^ 'Pillar is a wiki-like syntax, its document model, a parser for it, and a set of exporters (e.g., HTML, LaTeX, Markdown...). Pillar is primarily used as the wiki syntax behind the *Pier CMS>http://piercms.com*. Pillar is also being used to write books: e.g., *the Enterprise Pharo book>https://ci.inria.fr/pharo-contribution/job/EnterprisePharoBook/lastSuccessfulBuild/artifact*.'! !!ConfigurationOfPillar class methodsFor: 'metadata' stamp: 'DamienCassou 12/19/2013 12:18'!catalogKeyClassesAndExample	^ 'The key classes are:- ==PRDocumentItem== and all its subclasses (e.g., ==PRLink==, ==PRParagraph==, ==PRHeader==, ==PRDocument==). These classes represent the document model.- ==PRDocumentParser== which takes a pillar-formatted string as input and produces a ==PRDocument== (i.e., the document model) as output. Its main public method is its ==parse:== method on class-side to start the parsing process.- ==PRVisitor== which provides all the functionality to navigate the document model.- ==PRDocumentWriter2== is the superclass of all classes supposed to output a pier document model to a text file. Its subclasses include one to output a LaTeX document and one to output an HTML webpage.From Pharo, you can create an HTML out of a Pillar-formatted string by writing a code similar to:[[[language=SmalltalkPRHTMLWriter defaultConfigurations anyOne    inputString: ''Some text with *a link to Pharo>http://www.pharo.org*.'';    outputFile: ''myFirstPillarExport.html'' asFileReference;    export]]]Executing this code will result in the creation of a ==myFirstPillarExport.html== file with this content:[[[language=html<p>Some text with <a href="http://www.pharo.org">a link to Pharo</a>.</p>]]]'! !!ConfigurationOfPillar class methodsFor: 'metadata' stamp: 'DamienCassou 12/19/2013 11:41'!catalogKeywords	^ #(pier book wiki html latex markdown)! !!ConfigurationOfPillar class methodsFor: 'private' stamp: 'DamienCassou 10/7/2013 11:10'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfPillar class methodsFor: 'private' stamp: 'DamienCassou 10/7/2013 11:10'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfPillar class methodsFor: 'metacello tool support' stamp: 'DamienCassou 10/7/2013 11:10'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfPillar class methodsFor: 'loading' stamp: 'DamienCassou 10/7/2013 11:10'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfPillar class methodsFor: 'loading' stamp: 'DamienCassou 10/7/2013 11:10'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfPillar class methodsFor: 'loading' stamp: 'DamienCassou 10/7/2013 11:10'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfPillar class methodsFor: 'loading' stamp: 'DamienCassou 4/3/2015 13:46'!loadStable	"Load the #stable version defined for this platform.."	"self loadStable"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfPillar class methodsFor: 'accessing' stamp: 'DamienCassou 10/7/2013 11:10'!project	^self new project! !!ConfigurationOfPillar class methodsFor: 'development support' stamp: 'DamienCassou 10/7/2013 11:10'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'DamienCassou 2/19/2014 11:07'!baseline010: spec	<version: '0.10-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/';				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'STON') ];				package: 'Pillar-Tests-Model' with: [ spec requires: #('Pillar-Model') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: 'Pillar-ExporterCore' ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: 'Pillar-ExporterCore' ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ].			spec				group: 'html' with: 'Pillar-ExporterHTML';				group: 'html tests' with: 'Pillar-Tests-ExporterHTML';				group: 'latex' with: 'Pillar-ExporterLaTeX';				group: 'latex tests' with: 'Pillar-Tests-ExporterLaTeX';				group: 'markdown' with: 'Pillar-ExporterMarkdown';				group: 'markdown tests' with: 'Pillar-Tests-ExporterMarkdown';				group: 'All exporters' with: #('html' 'latex' 'markdown');				group: 'All exporter tests' with: #('html tests' 'latex tests' 'markdown tests');				group: 'All tests' with: #('All exporter tests' 'Pillar-Tests-Model' 'Pillar-Tests-ExporterCore');				group: 'All but tests' with: #('All exporters');				group: 'ALL' with: #('All tests' 'All but tests').			self				grease: spec;				mustache: spec;				ston: spec ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: [ spec requires: 'Pillar-ExporterCore' ].			spec group: 'All but tests' with: #('Pillar-Cli') ]! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'DamienCassou 3/6/2014 10:37'!baseline011: spec	<version: '0.11-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/'.			self				grease: spec;				mustache: spec;				ston: spec.			spec				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-Tests-Model'					with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar' 'Pillar-ExporterText') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'STON') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterPillar' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterText' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterPillar'					with: [ spec requires: #('Pillar-ExporterPillar' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterText' with: [ spec requires: #('Pillar-ExporterText' 'Pillar-Tests-ExporterCore') ].			spec				group: 'html exporter' with: #('Pillar-ExporterHTML');				group: 'html exporter tests' with: #('Pillar-Tests-ExporterHTML');				group: 'latex exporter' with: #('Pillar-ExporterLaTeX');				group: 'latex exporter tests' with: #('Pillar-Tests-ExporterLaTeX');				group: 'markdown exporter' with: #('Pillar-ExporterMarkdown');				group: 'markdown exporter tests' with: #('Pillar-Tests-ExporterMarkdown');				group: 'pillar exporter' with: #('Pillar-ExporterPillar');				group: 'pillar exporter tests' with: #('Pillar-Tests-ExporterPillar');				group: 'text exporter' with: #('Pillar-ExporterText');				group: 'text exporter tests' with: #('Pillar-Tests-ExporterText');				group: 'All exporters'					with: #('html exporter' 'latex exporter' 'markdown exporter' 'pillar exporter' 'text exporter');				group: 'All exporter tests'					with:						#('html exporter tests' 'latex exporter tests' 'markdown exporter tests' 'pillar exporter tests' 'text exporter tests');				group: 'All tests' with: #('All exporter tests' 'Pillar-Tests-Model' 'Pillar-Tests-ExporterCore');				group: 'All but tests' with: #('All exporters');				group: 'ALL' with: #('All tests' 'All but tests') ].	spec		for: #'pharo3.x'		do: [ 			spec				package: 'Pillar-PharoInspector' with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar') ];				package: 'Pillar-Cli' with: [ spec requires: 'Pillar-ExporterCore' ];				group: 'All but tests' with: #('Pillar-Cli' 'Pillar-PharoInspector') ]! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'DamienCassou 6/6/2014 17:01'!baseline012: spec	<version: '0.12-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/'.			self				grease: spec;				mustache: spec;				ston: spec.			spec				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-Tests-Model'					with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar' 'Pillar-ExporterText') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'STON') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterPillar' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterText' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterPillar'					with: [ spec requires: #('Pillar-ExporterPillar' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterText' with: [ spec requires: #('Pillar-ExporterText' 'Pillar-Tests-ExporterCore') ].			spec				group: 'html exporter' with: #('Pillar-ExporterHTML');				group: 'html exporter tests' with: #('Pillar-Tests-ExporterHTML');				group: 'latex exporter' with: #('Pillar-ExporterLaTeX');				group: 'latex exporter tests' with: #('Pillar-Tests-ExporterLaTeX');				group: 'markdown exporter' with: #('Pillar-ExporterMarkdown');				group: 'markdown exporter tests' with: #('Pillar-Tests-ExporterMarkdown');				group: 'pillar exporter' with: #('Pillar-ExporterPillar');				group: 'pillar exporter tests' with: #('Pillar-Tests-ExporterPillar');				group: 'text exporter' with: #('Pillar-ExporterText');				group: 'text exporter tests' with: #('Pillar-Tests-ExporterText');				group: 'All exporters'					with: #('html exporter' 'latex exporter' 'markdown exporter' 'pillar exporter' 'text exporter');				group: 'All exporter tests'					with:						#('html exporter tests' 'latex exporter tests' 'markdown exporter tests' 'pillar exporter tests' 'text exporter tests');				group: 'All tests' with: #('All exporter tests' 'Pillar-Tests-Model' 'Pillar-Tests-ExporterCore');				group: 'All but tests' with: #('All exporters');				group: 'ALL' with: #('All tests' 'All but tests') ].	spec		for: #pharo		do: [ 			spec				package: 'Pillar-PharoInspector' with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar') ];				package: 'Pillar-Cli' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-GitBook' with: [ spec requires: #('Pillar-Cli' 'markdown exporter' 'text exporter') ];				group: 'All but tests' with: #('Pillar-Cli' 'Pillar-PharoInspector' 'Pillar-GitBook') ]! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'DiegoLont 2/7/2014 10:24'!"protocol: accessing"baseline01: spec	<version: '0.1-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/'.			spec package: 'Pillar-Model' with: [ spec requires: #('Grease') ].			spec package: 'Pillar-Tests-Model' with: [ spec requires: #('Pillar-Model') ].			spec package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-Model') ].			spec package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-Model') ].			spec package: 'Pillar-ExporterLaTeX' with: [ spec requires: 'Pillar-Model' ].			spec package: 'Pillar-Tests-ExporterLaTeX' with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-Model') ].			spec package: 'Pillar-ExporterMarkdown' with: [ spec requires: 'Pillar-Model' ].			spec package: 'Pillar-Tests-ExporterMarkdown' with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-Model') ].			spec group: 'ALL' with: #('Pillar-Tests-ExporterLaTeX' 'Pillar-Tests-ExporterHTML' 'Pillar-Tests-ExporterMarkdown' ).			self grease: spec ]! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'TorstenBergmann 3/6/2015 02:05'!baseline020: spec	<version: '0.20-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/'.			self				grease: spec;				mustache: spec;				ston: spec.			spec				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-Tests-Model'					with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar' 'Pillar-ExporterText') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'STON') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterPillar' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterText' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterPillar'					with: [ spec requires: #('Pillar-ExporterPillar' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterText' with: [ spec requires: #('Pillar-ExporterText' 'Pillar-Tests-ExporterCore') ].			spec				group: 'html exporter' with: #('Pillar-ExporterHTML');				group: 'html exporter tests' with: #('Pillar-Tests-ExporterHTML');				group: 'latex exporter' with: #('Pillar-ExporterLaTeX');				group: 'latex exporter tests' with: #('Pillar-Tests-ExporterLaTeX');				group: 'markdown exporter' with: #('Pillar-ExporterMarkdown');				group: 'markdown exporter tests' with: #('Pillar-Tests-ExporterMarkdown');				group: 'pillar exporter' with: #('Pillar-ExporterPillar');				group: 'pillar exporter tests' with: #('Pillar-Tests-ExporterPillar');				group: 'text exporter' with: #('Pillar-ExporterText');				group: 'text exporter tests' with: #('Pillar-Tests-ExporterText');				group: 'All exporters'					with: #('html exporter' 'latex exporter' 'markdown exporter' 'pillar exporter' 'text exporter');				group: 'All exporter tests'					with:						#('html exporter tests' 'latex exporter tests' 'markdown exporter tests' 'pillar exporter tests' 'text exporter tests');				group: 'All tests' with: #('All exporter tests' 'Pillar-Tests-Model' 'Pillar-Tests-ExporterCore');				group: 'All but tests' with: #('All exporters');				group: 'ALL' with: #('All tests' 'All but tests') ].	spec		for: #pharo		do: [ 			spec				package: 'Pillar-Pharo-Tools' with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar') ];				package: 'Pillar-Cli' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-GitBook' with: [ spec requires: #('Pillar-Cli' 'markdown exporter' 'text exporter') ];				group: 'All but tests' with: #('Pillar-Cli' 'Pillar-Pharo-Tools' 'Pillar-GitBook') ]! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'CyrilFerlicot 4/1/2015 18:08'!baseline021: spec	<version: '0.21-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/'.			self				grease: spec;				mustache: spec;				cocoon: spec.			spec				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-Tests-Model'					with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar' 'Pillar-ExporterText') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'Cocoon') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterPillar' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterText' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterPillar'					with: [ spec requires: #('Pillar-ExporterPillar' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterText' with: [ spec requires: #('Pillar-ExporterText' 'Pillar-Tests-ExporterCore') ].			spec				group: 'html exporter' with: #('Pillar-ExporterHTML');				group: 'html exporter tests' with: #('Pillar-Tests-ExporterHTML');				group: 'latex exporter' with: #('Pillar-ExporterLaTeX');				group: 'latex exporter tests' with: #('Pillar-Tests-ExporterLaTeX');				group: 'markdown exporter' with: #('Pillar-ExporterMarkdown');				group: 'markdown exporter tests' with: #('Pillar-Tests-ExporterMarkdown');				group: 'pillar exporter' with: #('Pillar-ExporterPillar');				group: 'pillar exporter tests' with: #('Pillar-Tests-ExporterPillar');				group: 'text exporter' with: #('Pillar-ExporterText');				group: 'text exporter tests' with: #('Pillar-Tests-ExporterText');				group: 'All exporters'					with: #('html exporter' 'latex exporter' 'markdown exporter' 'pillar exporter' 'text exporter');				group: 'All exporter tests'					with:						#('html exporter tests' 'latex exporter tests' 'markdown exporter tests' 'pillar exporter tests' 'text exporter tests');				group: 'All tests' with: #('All exporter tests' 'Pillar-Tests-Model' 'Pillar-Tests-ExporterCore');				group: 'All but tests' with: #('All exporters');				group: 'ALL' with: #('All tests' 'All but tests') ].	spec		for: #pharo		do: [ 			spec				package: 'Pillar-Pharo-Tools' with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar') ];				package: 'Pillar-Cli' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-GitBook' with: [ spec requires: #('Pillar-Cli' 'markdown exporter' 'text exporter') ];				group: 'All but tests' with: #('Pillar-Cli' 'Pillar-Pharo-Tools' 'Pillar-GitBook') ]! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'DamienCassou 4/3/2015 13:26'!baseline022: spec	<version: '0.22-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/'.			self				grease: spec;				mustache: spec;				cocoon: spec.			spec				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-Tests-Model'					with: [ spec requires: #('Pillar-Model' 'Pillar-ExporterPillar' 'Pillar-ExporterText') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'Cocoon') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterBeamer' with: [ spec requires: #('Pillar-ExporterLaTeX') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterPillar' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-ExporterText' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterBeamer'					with: [ spec requires: #('Pillar-ExporterBeamer' 'Pillar-Tests-ExporterLaTeX') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterPillar'					with: [ spec requires: #('Pillar-ExporterPillar' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-Tests-ExporterText' with: [ spec requires: #('Pillar-ExporterText' 'Pillar-Tests-ExporterCore') ].			spec				group: 'html exporter' with: #('Pillar-ExporterHTML');				group: 'html exporter tests' with: #('Pillar-Tests-ExporterHTML');				group: 'latex exporter' with: #('Pillar-ExporterLaTeX');				group: 'latex exporter tests' with: #('Pillar-Tests-ExporterLaTeX');				group: 'beamer exporter' with: #('Pillar-ExporterBeamer');				group: 'beamer exporter tests' with: #('Pillar-Tests-ExporterBeamer');				group: 'markdown exporter' with: #('Pillar-ExporterMarkdown');				group: 'markdown exporter tests' with: #('Pillar-Tests-ExporterMarkdown');				group: 'pillar exporter' with: #('Pillar-ExporterPillar');				group: 'pillar exporter tests' with: #('Pillar-Tests-ExporterPillar');				group: 'text exporter' with: #('Pillar-ExporterText');				group: 'text exporter tests' with: #('Pillar-Tests-ExporterText');				group: 'All exporters'					with: #('html exporter' 'latex exporter' 'beamer exporter' 'markdown exporter' 'pillar exporter' 'text exporter');				group: 'All exporter tests'					with:						#('html exporter tests' 'latex exporter tests' 'beamer exporter tests' 'markdown exporter tests' 'pillar exporter tests' 'text exporter tests');				group: 'All tests' with: #('All exporter tests' 'Pillar-Tests-Model' 'Pillar-Tests-ExporterCore');				group: 'All but tests' with: #('All exporters');				group: 'ALL' with: #('All tests' 'All but tests') ].	spec		for: #pharo		do: [ 			spec				package: 'Pillar-Pharo-Tools' with: [ spec requires: #('Pillar-Model' 'All exporters') ];				package: 'Pillar-Cli' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-GitBook' with: [ spec requires: #('Pillar-Cli' 'markdown exporter' 'text exporter') ];				group: 'All but tests' with: #('Pillar-Cli' 'Pillar-Pharo-Tools' 'Pillar-GitBook') ]! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'DiegoLont 2/7/2014 10:24'!baseline02: spec	"protocol: accessing"	<version: '0.2-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/';				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'STON') ];				package: 'Pillar-Tests-Model' with: [ spec requires: #('Pillar-Model') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: 'Pillar-ExporterCore' ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: 'Pillar-ExporterCore' ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ].			spec group: 'ALL' with: #('Pillar-Tests-ExporterLaTeX' 'Pillar-Tests-ExporterHTML' 'Pillar-Tests-ExporterMarkdown').			self				grease: spec;				mustache: spec;				ston: spec ].! !!ConfigurationOfPillar methodsFor: 'baselines' stamp: 'DiegoLont 2/7/2014 10:24'!baseline03: spec	"protocol: accessing"	<version: '0.3-baseline'>	spec		for: #common		do: [ 			spec				blessing: #baseline;				repository: 'http://smalltalkhub.com/mc/Pier/Pillar/main/';				package: 'Pillar-Model' with: [ spec requires: #('Grease') ];				package: 'Pillar-ExporterCore' with: [ spec requires: #('Pillar-Model' 'Mustache' 'STON') ];				package: 'Pillar-Tests-Model' with: [ spec requires: #('Pillar-Model') ];				package: 'Pillar-Tests-ExporterCore' with: [ spec requires: #('Pillar-Tests-Model' 'Pillar-ExporterCore') ];				package: 'Pillar-ExporterHTML' with: [ spec requires: #('Pillar-ExporterCore') ];				package: 'Pillar-Tests-ExporterHTML' with: [ spec requires: #('Pillar-ExporterHTML' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-ExporterLaTeX' with: [ spec requires: 'Pillar-ExporterCore' ];				package: 'Pillar-Tests-ExporterLaTeX'					with: [ spec requires: #('Pillar-ExporterLaTeX' 'Pillar-Tests-ExporterCore') ];				package: 'Pillar-ExporterMarkdown' with: [ spec requires: 'Pillar-ExporterCore' ];				package: 'Pillar-Tests-ExporterMarkdown'					with: [ spec requires: #('Pillar-ExporterMarkdown' 'Pillar-Tests-ExporterCore') ].			spec				group: 'html' with: 'Pillar-ExporterHTML';				group: 'html tests' with: 'Pillar-Tests-ExporterHTML';				group: 'latex' with: 'Pillar-ExporterLaTeX';				group: 'latex tests' with: 'Pillar-Tests-ExporterLaTeX';				group: 'markdown' with: 'Pillar-ExporterMarkdown';				group: 'markdown tests' with: 'Pillar-Tests-ExporterMarkdown';				group: 'All exporters' with: #('html' 'latex' 'markdown');				group: 'All exporter tests' with: #('html tests' 'latex tests' 'markdown tests');				group: 'All tests' with: #('All exporter tests' 'Pillar-Tests-Model' 'Pillar-Tests-ExporterCore');				group: 'All but tests' with: #('All exporters');				group: 'ALL' with: #('All tests' 'All but tests').			self				grease: spec;				mustache: spec;				ston: spec ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: [ spec requires: 'Pillar-ExporterCore' ].			spec group: 'All but tests' with: #('Pillar-Cli') ]! !!ConfigurationOfPillar methodsFor: 'dependencies' stamp: 'CyrilFerlicot 4/1/2015 18:10'!cocoon: spec	spec		project: 'Cocoon'		with: [ 			spec				className: 'ConfigurationOfCocoon';				versionString: #stable;				repository: 'http://smalltalkhub.com/mc/PharoExtras/Cocoon/main' ]! !!ConfigurationOfPillar methodsFor: 'accessing' stamp: 'DamienCassou 10/7/2013 11:10'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfPillar methodsFor: 'symbolic versions' stamp: 'DamienCassou 4/3/2015 13:22'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.22-baseline'.	spec for: #'pharo4.x' version: '0.22-baseline'.! !!ConfigurationOfPillar methodsFor: 'dependencies' stamp: 'DiegoLont 2/7/2014 10:24'!grease: spec	spec		project: 'Grease'		with: [ 			spec				className: 'ConfigurationOfGrease';				versionString: #stable;				loads: #('Core');				repository: 'http://www.smalltalkhub.com/mc/Seaside/MetacelloConfigurations/main' ]! !!ConfigurationOfPillar methodsFor: 'dependencies' stamp: 'DiegoLont 2/7/2014 10:24'!mustache: spec	spec		project: 'Mustache'		with: [ 			spec				className: 'ConfigurationOfMustache';				versionString: #stable;				loads: #('Core');				repository: 'http://www.smalltalkhub.com/mc/NorbertHartl/Mustache/main' ]! !!ConfigurationOfPillar methodsFor: 'accessing' stamp: 'DamienCassou 10/7/2013 11:10'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfPillar methodsFor: 'symbolic versions' stamp: 'CyrilFerlicot 4/17/2015 10:14'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '0.40'.		spec for: #'pharo4.x' version: '0.40'.! !!ConfigurationOfPillar methodsFor: 'dependencies' stamp: 'DiegoLont 2/7/2014 10:24'!ston: spec	spec		project: 'STON'		with: [ 			spec				className: 'ConfigurationOfSton';				versionString: #stable;				loads: #('Core');				repository: 'http://smalltalkhub.com/mc/SvenVanCaekenberghe/STON/main' ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 2/19/2014 11:14'!version010: spec	<version: '0.10' imports: #('0.10-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.10'.		spec author: 'DamienCassou'.		spec timestamp: '2/19/2014 11:08'.		spec 			project: 'Grease' with: '1.1.5';			project: 'Mustache' with: '0.48';			project: 'STON' with: '0.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.63';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.71';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.39';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.42';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.37';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.27';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienPollet.46';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.30';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.54';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.13'. ].	spec for: #'pharo3.x' do: [		spec package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 3/24/2014 16:33'!version011: spec	<version: '0.11' imports: #('0.11-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.11'.		spec author: 'DamienCassou'.		spec timestamp: '3/24/2014 16:25'.		spec 			project: 'Grease' with: '1.1.6';			project: 'Mustache' with: '0.50';			project: 'STON' with: '0.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.75';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.51';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.79';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.57';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.50';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.38';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.4';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.51';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.15';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.36';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.30';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-DamienCassou.4';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.4'. ].	spec for: #'pharo3.x' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 4/15/2014 11:33'!version012: spec	<version: '0.12' imports: #('0.11-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.12'.		spec author: 'DamienCassou'.		spec timestamp: '4/15/2014 11:29'.		spec 			project: 'Grease' with: '1.1.6';			project: 'Mustache' with: '0.50';			project: 'STON' with: '0.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.75';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.51';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.80';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.57';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.50';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.39';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.4';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.51';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.15';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.36';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.30';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-DamienCassou.4';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.4'. ].	spec for: #'pharo3.x' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DiegoLont 5/13/2014 10:54'!version013: spec	<version: '0.13' imports: #('0.11-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.13'.		spec author: 'DamienCassou'.		spec timestamp: '4/18/2014 17:44'.		spec 			project: 'Grease' with: #'release1.1';			project: 'Mustache' with: '0.50';			project: 'STON' with: '0.8'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.75';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.51';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.80';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.57';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.50';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.40';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.4';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.51';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.15';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.36';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.31';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-DamienCassou.4';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.4'. ].	spec for: #'pharo3.x' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 6/3/2014 18:03'!version014: spec	<version: '0.14' imports: #('0.11-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.14'.		spec author: 'DamienCassou'.		spec timestamp: '6/3/2014 17:49'.		spec 			project: 'Grease' with: #'release1.1';			project: 'Mustache' with: '0.60';			project: 'STON' with: '0.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.81';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.97';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.82';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.58';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.53';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.44';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.4';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.52';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.16';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.82';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.32';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-DamienCassou.5';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.6'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 6/5/2014 14:38'!version015: spec	<version: '0.15' imports: #('0.11-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.15'.		spec author: 'DamienCassou'.		spec timestamp: '6/5/2014 14:36'.		spec 			project: 'Grease' with: #'release1.1';			project: 'Mustache' with: '0.60';			project: 'STON' with: '0.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.82';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.97';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.84';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-BenComan.54';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-BenComan.45';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.4';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.56';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-BenComan.83';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-BenComan.7'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 6/6/2014 17:38'!version016: spec	<version: '0.16' imports: #('0.12-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.16'.		spec author: 'DamienCassou'.		spec timestamp: '6/6/2014 17:38'.		spec 			project: 'Grease' with: #'release1.1';			project: 'Mustache' with: '0.60';			project: 'STON' with: '0.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.83';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.97';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.84';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-BenComan.54';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.46';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.5';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.56';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-BenComan.83';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 12/9/2014 15:17'!version017: spec	<version: '0.17' imports: #('0.12-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.17'.		spec author: 'DamienCassou'.		spec timestamp: '12/9/2014 15:17'.		spec 			project: 'Grease' with: '1.1.11';			project: 'Mustache' with: '0.60';			project: 'STON' with: '0.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.86';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.84';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.57';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.5';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.56';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-BenComan.83';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 1/30/2015 10:10'!version018: spec	<version: '0.18' imports: #('0.12-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.18'.		spec author: 'DamienCassou'.		spec timestamp: '1/30/2015 10:10'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'STON' with: '0.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.86';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.84';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.58';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.9';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.5';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.56';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-PharoInspector' with: 'Pillar-PharoInspector-DamienCassou.1';			package: 'Pillar-Cli' with: 'Pillar-Cli-TorstenBergmann.8';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 11/28/2013 13:58'!version01: spec	"protocol: accessing"	<version: '0.1' imports: #('0.1-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.34';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.18';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.23';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.27';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.24';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.13';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.15';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.3' ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'TorstenBergmann 3/6/2015 12:57'!version020: spec	<version: '0.20' imports: #('0.20-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.20 for Pharo 4'.		spec author: 'TorstenBergmann'.		spec timestamp: '3/5/2015 10:10'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'STON' with: '0.10'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-TorstenBergmann.87';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-TorstenBergmann.85';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-TorstenBergmann.59';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-TorstenBergmann.10';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-TorstenBergmann.6';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.56';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-TorstenBergmann.6';			package: 'Pillar-Cli' with: 'Pillar-Cli-TorstenBergmann.8';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 3/31/2015 18:27'!version021: spec	<version: '0.21' imports: #('0.20-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.21'.		spec author: 'CyrilFerlicot'.		spec timestamp: '3/31/2015 18:27'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'STON' with: '0.10'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-TorstenBergmann.87';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.86';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-TorstenBergmann.59';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-TorstenBergmann.10';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-TorstenBergmann.6';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.57';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-TorstenBergmann.6';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.9';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/1/2015 18:12'!version022: spec	<version: '0.22' imports: #('0.21-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.22'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/1/2015 11:24'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-TorstenBergmann.87';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.86';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-TorstenBergmann.59';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-TorstenBergmann.10';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-TorstenBergmann.6';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.57';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-TorstenBergmann.6';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.9';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/2/2015 09:51'!version023: spec	<version: '0.23' imports: #('0.21-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.23'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/1/2015 18:21'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-TorstenBergmann.87';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.90';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-TorstenBergmann.59';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-TorstenBergmann.10';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-TorstenBergmann.6';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.59';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-TorstenBergmann.6';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/2/2015 09:51'!version024: spec	<version: '0.24' imports: #('0.21-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.24 - Adaptation of the tests to the new configuration system.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/2/2015 09:49'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-TorstenBergmann.87';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.90';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-TorstenBergmann.59';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-TorstenBergmann.10';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-TorstenBergmann.6';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.60';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-TorstenBergmann.6';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 4/3/2015 13:45'!version025: spec	<version: '0.25' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.25 - Add Beamer (experimental export).'.		spec author: 'DamienCassou'.		spec timestamp: '2015/04/03 13:39'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-TorstenBergmann.87';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-JohnCBorden.100';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.93';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-BenComan.59';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.61';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.48';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-TorstenBergmann.10';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-TorstenBergmann.6';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.60';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.7';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 4/6/2015 22:17'!version026: spec	<version: '0.26' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.26 - Add transformers.'.		spec author: 'DamienCassou'.		spec timestamp: '2015/04/06 22:12'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.7'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.96';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.106';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.95';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.15';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/7/2015 14:32'!version027: spec	<version: '0.27' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.26 - Equals and Hash added into PRScript.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/07 14:13'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.98';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.108';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.95';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.15';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/8/2015 13:00'!version028: spec	<version: '0.28' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.28 - ScriptLanguage improvement. Correction of failure on a test.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/08 12:58'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.100';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.109';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.95';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.15';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.84';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/8/2015 13:15'!version029: spec	<version: '0.29' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.29 - Adaptability to windows.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/08 13:14'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.102';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.110';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.95';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.15';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'BenjaminVanRyseghem 1/9/2014 22:48'!version02: spec	<version: '0.2' imports: #('0.2-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.37';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.19';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.20';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.29';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.30';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.27';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-BenjaminVanRyseghem.31';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.13';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.16';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.3' ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/8/2015 14:37'!version030: spec	<version: '0.30' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.30 - More test.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/08 13:31'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.103';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.112';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.95';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.15';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/9/2015 10:54'!version031: spec	<version: '0.31' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.31 - Exporters now works again.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/09 10:53'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.104';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.112';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.95';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.15';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/9/2015 13:45'!version032: spec	<version: '0.32' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.32 - Inclusion Tag: ${inputFile:myFile.pillar}$'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/09 13:44'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.105';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.112';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.96';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-DamienCassou.15';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/9/2015 14:32'!version033: spec	<version: '0.33' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.33 - Test correction. ExporterPillar with InupuFileAnnotation.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/09 14:31'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.106';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.112';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.96';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.16';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/9/2015 14:52'!version034: spec	<version: '0.34' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.34 - Recursion on the includes.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/09 14:51'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.9'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.107';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.112';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.96';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.16';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.62';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/10/2015 14:17'!version035: spec	<version: '0.35' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.35 - Now the inputFile annotation keep the configuration. Some refactoring.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/09 14:15'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.10'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.108';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.113';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.97';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.60';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.62';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.49';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.17';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.63';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/14/2015 10:27'!version036: spec	<version: '0.36' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.36 - Refactoring. Now the parameters are in a Dictionary instead of an associative array.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/14 10:06'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.10'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.109';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.114';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.98';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-CyrilFerlicot.61';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-CyrilFerlicot.63';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-CyrilFerlicot.52';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.18';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.64';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/14/2015 13:16'!version037: spec	<version: '0.37' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.37 - Correction of a problem with the inputFile tag. baseDirectory was the memory root.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/14 13:16'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.10'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.110';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.114';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.99';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-CyrilFerlicot.61';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-CyrilFerlicot.63';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-CyrilFerlicot.52';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.18';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.64';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/14/2015 14:45'!version038: spec	<version: '0.38' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.38 - modification about the parameters of the annotations'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/14 14:30'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.10'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.111';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.117';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.99';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-CyrilFerlicot.61';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-CyrilFerlicot.63';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-CyrilFerlicot.52';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.18';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.64';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/16/2015 13:27'!version039: spec	<version: '0.39' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.39 - Refactoring of the templates'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/16 13:25'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.11'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.115';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.118';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.100';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-CyrilFerlicot.61';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-CyrilFerlicot.63';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-CyrilFerlicot.52';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.18';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.65';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 1/8/2014 15:30'!version03: spec	<version: '0.3' imports: #('0.3-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.39';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.44';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.25';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.30';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.34';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.27';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.27';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.19';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.17';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.4' ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: 'Pillar-Cli-DamienCassou.5'.			 ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/17/2015 10:14'!version040: spec	<version: '0.40' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.40 - More More tests. Correction of the inclusion.'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/17 10h10'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.11'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.116';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.119';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.102';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-CyrilFerlicot.61';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-CyrilFerlicot.63';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-CyrilFerlicot.52';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.18';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.65';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'CyrilFerlicot 4/21/2015 16:55'!version041: spec	<version: '0.41' imports: #('0.22-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.41 - New Cocoon version'.		spec author: 'CyrilFerlicot'.		spec timestamp: '2015/04/21 16h55'.		spec 			project: 'Grease' with: '1.1.13';			project: 'Mustache' with: '0.71';			project: 'Cocoon' with: '1.12'.		spec 			package: 'Pillar-Model' with: 'Pillar-Model-CyrilFerlicot.116';			package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-CyrilFerlicot.119';			package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-CyrilFerlicot.102';			package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-CyrilFerlicot.61';			package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-CyrilFerlicot.63';			package: 'Pillar-ExporterBeamer' with: 'Pillar-ExporterBeamer-DamienCassou.4';			package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-CyrilFerlicot.52';			package: 'Pillar-ExporterPillar' with: 'Pillar-ExporterPillar-CyrilFerlicot.18';			package: 'Pillar-ExporterText' with: 'Pillar-ExporterText-DamienCassou.7';			package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-CyrilFerlicot.65';			package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-BenComan.18';			package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-CyrilFerlicot.85';			package: 'Pillar-Tests-ExporterBeamer' with: 'Pillar-Tests-ExporterBeamer-DamienCassou.1';			package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-BenComan.33';			package: 'Pillar-Tests-ExporterPillar' with: 'Pillar-Tests-ExporterPillar-BenComan.6';			package: 'Pillar-Tests-ExporterText' with: 'Pillar-Tests-ExporterText-DamienCassou.8'. ].	spec for: #'pharo' do: [		spec 			package: 'Pillar-Pharo-Tools' with: 'Pillar-Pharo-Tools-DamienCassou.8';			package: 'Pillar-Cli' with: 'Pillar-Cli-CyrilFerlicot.10';			package: 'Pillar-GitBook' with: 'Pillar-GitBook-DamienCassou.1'. ].! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 1/13/2014 11:25'!version04: spec	<version: '0.4' imports: #('0.3-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.47';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.57';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.30';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.33';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.47';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.31';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.34';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.24';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.20';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.9' ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'.			 ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DiegoLont 2/7/2014 10:26'!version05: spec	<version: '0.5' imports: #('0.3-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.47';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.58';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.30';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.34';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.47';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.31';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.34';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.24';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.21';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.9' ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'.			 ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DiegoLont 2/7/2014 10:26'!version06: spec	<version: '0.6' imports: #('0.3-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.50';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.68';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.34';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.35';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.48';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.31';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.37';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.24';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.21';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.9' ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'.			 ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DiegoLont 2/7/2014 10:26'!version07: spec	<version: '0.7' imports: #('0.3-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				package: 'Pillar-Model' with: 'Pillar-Model-BenjaminVanRyseghem.51';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-BenjaminVanRyseghem.70';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.36';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.42';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.54';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.33';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.41';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.27';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.27';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.13' ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'.			 ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DiegoLont 2/7/2014 10:29'!version08: spec	<version: '0.8' imports: #('0.3-baseline')>	spec		for: #common		do: [ 			spec				description: 'To be filled out.'; 				blessing: #release.							spec				project: 'Grease' with: '1.1.5';				project: 'Mustache' with: '0.48';				project: 'STON' with: '0.7'.							spec				package: 'Pillar-Model' with: 'Pillar-Model-BenjaminVanRyseghem.51';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-BenjaminVanRyseghem.70';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.36';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienCassou.43';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.54';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.33';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.41';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.27';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.28';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.13' ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'.			 ]! !!ConfigurationOfPillar methodsFor: 'versions' stamp: 'DamienCassou 2/18/2014 18:17'!version09: spec	<version: '0.9' imports: #('0.3-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release.							spec				project: 'Grease' with: '1.1.5';				project: 'Mustache' with: '0.48';				project: 'STON' with: '0.7'.							spec				package: 'Pillar-Model' with: 'Pillar-Model-DamienCassou.62';				package: 'Pillar-ExporterCore' with: 'Pillar-ExporterCore-DamienCassou.71';				package: 'Pillar-ExporterHTML' with: 'Pillar-ExporterHTML-DamienCassou.37';				package: 'Pillar-ExporterLaTeX' with: 'Pillar-ExporterLaTeX-DamienPollet.46';				package: 'Pillar-ExporterMarkdown' with: 'Pillar-ExporterMarkdown-DamienCassou.54';				package: 'Pillar-Tests-Model' with: 'Pillar-Tests-Model-DamienCassou.39';				package: 'Pillar-Tests-ExporterCore' with: 'Pillar-Tests-ExporterCore-DamienCassou.42';				package: 'Pillar-Tests-ExporterHTML' with: 'Pillar-Tests-ExporterHTML-DamienCassou.27';				package: 'Pillar-Tests-ExporterLaTeX' with: 'Pillar-Tests-ExporterLaTeX-DamienCassou.30';				package: 'Pillar-Tests-ExporterMarkdown' with: 'Pillar-Tests-ExporterMarkdown-DamienCassou.13' ].	spec		for: #'pharo3.x'		do: [ 			spec package: 'Pillar-Cli' with: 'Pillar-Cli-BenjaminVanRyseghem.7'.			 ]! !"ConfigurationOfPillar"!!ConfigurationOfMustache class methodsFor: 'development support' stamp: 'NorbertHartl 9/30/2013 10:05'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfMustache class methodsFor: 'private' stamp: 'NorbertHartl 9/30/2013 10:05'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfMustache class methodsFor: 'private' stamp: 'NorbertHartl 9/30/2013 10:05'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfMustache class methodsFor: 'private' stamp: 'NorbertHartl 9/30/2013 10:05'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfMustache class methodsFor: 'metacello tool support' stamp: 'NorbertHartl 9/30/2013 10:05'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfMustache class methodsFor: 'loading' stamp: 'NorbertHartl 9/30/2013 10:05'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfMustache class methodsFor: 'loading' stamp: 'NorbertHartl 9/30/2013 10:05'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfMustache class methodsFor: 'loading' stamp: 'NorbertHartl 9/30/2013 10:05'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfMustache class methodsFor: 'accessing' stamp: 'NorbertHartl 9/30/2013 10:05'!project	^self new project! !!ConfigurationOfMustache class methodsFor: 'development support' stamp: 'NorbertHartl 9/30/2013 10:05'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfMustache methodsFor: 'baselines' stamp: 'NorbertHartl 12/23/2014 15:16'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/NorbertHartl/Mustache/main'.		spec 			package: 'Mustache-Core';			package: 'Mustache-Tests' with: [				spec requires: #('Mustache-Core' ). ].		spec 			group: 'default' with: #('Core' 'Tests' );			group: 'Core' with: #('Mustache-Core' );			group: 'Tests' with: #('Mustache-Tests' ). ].! !!ConfigurationOfMustache methodsFor: 'symbolic versions' stamp: 'NorbertHartl 12/23/2014 15:16'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.1-baseline'.! !!ConfigurationOfMustache methodsFor: 'accessing' stamp: 'NorbertHartl 9/30/2013 10:05'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfMustache methodsFor: 'symbolic versions' stamp: 'NorbertHartl 12/23/2014 15:16'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '0.71'.! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'NorbertHartl 10/3/2013 21:38'!version043: spec	<version: '0.43' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '0.42 : last preparations for releasing0.43 : release on smalltalkhub'.		spec author: 'NorbertHartl'.		spec timestamp: '10/3/2013 21:38'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.15';			package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.6'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'NorbertHartl 10/3/2013 21:50'!version044: spec	<version: '0.44' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '0.43 : release on smalltalkhub0.44 : comments added and code critics'.		spec author: 'NorbertHartl'.		spec timestamp: '10/3/2013 21:50'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.16';			package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.6'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'DamienCassou 11/27/2013 18:14'!version045: spec	<version: '0.45' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '0.45 : comments added and code critics'.		spec author: 'NorbertHartl'.		spec timestamp: '10/3/2013 21:50'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.16';			package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.6'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'DamienCassou 11/27/2013 18:15'!version046: spec	<version: '0.46' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '0.46 : Provide AbstractFileReference>>asMustacheTemplate and AbstractFileReference>>mustacheTemplateDuring:'.		spec author: 'DamienCassou'.		spec timestamp: '27/11/2013 18:14'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-DamienCassou.17';			package: 'Mustache-Tests' with: 'Mustache-Tests-DamienCassou.7'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'DamienCassou 11/27/2013 18:23'!version047: spec	<version: '0.47' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '0.47 : Previous didn''t load in Pharo 2.0'.		spec author: 'DamienCassou'.		spec timestamp: '27/11/2013 18:23'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-DamienCassou.18';			package: 'Mustache-Tests' with: 'Mustache-Tests-DamienCassou.7'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'DamienCassou 11/27/2013 18:32'!version048: spec	<version: '0.48' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '0.48 : Fix for Pharo 2.0'.		spec author: 'DamienCassou'.		spec timestamp: '27/11/2013 18:31'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-DamienCassou.19';			package: 'Mustache-Tests' with: 'Mustache-Tests-DamienCassou.7'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'NorbertHartl 2/25/2014 16:17'!version049: spec	<version: '0.49' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: ''.		spec author: 'NorbertHartl'.		spec timestamp: '2/25/2014 16:16'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.20';			package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.8'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'NorbertHartl 2/25/2014 16:38'!version050: spec	<version: '0.50' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'Old change delimiter test was testing the broken behavior correct'.		spec author: 'NorbertHartl'.		spec timestamp: '2/25/2014 16:38'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.20';			package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.9'. ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'NorbertHartl 4/18/2014 23:46'!version060: spec         <version: '0.60' imports: #('0.1-baseline')>        spec for: #common do: [                spec blessing: #release.			spec package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.23'.			spec package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.12'.                ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'NorbertHartl 11/7/2014 10:39'!version070: spec         <version: '0.70' imports: #('0.1-baseline')>        spec for: #common do: [                spec blessing: #release.			spec package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.25'.			spec package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.15'.                ].! !!ConfigurationOfMustache methodsFor: 'versions' stamp: 'NorbertHartl 12/23/2014 15:16'!version071: spec	<version: '0.71' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 0.71'.		spec author: 'NorbertHartl'.		spec timestamp: '12/23/2014 15:16'.		spec 			package: 'Mustache-Core' with: 'Mustache-Core-NorbertHartl.26';			package: 'Mustache-Tests' with: 'Mustache-Tests-NorbertHartl.15'. ].! !"ConfigurationOfMustache"!!ConfigurationOfCocoon commentStamp: 'CyrilFerlicot 4/2/2015 15:56' prior: 0!(ConfigurationOfCocoon project version: #bleedingEdge) load. SmalltalkHub description :An application configuration system using JSON.I manage a set of properties. I can contains other sub-configurations. If the configuration don't find an information it will look up in his parent.!!!!Using CocoonFor create a new Configuration you need to extands CCConfiguration. In your XXCocoonConfiguration's class you'll need to define new properties. For example if you need some input files you can create this method : [[[inputFiles		<cocoonParameter: 'List the files that I need to use.'>	^ self propertyAt: 'inputFiles' default: [ self defaultInputFiles ]]]]with a default value.[[[defaultInputFiles	<cocoonDefaultParameter:'None'>		^ Array new]]]Then you create a new Configuration Interpreter by extending the CCSTONConfigurationInterpreter class.On a method call "configuration" you need to create a new XXCocoonConfiguration's class and then you need to overwrite the "initializeInterpretationBlocks" to get your configuration.!!!!Using CCDocumentationGeneratorCocoon contains a system that allows you to generate a pillar documentation of your parameters in your configuration: CCDocumentationGenerator !!To use it it's simple. On a property's method add this pragma: [[[	<cocoonParameter: 'The documentation of my property'>]]]The default value's property need to be named like this: if your property is 'author' so the default value's method will be named 'defaultAuthor'.Inside the default method add this pragma: [[[	<cocoonDefaultParameter: 'The description of the default value.'>]]]If the default value is a litteral you can also write [[[	<cocoonDefaultParameter: ''>]]]This will print the litteral value.Now you can generate your documentation like this.Create a stream and use this simple command:[[[	stream := String new writeStream.	CCDocumentationGeneration of: myClassWhoExtendsCCConfiguration on: stream.]]]________________________________________________@@note A part of the properties has been copied from PRBasicObject.@@note You can see an example of use in the Pillar Exporter's configuration. ( PRCocoonConfiguration and PRCocoonConfigurationInterpreter )!!ConfigurationOfCocoon commentStamp: 'CyrilFerlicot 4/2/2015 15:56' prior: 34011426!(ConfigurationOfCocoon project version: #bleedingEdge) load. SmalltalkHub description :An application configuration system using JSON.I manage a set of properties. I can contains other sub-configurations. If the configuration don't find an information it will look up in his parent.!!!!Using CocoonFor create a new Configuration you need to extands CCConfiguration. In your XXCocoonConfiguration's class you'll need to define new properties. For example if you need some input files you can create this method : [[[inputFiles		<cocoonParameter: 'List the files that I need to use.'>	^ self propertyAt: 'inputFiles' default: [ self defaultInputFiles ]]]]with a default value.[[[defaultInputFiles	<cocoonDefaultParameter:'None'>		^ Array new]]]Then you create a new Configuration Interpreter by extending the CCSTONConfigurationInterpreter class.On a method call "configuration" you need to create a new XXCocoonConfiguration's class and then you need to overwrite the "initializeInterpretationBlocks" to get your configuration.!!!!Using CCDocumentationGeneratorCocoon contains a system that allows you to generate a pillar documentation of your parameters in your configuration: CCDocumentationGenerator !!To use it it's simple. On a property's method add this pragma: [[[	<cocoonParameter: 'The documentation of my property'>]]]The default value's property need to be named like this: if your property is 'author' so the default value's method will be named 'defaultAuthor'.Inside the default method add this pragma: [[[	<cocoonDefaultParameter: 'The description of the default value.'>]]]If the default value is a litteral you can also write [[[	<cocoonDefaultParameter: ''>]]]This will print the litteral value.Now you can generate your documentation like this.Create a stream and use this simple command:[[[	stream := String new writeStream.	CCDocumentationGeneration of: myClassWhoExtendsCCConfiguration on: stream.]]]________________________________________________@@note A part of the properties has been copied from PRBasicObject.@@note You can see an example of use in the Pillar Exporter's configuration. ( PRCocoonConfiguration and PRCocoonConfigurationInterpreter )!!ConfigurationOfCocoon class methodsFor: 'development support' stamp: 'StephaneDucasse 3/31/2015 10:07'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfCocoon class methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:07'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfCocoon class methodsFor: 'metadata' stamp: 'CyrilFerlicot 4/2/2015 17:20'!catalogContactInfo	^ 'The creator of Cocoon is Stephan Ducasse with the help of Cyril Ferlicot.	The website is at *http://smalltalkhub.com/#!!/~PharoExtras/Cocoon/*.'! !!ConfigurationOfCocoon class methodsFor: 'metadata' stamp: 'CyrilFerlicot 4/2/2015 17:22'!catalogDescription	^ 'An application configuration system using JSON. I manage a set of properties. I can contains other sub-configurations. If the configuration don''t find an information it will look up in his parent.'! !!ConfigurationOfCocoon class methodsFor: 'metadata' stamp: 'CyrilFerlicot 4/2/2015 17:23'!catalogKeywords	^ #(cocoon configuration manager documentation)! !!ConfigurationOfCocoon class methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:07'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfCocoon class methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:07'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfCocoon class methodsFor: 'metacello tool support' stamp: 'StephaneDucasse 3/31/2015 10:07'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfCocoon class methodsFor: 'loading' stamp: 'StephaneDucasse 3/31/2015 10:07'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfCocoon class methodsFor: 'loading' stamp: 'StephaneDucasse 3/31/2015 10:07'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfCocoon class methodsFor: 'loading' stamp: 'StephaneDucasse 3/31/2015 10:07'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfCocoon class methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 10:07'!project	^self new project! !!ConfigurationOfCocoon class methodsFor: 'development support' stamp: 'StephaneDucasse 3/31/2015 10:07'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfCocoon methodsFor: 'baselines' stamp: 'StephaneDucasse 3/31/2015 10:09'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/PharoExtras/Cocoon/main/'.		spec project: 'Ston' with: [				spec					className: #ConfigurationOfSton;					versionString: #'stable';					repository: 'http://smalltalkhub.com/mc/SvenVanCaekenberghe/STON/main/' ].		spec package: 'Cocoon-Core' with: [				spec requires: #('Ston' ). ]. ].! !!ConfigurationOfCocoon methodsFor: 'baselines' stamp: 'CyrilFerlicot 3/31/2015 16:51'!baseline02: spec	<version: '0.2-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/PharoExtras/Cocoon/main/'.		spec project: 'Ston' with: [				spec					className: #ConfigurationOfSton;					versionString: #'stable';					repository: 'http://smalltalkhub.com/mc/SvenVanCaekenberghe/STON/main/' ].		spec 			package: 'Cocoon-Core' with: [				spec requires: #('Ston' ). ];			package: #'Cocoon-Test-Core'. ].! !!ConfigurationOfCocoon methodsFor: 'baselines' stamp: 'CyrilFerlicot 3/31/2015 17:59'!baseline03: spec	<version: '0.3-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://smalltalkhub.com/mc/PharoExtras/Cocoon/main/'.		spec project: 'Ston' with: [				spec					className: #ConfigurationOfSton;					versionString: #'stable';					repository: 'http://smalltalkhub.com/mc/SvenVanCaekenberghe/STON/main/' ].		spec 			package: 'Cocoon-Core' with: [				spec requires: #('Ston' ). ];			package: #'Cocoon-Tests-Core'. ].! !!ConfigurationOfCocoon methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 10:07'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfCocoon methodsFor: 'symbolic versions' stamp: 'CyrilFerlicot 4/2/2015 17:00'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '0.3-baseline'.! !!ConfigurationOfCocoon methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 10:07'!project	^ project ifNil: [ 		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		project := MetacelloMCProject new projectAttributes: self customProjectAttributes. 		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfCocoon methodsFor: 'symbolic versions' stamp: 'CyrilFerlicot 4/21/2015 16:51'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '1.12'.! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'StephaneDucasse 3/31/2015 10:31'!version10: spec	<version: '1.0' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.0'.		spec author: 'StephaneDucasse'.		spec timestamp: '3/31/2015 10:31'.		spec project: 'Ston' with: '0.10'.		spec package: 'Cocoon-Core' with: 'Cocoon-Core-StephaneDucasse.2'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/10/2015 14:10'!version110: spec	<version: '1.10' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.10'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/10/2015 14:10'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.9';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.11'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/16/2015 13:14'!version111: spec	<version: '1.11' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.11'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/16/2015 13:14'.		spec project: 'Ston' with: '0.12'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.11';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.12'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/21/2015 16:51'!version112: spec	<version: '1.12' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.12'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/21/2015 16:51'.		spec project: 'Ston' with: '0.12'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.12';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.13'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'StephaneDucasse 3/31/2015 10:32'!version11: spec	<version: '1.1' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.1'.		spec author: 'StephaneDucasse'.		spec timestamp: '3/31/2015 10:32'.		spec project: 'Ston' with: '0.10'.		spec package: 'Cocoon-Core' with: 'Cocoon-Core-StephaneDucasse.3'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 3/31/2015 16:52'!version12: spec	<version: '1.2' imports: #('0.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.2'.		spec author: 'CyrilFerlicot'.		spec timestamp: '3/31/2015 16:52'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.5';			package: #'Cocoon-Test-Core' with: 'Cocoon-Test-Core-CyrilFerlicot.1'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 3/31/2015 17:59'!version13: spec	<version: '1.3' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.3'.		spec author: 'CyrilFerlicot'.		spec timestamp: '3/31/2015 17:59'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.5';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.2'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 3/31/2015 18:11'!version14: spec	<version: '1.4' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.4'.		spec author: 'CyrilFerlicot'.		spec timestamp: '3/31/2015 18:11'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.5';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.3'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/1/2015 11:14'!version15: spec	<version: '1.5' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.5'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/1/2015 11:14'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.6';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.4'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/1/2015 17:38'!version16: spec	<version: '1.6' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.6'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/1/2015 17:38'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.8';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.7'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/1/2015 17:54'!version17: spec	<version: '1.7' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.7'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/1/2015 17:54'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.8';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.8'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/2/2015 10:29'!version18: spec	<version: '1.8' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.8'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/2/2015 10:29'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.8';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.8'. ].! !!ConfigurationOfCocoon methodsFor: 'versions' stamp: 'CyrilFerlicot 4/2/2015 17:00'!version19: spec	<version: '1.9' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'stable'.		spec description: 'version 1.9'.		spec author: 'CyrilFerlicot'.		spec timestamp: '4/2/2015 17:00'.		spec project: 'Ston' with: '0.10'.		spec 			package: 'Cocoon-Core' with: 'Cocoon-Core-CyrilFerlicot.9';			package: #'Cocoon-Tests-Core' with: 'Cocoon-Tests-Core-CyrilFerlicot.9'. ].! !"ConfigurationOfCocoon"!!ConfigurationOfGrease commentStamp: 'StephaneDucasse 10/18/2011 14:07' prior: 0!(ConfigurationOfGrease project version: #stable) load(ConfigurationOfGrease project version: #development) load!!ConfigurationOfGrease commentStamp: 'StephaneDucasse 10/18/2011 14:07' prior: 34029586!(ConfigurationOfGrease project version: #stable) load(ConfigurationOfGrease project version: #development) load!!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 12/06/2010 13:20'!DevelopmentProcess"DEVELOPMENT Process	- load current version:	  	(self project version: #stable) load: 'ALL'.	- open new version for development:		self createNewDevelopmentVersion	- update the the development version to match mcz file versions		self updateToLatestPackageVersions: '- fixed bug uvw'	- do development and periodically save mcz files and update configuration		self saveModifiedPackages: '- fixed bug xyz'	- do development and periodically save mcz files and configuration until ready for release		self saveModifiedPackagesAndConfiguration: '- fixed bug xyz'	- save configuration		self saveConfiguration: commitMessage '- checkpoint configuration'RELEASE Process	- mark development version as release:		self releaseDevelopmentVersion: 'commit comment'	- copy configuration for general access for Squeak and Pharo:		self copyToSqueakSource.	- copy configuration for general access for GLASS (Dale is willing to test and release for GLASS):		self copyToGemSource."! !!ConfigurationOfGrease class methodsFor: 'private' stamp: 'dkh 11/12/2009 09:11'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 1/14/2011 11:50'!compareVersions	"Compare the current #stable version to current #development version"	"self compareVersions"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	((Smalltalk at: #MetacelloToolBox) compareVersionsIn: self) inspect! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'JohanBrichau 6/15/2014 22:24'!copyToGemSource	"Copy the current configuration mcz file to http://seaside.gemstone.com/ss/MetacelloRepository"	"Note you before copying config to GemSource, you should have tested the release in GLASS.	 You also need to have commit rights to the GemSource repository."	"self copyToGemSource"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) copyConfiguration: self to: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository'! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 12/06/2010 13:19'!copyToSqueakSource	"Copy the current configuration mcz file to http://www.squeaksource.com/MetacelloRepository"	"self copyToSqueakSource"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) copyConfiguration: self to: 'http://www.squeaksource.com/MetacelloRepository'! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 1/11/2011 15:02'!createNewBaselineVersion	"Create a new baseline version based upon #stable version's baseline.	 A new baseline should be created if new packages have been added or package dependencies have changed."	"self createNewDevelopmentVersion"		"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) createNewBaselineVersionIn: self description: ''! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 1/11/2011 15:01'!createNewDevelopmentVersion	"Create a new development version using the #stable version as model."	"self createNewDevelopmentVersion"		"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) createNewDevelopmentVersionIn: self description: ''! !!ConfigurationOfGrease class methodsFor: 'private' stamp: 'DaleHenrichs 06/22/2010 09:39'!ensureMetacello	"Bootstrap Gofer (if necessary), load latest mcz file for ConfigurationOfMetacello (using old 	 Gofer API), then load the latest version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [ | error |		"list of repositories to try, in case primary repository is not accessible"		(Array 			with: 'http://www.squeaksource.com/MetacelloRepository' 			with: 'http://seaside.gemstone.com/ss/metacello') do: [:repositoryUrl |				([					Smalltalk at: #Gofer ifAbsent: [						"Current version of Gofer from which to bootstrap - as of 1.0-beta.21"						self bootstrapPackage: 'Gofer-Core-lr.115' from: repositoryUrl ].					Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |						gofer := goferClass new							url: repositoryUrl;							yourself.						[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].						gofer load ]]							on: Error							do: [ :ex |								error := ex.								Transcript 									cr; 									show: 'failed ensureMetacello: ';									show: ex description printString;									show: '...retrying'.								"try again"								ex return: nil ]) ~~ nil					ifTrue: [						"load 'default' group of Metacello"						(Smalltalk at: #ConfigurationOfMetacello) perform: #load.						^self ]].		"shouldn't get here unless the load failed ... throw an error"		self error: 'retry with alternate repository failed: ', error description printString ]! !!ConfigurationOfGrease class methodsFor: 'metacello tool support' stamp: 'dkh 11/12/2009 09:11'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfGrease class methodsFor: 'metacello tool support' stamp: 'dkh 11/13/2009 16:33'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfGrease class methodsFor: 'loading' stamp: 'dkh 11/12/2009 09:11'!loadLatestVersion	"self loadLatestVersion"		^self project latestVersion load! !!ConfigurationOfGrease class methodsFor: 'metacello tool support' stamp: 'dkh 11/13/2009 16:33'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfGrease class methodsFor: 'accessing' stamp: 'dkh 11/12/2009 09:11'!project	^self new project! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 1/11/2011 15:05'!releaseDevelopmentVersion: commitMessage	"Release #development version (set version blessing to #release), update the #development and #stable symbolic versions and save the configuration."	"self releaseDevelopmentVersion: '- release version 1.0.2'"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) releaseDevelopmentVersionIn: self description: commitMessage! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 12/06/2010 11:29'!saveConfiguration: commitMessage	"Save the configuration."	"self saveConfiguration: '- fixed bug'"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) saveConfigurationPackageFor: self name asString description: commitMessage! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 12/06/2010 11:31'!saveModifiedPackages: commitMessage	"Save modified mcz files and update the configuration."	"self saveModifiedPackages: '- fixed bug'"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) saveModifiedPackagesIn: self description:  commitMessage! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 12/06/2010 11:34'!saveModifiedPackagesAndConfiguration: commitMessage	"Save modified mcz files, update and then save the configuration."	"self saveModifiedPackagesAndConfiguration: '- fixed bug'"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	(Smalltalk at: #MetacelloToolBox) saveModifiedPackagesAndConfigurationIn: self description: commitMessage! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 2/11/2011 13:41'!updateToLatestPackageVersions: descriptionString	"Updates mcz file versions in current version"	"self updateToLatestPackageVersions: '- latest mcz files for 1.0.4'"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	((Smalltalk at: #MetacelloToolBox) updateToLatestPackageVersionsIn: self description: descriptionString) isEmpty		ifTrue: [ self inform: 'All specs up to date' ]! !!ConfigurationOfGrease class methodsFor: 'development support' stamp: 'DaleHenrichs 12/06/2010 11:57'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."		"self validate"	"Note: you need 1.0-beta.28 or later for the class MetacelloToolBox"	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 11/17/2010 13:13'!baseline1011: spec	<version: '1.0.1.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: ''.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec 			package: 'Grease-Core';			package: 'Grease-Tests-Core' with: [				spec requires: #('Grease-Core' ). ].		spec 			group: 'Core' with: #('Grease-Core' );			group: 'Core Tests' with: #('Grease-Tests-Core' );			group: 'Slime' with: #('Core' );			group: 'Slime Tests' with: #('Core Tests' );			group: 'Tests' with: #('Core Tests' 'Slime Tests' );			group: 'default' with: #('Slime' ).].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Core' with: [				spec includes: #('Grease-Pharo-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' with: [				spec requires: #('Grease-Core' ). ];			package: 'Grease-Tests-Pharo-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.4';					loads: #('Refactoring-Core' );					repository: 'http://www.squeaksource.com/MetacelloRepository' ].		spec 			package: 'Grease-Slime' with: [				spec requires: #('Refactoring-Core' 'Grease-Core' ). ];			package: 'Grease-Tests-Slime' with: [				spec requires: #('Grease-Slime' ). ].		spec 			group: 'Slime' with: #('Grease-Slime' );			group: 'Slime Tests' with: #('Grease-Tests-Slime' ).].	spec for: #'GreaseForPharo1.0' do: [		spec 			package: 'Grease-Pharo-Core' with: [				spec includes: #('Grease-Pharo10-Core' ). ];			package: 'Grease-Pharo10-Core'.].	spec for: #'gemstone' do: [		spec repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: '0.241';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.237';					loads: #('Utf8Encoding' );					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [				spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail' copyFrom: 'UTF8' with: [				spec loads: #('SMTPMail' ) ].		spec 			package: 'Grease-Core' with: [				spec includes: #('Grease-GemStone-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' with: [				spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ). ];			package: 'Grease-Tests-GemStone-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone230-Core' ). ];			package: 'Grease-GemStone230-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone240-Core' ). ];			package: 'Grease-GemStone240-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone300-Core' ). ];			package: 'Grease-GemStone300-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 11/10/2010 10:22'!baseline101: spec 	<version: '1.0.1-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' 				with: [ spec requires: #('Grease-Core' ). ];			yourself.		spec			group: 'Core' with: #('Grease-Core');			group: 'Core Tests' with: #('Grease-Tests-Core');			group: 'Slime' with: #('Core');			group: 'Slime Tests' with: #('Core Tests');			group: 'Tests' with: #('Core Tests' 'Slime Tests');			group: 'default' with: #('Slime');			yourself. ].	spec for: #squeakCommon do: [		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-Pharo-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' 				with: [ spec requires: #('Grease-Core' ) ];			package: 'Grease-Tests-Pharo-Core' 				with: [ spec requires: #('Grease-Tests-Core') ];								yourself. ].	spec for: #pharo do: [		spec			project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.4';					loads: #('Refactoring-Core' );					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Grease-Slime' 				with: [ spec requires: #('Refactoring-Core' 'Grease-Core' ) ];			package: 'Grease-Tests-Slime' 				with: [ spec requires: #('Grease-Slime') ];								yourself.		spec			group: 'Slime' with: #('Grease-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime');			yourself. ].	spec for: #'GreaseForPharo1.0' do: [		spec			package: 'Grease-Pharo-Core'				with: [ spec includes: #('Grease-Pharo10-Core' ) ];			package: 'Grease-Pharo10-Core';			yourself.].	spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: '0.239.2-baseline';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.237-baseline';					loads: #('Utf8Encoding' );					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures'				copyFrom: 'UTF8'				with: [ spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail'				copyFrom: 'UTF8'				with: [ spec loads: #('SMTPMail' ) ];						yourself.		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-GemStone-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ) ];			package: 'Grease-Tests-GemStone-Core' 				with: [ spec requires: #('Grease-Tests-Core' ) ];			yourself. ].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone230-Core' ) ];			package: 'Grease-GemStone230-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone240-Core' ) ];			package: 'Grease-GemStone240-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone300-Core' ) ];			package: 'Grease-GemStone300-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'pmm 11/21/2010 12:33'!baseline102: spec	<version: '1.0.2-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: ''.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec 			package: 'Grease-Core';			package: 'Grease-Tests-Core' with: [				spec requires: #('Grease-Core' ). ].		spec 			group: 'Core' with: #('Grease-Core' );			group: 'Core Tests' with: #('Grease-Tests-Core' );			group: 'Slime' with: #('Core' );			group: 'Slime Tests' with: #('Core Tests' );			group: 'Tests' with: #('Core Tests' 'Slime Tests' );			group: 'default' with: #('Slime' ).].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Core' with: [				spec includes: #('Grease-Pharo-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' with: [				spec requires: #('Grease-Core' ). ];			package: 'Grease-Tests-Pharo-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.4';					loads: #('Refactoring-Core' );					repository: 'http://www.squeaksource.com/MetacelloRepository' ].		spec 			package: 'Grease-Slime' with: [				spec requires: #('Refactoring-Core' 'Grease-Core' ). ];			package: 'Grease-Tests-Slime' with: [				spec requires: #('Grease-Slime' ). ].		spec 			group: 'Slime' with: #('Grease-Slime' );			group: 'Slime Tests' with: #('Grease-Tests-Slime' ).].	spec for: #'GreaseForPharo1.0' do: [		spec 			package: 'Grease-Pharo-Core' with: [				spec includes: #('Grease-Pharo10-Core' ). ];			package: 'Grease-Pharo10-Core'.].	spec for: #'gemstone' do: [		spec repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: '0.241';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.237';					loads: #('Utf8Encoding' );					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [				spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail' copyFrom: 'UTF8' with: [				spec loads: #('SMTPMail' ) ].		spec 			package: 'Grease-Core' with: [				spec includes: #('Grease-GemStone-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' with: [				spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ). ];			package: 'Grease-Tests-GemStone-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone230-Core' ). ];			package: 'Grease-GemStone230-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone240-Core' ). ];			package: 'Grease-GemStone240-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone300-Core' ). ];			package: 'Grease-GemStone300-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 02/01/2011 11:41'!baseline103: spec	<version: '1.0.3-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: ''.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec 			package: 'Grease-Core';			package: 'Grease-Tests-Core' with: [				spec requires: #('Grease-Core' ). ].		spec 			group: 'Core' with: #('Grease-Core' );			group: 'Core Tests' with: #('Grease-Tests-Core' );			group: 'Slime' with: #('Core' );			group: 'Slime Tests' with: #('Core Tests' );			group: 'Tests' with: #('Core Tests' 'Slime Tests' );			group: 'default' with: #('Slime' ).].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Core' with: [				spec includes: #('Grease-Pharo-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' with: [				spec requires: #('Grease-Core' ). ];			package: 'Grease-Tests-Pharo-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.4';					loads: #('Refactoring-Core' );					repository: 'http://www.squeaksource.com/MetacelloRepository' ].		spec 			package: 'Grease-Slime' with: [				spec requires: #('Refactoring-Core' 'Grease-Core' ). ];			package: 'Grease-Tests-Slime' with: [				spec requires: #('Grease-Slime' ). ].		spec 			group: 'Slime' with: #('Grease-Slime' );			group: 'Slime Tests' with: #('Grease-Tests-Slime' ).].	spec for: #'GreaseForPharo1.0' do: [		spec 			package: 'Grease-Pharo-Core' with: [				spec includes: #('Grease-Pharo10-Core' ). ];			package: 'Grease-Pharo10-Core'.].	spec for: #'gemstone' do: [		spec repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: '0.241';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.237';					loads: #('Utf8Encoding' );					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [				spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail' copyFrom: 'UTF8' with: [				spec loads: #('SMTPMail' ) ].		spec 			package: 'Grease-Core' with: [				spec 					requires: #('GsCore' );					includes: #('Grease-GemStone-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' with: [				spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ). ];			package: 'Grease-Tests-GemStone-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone230-Core' ). ];			package: 'Grease-GemStone230-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone240-Core' ). ];			package: 'Grease-GemStone240-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone300-Core' ). ];			package: 'Grease-GemStone300-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 2/10/2011 11:22'!baseline104: spec	<version: '1.0.4-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: ''.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec 			package: 'Grease-Core';			package: 'Grease-Tests-Core' with: [				spec requires: #('Grease-Core' ). ].		spec 			group: 'Core' with: #('Grease-Core' );			group: 'Core Tests' with: #('Grease-Tests-Core' );			group: 'Slime' with: #('Core' );			group: 'Slime Tests' with: #('Core Tests' );			group: 'Tests' with: #('Core Tests' 'Slime Tests' );			group: 'default' with: #('Slime' ).].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Core' with: [				spec includes: #('Grease-Pharo-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' with: [				spec requires: #('Grease-Core' ). ];			package: 'Grease-Tests-Pharo-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: #'stable';					loads: #('Core' );					repository: 'http://www.squeaksource.com/MetacelloRepository' ].		spec 			package: 'Grease-Slime' with: [				spec requires: #('Refactoring-Core' 'Grease-Core' ). ];			package: 'Grease-Tests-Slime' with: [				spec requires: #('Grease-Slime' ). ].		spec 			group: 'Slime' with: #('Grease-Slime' );			group: 'Slime Tests' with: #('Grease-Tests-Slime' ).].	spec for: #'GreaseForPharo1.0' do: [		spec 			package: 'Grease-Pharo-Core' with: [				spec includes: #('Grease-Pharo10-Core' ). ];			package: 'Grease-Pharo10-Core'.].	spec for: #'gemstone' do: [		spec repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: #'stable';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: #'stable';					loads: #('Utf8Encoding' );					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [				spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail' copyFrom: 'UTF8' with: [				spec loads: #('SMTPMail' ) ].		spec 			package: 'Grease-Core' with: [				spec 					requires: #('GsCore' );					includes: #('Grease-GemStone-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' with: [				spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ). ];			package: 'Grease-Tests-GemStone-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone230-Core' ). ];			package: 'Grease-GemStone230-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone240-Core' ). ];			package: 'Grease-GemStone240-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone300-Core' ). ];			package: 'Grease-GemStone300-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'dkh 10/14/2011 17:01'!baseline1061: spec	<version: '1.0.6.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec description: ''.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec 			package: 'Grease-Core';			package: 'Grease-Tests-Core' with: [				spec requires: #('Grease-Core' ). ].		spec 			group: 'Core' with: #('Grease-Core' );			group: 'Core Tests' with: #('Grease-Tests-Core' );			group: 'Slime' with: #('Core' );			group: 'Slime Tests' with: #('Core Tests' );			group: 'Tests' with: #('Core Tests' 'Slime Tests' );			group: 'default' with: #('Slime' ).].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Core' with: [				spec includes: #('Grease-Pharo-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' with: [				spec requires: #('Grease-Core' ). ];			package: 'Grease-Tests-Pharo-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: #'stable';					loads: #('Core' );					repository: 'http://www.squeaksource.com/MetacelloRepository' ].		spec 			package: 'Grease-Slime' with: [				spec requires: #('Refactoring-Core' 'Grease-Core' ). ];			package: 'Grease-Tests-Slime' with: [				spec requires: #('Grease-Slime' ). ].		spec 			group: 'Slime' with: #('Grease-Slime' );			group: 'Slime Tests' with: #('Grease-Tests-Slime' ).].	spec for: #'GreaseForPharo1.0' do: [		spec 			package: 'Grease-Pharo-Core' with: [				spec includes: #('Grease-Pharo10-Core' ). ];			package: 'Grease-Pharo10-Core'.].	spec for: #'gemstone' do: [		spec repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: #'stable';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: #'stable';					loads: #('Utf8Encoding' );					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [				spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail' copyFrom: 'UTF8' with: [				spec loads: #('SMTPMail' ) ].		spec 			package: 'Grease-Core' with: [				spec 					requires: #('GsCore' );					includes: #('Grease-GemStone-Core' ). ];			package: 'Grease-Tests-Core' with: [				spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' with: [				spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ). ];			package: 'Grease-Tests-GemStone-Core' with: [				spec requires: #('Grease-Tests-Core' ). ].].	spec for: #'gs2.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone200-Core' ). ];			package: 'Grease-GemStone200-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone230-Core' ). ];			package: 'Grease-GemStone230-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone240-Core' ). ];			package: 'Grease-GemStone240-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' with: [				spec includes: #('Grease-GemStone300-Core' ). ];			package: 'Grease-GemStone300-Core' with: [				spec requires: #('Grease-GemStone-Core' ). ].].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'dkh 06/15/2014 13:56'!baseline1071: spec  <version: '1.0.7.1-baseline'>  spec    for: #'common'    do: [       spec blessing: #'baseline'.      spec description: ''.      spec repository: 'http://www.squeaksource.com/Seaside30'.      spec        package: 'Grease-Core';        package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].      spec        group: 'Core' with: #('Grease-Core');        group: 'Core Tests' with: #('Grease-Tests-Core');        group: 'Slime' with: #('Core');        group: 'Slime Tests' with: #('Core Tests');        group: 'Tests' with: #('Core Tests' 'Slime Tests');        group: 'default' with: #('Slime') ].  spec    for: #'squeakCommon'    do: [       spec        package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo-Core') ];        package: 'Grease-Tests-Core'          with: [ spec includes: #('Grease-Tests-Pharo-Core') ];        package: 'Grease-Pharo-Core' with: [ spec requires: #('Grease-Core') ];        package: 'Grease-Tests-Pharo-Core'          with: [ spec requires: #('Grease-Tests-Core') ] ].  spec    for: #'pharo1.x'    do: [       spec        project: 'Refactoring-Core'        with: [           spec            className: 'ConfigurationOfRefactoringBrowser';            versionString: #'stable';            loads: #('Core');            repository: 'http://www.squeaksource.com/MetacelloRepository' ].      spec        package: 'Grease-Slime'          with: [ spec requires: #('Refactoring-Core' 'Grease-Core') ];        package: 'Grease-Tests-Slime'          with: [ spec requires: #('Grease-Slime') ].      spec        group: 'Slime' with: #('Grease-Slime');        group: 'Slime Tests' with: #('Grease-Tests-Slime') ].  spec    for: #'pharo1.x'    do: [       spec        package: 'Grease-Pharo-Core'          with: [ spec includes: #('Grease-Pharo13-Core') ];        package: 'Grease-Pharo13-Core' ].  spec    for: #'squeak'    do: [       spec        package: 'Grease-Pharo-Core'          with: [ spec includes: #('Grease-Pharo13-Core') ];        package: 'Grease-Pharo13-Core' ].  spec    for: #'GreaseForPharo1.0'    do: [       spec        package: 'Grease-Pharo-Core'          with: [ spec includes: #('Grease-Pharo10-Core') ];        package: 'Grease-Pharo10-Core' ].  spec    for: #'gemstone'    do: [       spec repository: 'http://seaside.gemtalksystems.com/ss/Seaside30'.      spec        project: 'GsCore'          with: [               spec                className: 'ConfigurationOfGsCore';                versionString: #'stable';                repository:                    'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];        project: 'UTF8'          with: [               spec                className: 'ConfigurationOfGsMisc';                versionString: #'stable';                loads: #('Utf8Encoding');                repository:                    'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];        project: 'System-Digital-Signatures'          copyFrom: 'UTF8'          with: [ spec loads: #('System-Digital-Signatures') ];        project: 'SMTPMail'          copyFrom: 'UTF8'          with: [ spec loads: #('SMTPMail') ].      spec        package: 'Grease-Core'          with: [               spec                requires: #('GsCore');                includes: #('Grease-GemStone-Core') ];        package: 'Grease-Tests-Core'          with: [ spec includes: #('Grease-Tests-GemStone-Core') ];        package: 'Grease-GemStone-Core'          with: [               spec                requires:                  #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];        package: 'Grease-Tests-GemStone-Core'          with: [ spec requires: #('Grease-Tests-Core') ] ].  spec    for: #'gs2.x'    do: [       spec        package: 'Grease-GemStone-Core'          with: [ spec includes: #('Grease-GemStone200-Core') ];        package: 'Grease-GemStone200-Core'          with: [ spec requires: #('Grease-GemStone-Core') ] ].  spec    for: #'gs2.3.x'    do: [       spec        package: 'Grease-GemStone-Core'          with: [ spec includes: #('Grease-GemStone230-Core') ];        package: 'Grease-GemStone230-Core'          with: [ spec requires: #('Grease-GemStone-Core') ] ].  spec    for: #'gs2.4.x'    do: [       spec        package: 'Grease-GemStone-Core'          with: [ spec includes: #('Grease-GemStone240-Core') ];        package: 'Grease-GemStone240-Core'          with: [ spec requires: #('Grease-GemStone-Core') ] ].  spec    for: #'gs3.x'    do: [       spec        package: 'Grease-GemStone-Core'          with: [ spec includes: #('Grease-GemStone300-Core') ];        package: 'Grease-GemStone300-Core'          with: [ spec requires: #('Grease-GemStone-Core') ] ]! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'JohanBrichau 6/15/2014 20:58'!baseline108: spec	<version: '1.0.8-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec description: ''.			spec repository: 'http://www.smalltalkhub.com/mc/Seaside/Grease10/main'.			spec				package: 'Grease-Core';				package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].			spec				group: 'Core' with: #('Grease-Core');				group: 'Core Tests' with: #('Grease-Tests-Core');				group: 'Slime' with: #('Core');				group: 'Slime Tests' with: #('Core Tests');				group: 'Tests' with: #('Core Tests' 'Slime Tests');				group: 'default' with: #('Slime') ].	"use Grease-Pharo-Core for Squeak and Pharo 1.x"	spec		for: #squeak		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec.			spec				package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo13-Core') ];				package: 'Grease-Pharo13-Core' ].	spec		for: #'pharo1.x'		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec.			spec				package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo13-Core') ];				package: 'Grease-Pharo13-Core' ].	spec for: #'pharo2.x' do: [ self slimeForSqueakPharo1xPharo2x: spec ].	"use Grease-Pharo20-Core for Pharo 2 and 3"	spec		for: #(#'pharo2.x' #'pharo3.x')		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo-Core') ];				package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	"don't load RB/Slime into Pharo 3"	spec		for: #'GreaseForPharo1.0'		do: [ 			spec				package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo10-Core') ];				package: 'Grease-Pharo10-Core' ].	spec		for: #gemstone		do: [ 			spec repository: 'http://seaside.gemtalksystems.com/ss/Seaside30'.			spec				project: 'GsCore'					with: [ 							spec								className: 'ConfigurationOfGsCore';								versionString: #stable;								repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];				project: 'UTF8'					with: [ 							spec								className: 'ConfigurationOfGsMisc';								versionString: #stable;								loads: #('Utf8Encoding');								repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];				project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [ spec loads: #('System-Digital-Signatures') ];				project: 'SMTPMail' copyFrom: 'UTF8' with: [ spec loads: #('SMTPMail') ].			spec				package: 'Grease-Core'					with: [ 							spec								requires: #('GsCore');								includes: #('Grease-GemStone-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-GemStone-Core') ];				package: 'Grease-GemStone-Core'					with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];				package: 'Grease-Tests-GemStone-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	spec		for: #'gs2.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone200-Core') ];				package: 'Grease-GemStone200-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone230-Core') ];				package: 'Grease-GemStone230-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.4.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone240-Core') ];				package: 'Grease-GemStone240-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone300-Core') ];				package: 'Grease-GemStone300-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ]! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'StephanEggermont 6/25/2014 10:19'!baseline109: spec	<version: '1.0.9-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec description: ''.			spec repository: 'http://www.smalltalkhub.com/mc/Seaside/Grease10/main'.			spec				package: 'Grease-Core';				package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].			spec				group: 'Core' with: #('Grease-Core');				group: 'Core Tests' with: #('Grease-Tests-Core');				group: 'Slime' with: #('Core');				group: 'Slime Tests' with: #('Core Tests');				group: 'Tests' with: #('Core Tests' 'Slime Tests');				group: 'default' with: #('Slime') ].	"use Grease-Pharo-Core for Squeak and Pharo 1.x"	spec		for: #squeak		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec.			spec				package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo13-Core') ];				package: 'Grease-Pharo13-Core' ].	spec		for: #'pharo1.x'		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec.			spec				package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo13-Core') ];				package: 'Grease-Pharo13-Core' ].	spec		for: #(#'pharo2.x' #'pharo3.x' #'pharo4.x')		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo-Core') ];				package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo-Core' with: [ spec requires: #('Grease-Tests-Core') ].							spec				package: 'Grease-Slime' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Slime') ].			spec				group: 'Slime' with: #('Grease-Slime');				group: 'Slime Tests' with: #('Grease-Tests-Slime') 	].	spec		for: #'GreaseForPharo1.0'		do: [ 			spec				package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo10-Core') ];				package: 'Grease-Pharo10-Core' ].	spec		for: #gemstone		do: [ 			spec repository: 'http://seaside.gemtalksystems.com/ss/Seaside30'.			spec				project: 'GsCore'					with: [ 							spec								className: 'ConfigurationOfGsCore';								versionString: #stable;								repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];				project: 'UTF8'					with: [ 							spec								className: 'ConfigurationOfGsMisc';								versionString: #stable;								loads: #('Utf8Encoding');								repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];				project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [ spec loads: #('System-Digital-Signatures') ];				project: 'SMTPMail' copyFrom: 'UTF8' with: [ spec loads: #('SMTPMail') ].			spec				package: 'Grease-Core'					with: [ 							spec								requires: #('GsCore');								includes: #('Grease-GemStone-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-GemStone-Core') ];				package: 'Grease-GemStone-Core'					with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];				package: 'Grease-Tests-GemStone-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	spec		for: #'gs2.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone200-Core') ];				package: 'Grease-GemStone200-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone230-Core') ];				package: 'Grease-GemStone230-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.4.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone240-Core') ];				package: 'Grease-GemStone240-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone300-Core') ];				package: 'Grease-GemStone300-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ]! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 10/9/2010 11:40'!baseline10: spec 	<version: '1.0-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' 				with: [ spec requires: #('Grease-Core' ). ];			yourself.		spec			group: 'Core' with: #('Grease-Core');			group: 'Core Tests' with: #('Grease-Tests-Core');			group: 'Slime' with: #('Core');			group: 'Slime Tests' with: #('Core Tests');			group: 'Tests' with: #('Core Tests' 'Slime Tests');			group: 'default' with: #('Slime');			yourself. ].	spec for: #squeakCommon do: [		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-Pharo-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' 				with: [ spec requires: #('Grease-Core' ) ];			package: 'Grease-Tests-Pharo-Core' 				with: [ spec requires: #('Grease-Tests-Core') ];								yourself. ].	spec for: #pharo do: [		spec			project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.2-baseline';					loads: #('Refactoring-Core' );					file: 'ConfigurationOfRefactoringBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Grease-Slime' 				with: [ spec requires: #('Refactoring-Core' 'Grease-Core' ) ];			package: 'Grease-Tests-Slime' 				with: [ spec requires: #('Grease-Slime') ];								yourself.		spec			group: 'Slime' with: #('Grease-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime');			yourself. ].	spec for: #'GreaseForPharo1.0' do: [		spec			package: 'Grease-Pharo-Core'				with: [ spec includes: #('Grease-Pharo10-Core' ) ];			package: 'Grease-Pharo10-Core';			yourself.].	spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: '0.239-baseline';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.236-baseline';					loads: #('Utf8Encoding' );					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures'				copyFrom: 'UTF8'				with: [ spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail'				copyFrom: 'UTF8'				with: [ spec loads: #('SMTPMail' ) ];						yourself.		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-GemStone-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ) ];			package: 'Grease-Tests-GemStone-Core' 				with: [ spec requires: #('Grease-Tests-Core' ) ];			yourself. ].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone230-Core' ) ];			package: 'Grease-GemStone230-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone240-Core' ) ];			package: 'Grease-GemStone240-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone300-Core' ) ];			package: 'Grease-GemStone300-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'dkh 01/06/2010 11:33'!baseline10alpha1: spec 	<version: '1.0-alpha1-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' 				with: [ spec requires: #('Grease-Core' ). ];			yourself. ].	spec for: #squeakCommon do: [		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-Pharo-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' 				with: [ spec requires: #('Grease-Core' ) ];			package: 'Grease-Tests-Pharo-Core' 				with: [ spec requires: #('Grease-Tests-Core') ];								yourself. ].	spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.233';					loads: #('Utf8Encoding' );					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/GLASSproject' ];			project: 'System-Digital-Signatures'				copyFrom: 'UTF8'				with: [ spec loads: #('System-Digital-Signatures' ) ];			yourself.		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-GemStone-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('Grease-Core' 'System-Digital-Signatures' 'UTF8' ) ];			package: 'Grease-Tests-GemStone-Core' 				with: [ spec requires: #('Grease-Tests-Core' ) ];			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'dkh 11/23/2009 15:11'!baseline10alpha2: spec 	<version: '1.0-alpha2-baseline' imports: #('1.0-alpha1-baseline' )>	spec for: #gemstone do: [		spec			project: 'SMTPMail'				copyFrom: 'UTF8'				with: [ spec loads: #('SMTPMail' ) ];						yourself.		spec 			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('SMTPMail' ) ];			yourself. ].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone230-Core' ) ];			package: 'Grease-GemStone230-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'dkh 1/27/2010 15:45'!baseline10alpha5: spec 	<version: '1.0-alpha5-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' 				with: [ spec requires: #('Grease-Core' ). ];			yourself.		spec			group: 'default' with: #('Core');			group: 'Core' with: #('Grease-Core');			group: 'Tests' with: #('Grease-Tests-Core');			yourself. ].	spec for: #squeakCommon do: [		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-Pharo-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' 				with: [ spec requires: #('Grease-Core' ) ];			package: 'Grease-Tests-Pharo-Core' 				with: [ spec requires: #('Grease-Tests-Core') ];								yourself.		spec			group: 'Core' with: #('Grease-Pharo-Core');			group: 'Tests' with: #('Grease-Tests-Pharo-Core');			yourself. ].	spec for: #pharo do: [		spec			project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.1-baseline';					loads: #('Refactoring-Core' );					file: 'ConfigurationOfRefactoringBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Grease-Slime' 				with: [ spec requires: #('Refactoring-Core' 'Grease-Core' ) ];			package: 'Grease-Tests-Slime' 				with: [ spec requires: #('Grease-Slime') ];								yourself.		spec			group: 'Core' with: #('Grease-Slime');			group: 'Tests' with: #('Grease-Tests-Slime');			yourself. ].		spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.233';					loads: #('Utf8Encoding' );					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/GLASSproject' ];			project: 'System-Digital-Signatures'				copyFrom: 'UTF8'				with: [ spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail'				copyFrom: 'UTF8'				with: [ spec loads: #('SMTPMail' ) ];						yourself.		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-GemStone-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('Grease-Core' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ) ];			package: 'Grease-Tests-GemStone-Core' 				with: [ spec requires: #('Grease-Tests-Core' ) ];			yourself.		spec			group: 'Core' with: #('Grease-GemStone-Core');			group: 'Tests' with: #('Grease-Tests-GemStone-Core');			yourself. ].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone230-Core' ) ];			package: 'Grease-GemStone230-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself.		spec			group: 'Core' with: #('Grease-GemStone230-Core');			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 3/29/2010 11:12'!baseline10alpha7: spec 	<version: '1.0-alpha7-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' 				with: [ spec requires: #('Grease-Core' ). ];			yourself.		spec			group: 'default' with: #('Core');			group: 'Core' with: #('Grease-Core');			group: 'Tests' with: #('Grease-Tests-Core');			yourself. ].	spec for: #squeakCommon do: [		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-Pharo-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' 				with: [ spec requires: #('Grease-Core' ) ];			package: 'Grease-Tests-Pharo-Core' 				with: [ spec requires: #('Grease-Tests-Core') ];								yourself.		spec			group: 'Core' with: #('Grease-Pharo-Core');			group: 'Tests' with: #('Grease-Tests-Pharo-Core');			yourself. ].	spec for: #pharo do: [		spec			project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.2-baseline';					loads: #('Refactoring-Core' );					file: 'ConfigurationOfRefactoringBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Grease-Slime' 				with: [ spec requires: #('Refactoring-Core' 'Grease-Core' ) ];			package: 'Grease-Tests-Slime' 				with: [ spec requires: #('Grease-Slime') ];								yourself.		spec			group: 'Core' with: #('Grease-Slime');			group: 'Tests' with: #('Grease-Tests-Slime');			yourself. ].		spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.233';					loads: #('Utf8Encoding' );					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/GLASSproject' ];			project: 'System-Digital-Signatures'				copyFrom: 'UTF8'				with: [ spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail'				copyFrom: 'UTF8'				with: [ spec loads: #('SMTPMail' ) ];						yourself.		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-GemStone-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('Grease-Core' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ) ];			package: 'Grease-Tests-GemStone-Core' 				with: [ spec requires: #('Grease-Tests-Core' ) ];			yourself.		spec			group: 'Core' with: #('Grease-GemStone-Core');			group: 'Tests' with: #('Grease-Tests-GemStone-Core');			yourself. ].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone230-Core' ) ];			package: 'Grease-GemStone230-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself.		spec			group: 'Core' with: #('Grease-GemStone230-Core');			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 08/12/2010 10:09'!baseline10alpha93: spec 	<version: '1.0-alpha9.3-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' 				with: [ spec requires: #('Grease-Core' ). ];			yourself.		spec			group: 'Core' with: #('Grease-Core');			group: 'Core Tests' with: #('Grease-Tests-Core');			group: 'Slime' with: #('Core');			group: 'Slime Tests' with: #('Core Tests');			group: 'Tests' with: #('Core Tests' 'Slime Tests');			group: 'default' with: #('Slime');			yourself. ].	spec for: #squeakCommon do: [		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-Pharo-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' 				with: [ spec requires: #('Grease-Core' ) ];			package: 'Grease-Tests-Pharo-Core' 				with: [ spec requires: #('Grease-Tests-Core') ];								yourself. ].	spec for: #pharo do: [		spec			project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.2-baseline';					loads: #('Refactoring-Core' );					file: 'ConfigurationOfRefactoringBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Grease-Slime' 				with: [ spec requires: #('Refactoring-Core' 'Grease-Core' ) ];			package: 'Grease-Tests-Slime' 				with: [ spec requires: #('Grease-Slime') ];								yourself.		spec			group: 'Slime' with: #('Grease-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime');			yourself. ].		spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: '0.239-baseline';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.236-baseline';					loads: #('Utf8Encoding' );					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures'				copyFrom: 'UTF8'				with: [ spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail'				copyFrom: 'UTF8'				with: [ spec loads: #('SMTPMail' ) ];						yourself.		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-GemStone-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ) ];			package: 'Grease-Tests-GemStone-Core' 				with: [ spec requires: #('Grease-Tests-Core' ) ];			yourself. ].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone230-Core' ) ];			package: 'Grease-GemStone230-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'DaleHenrichs 08/12/2010 10:09'!baseline10rc: spec 	<version: '1.0-rc-baseline'>	spec for: #common do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/Seaside30'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' 				with: [ spec requires: #('Grease-Core' ). ];			yourself.		spec			group: 'Core' with: #('Grease-Core');			group: 'Core Tests' with: #('Grease-Tests-Core');			group: 'Slime' with: #('Core');			group: 'Slime Tests' with: #('Core Tests');			group: 'Tests' with: #('Core Tests' 'Slime Tests');			group: 'default' with: #('Slime');			yourself. ].	spec for: #squeakCommon do: [		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-Pharo-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-Pharo-Core' ). ];			package: 'Grease-Pharo-Core' 				with: [ spec requires: #('Grease-Core' ) ];			package: 'Grease-Tests-Pharo-Core' 				with: [ spec requires: #('Grease-Tests-Core') ];								yourself. ].	spec for: #pharo do: [		spec			project: 'Refactoring-Core' with: [				spec					className: 'ConfigurationOfRefactoringBrowser';					versionString: '1.2-baseline';					loads: #('Refactoring-Core' );					file: 'ConfigurationOfRefactoringBrowser';					repository: 'http://www.squeaksource.com/MetacelloRepository' ];			yourself.		spec			package: 'Grease-Slime' 				with: [ spec requires: #('Refactoring-Core' 'Grease-Core' ) ];			package: 'Grease-Tests-Slime' 				with: [ spec requires: #('Grease-Slime') ];								yourself.		spec			group: 'Slime' with: #('Grease-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime');			yourself. ].		spec for: #gemstone do: [		spec 			repository: 'http://seaside.gemstone.com/ss/Seaside30'.		spec 			project: 'GsCore' with: [				spec					className: 'ConfigurationOfGsCore';					versionString: '0.239-baseline';					file: 'ConfigurationOfGsCore';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'UTF8' with: [				spec					className: 'ConfigurationOfGsMisc';					versionString: '0.236-baseline';					loads: #('Utf8Encoding' );					file: 'ConfigurationOfGsMisc';					repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures'				copyFrom: 'UTF8'				with: [ spec loads: #('System-Digital-Signatures' ) ];			project: 'SMTPMail'				copyFrom: 'UTF8'				with: [ spec loads: #('SMTPMail' ) ];						yourself.		spec			package: 'Grease-Core' 				with: [ spec includes: #('Grease-GemStone-Core' ) ];			package: 'Grease-Tests-Core' 				with: [ spec includes: #('Grease-Tests-GemStone-Core' ). ];			package: 'Grease-GemStone-Core' 				with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail' ) ];			package: 'Grease-Tests-GemStone-Core' 				with: [ spec requires: #('Grease-Tests-Core' ) ];			yourself. ].	spec for: #'gs2.3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone230-Core' ) ];			package: 'Grease-GemStone230-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].	spec for: #'gs2.4.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone240-Core' ) ];			package: 'Grease-GemStone240-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].	spec for: #'gs3.x' do: [		spec 			package: 'Grease-GemStone-Core' 				with: [ spec includes: #('Grease-GemStone300-Core' ) ];			package: 'Grease-GemStone300-Core' 				with: [ spec requires: #('Grease-GemStone-Core' ) ];			yourself. ].! !!ConfigurationOfGrease methodsFor: 'baselines (1.1)' stamp: 'PaulDeBruicker 11/1/2013 06:52'!baseline110: spec	<version: '1.1.0-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec description: ''.			spec repository: 'http://www.smalltalkhub.com/mc/Seaside/Seaside31/main'.			spec				package: 'Grease-Core';				package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].			spec				group: 'Core' with: #('Grease-Core');				group: 'Core Tests' with: #('Grease-Tests-Core');				group: 'Slime' with: #('Core');				group: 'Slime Tests' with: #('Core Tests');				group: 'Tests' with: #('Core Tests' 'Slime Tests');				group: 'default' with: #('Slime') ].	spec		for: #squeak		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec ].	spec		for: #'pharo3.x'		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];				package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	spec		for: #'pharo2.x'		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];				package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core') ].			self slimeForSqueakPharo1xPharo2x: spec ].	spec		for: #'pharo1.x'		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec ].	spec for: #'pharo1.1' do: [ spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo11-Core') ] ].	spec		for: #'pharo1.0'		do: [ spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo10-Core' 'Grease-Pharo11-Core') ] ].	spec		for: #gemstone		do: [ 			spec repository: 'http://seaside.gemstone.com/ss/Seaside30'.			spec				project: 'GsCore'					with: [ 							spec								className: 'ConfigurationOfGsCore';								versionString: #stable;								repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];				project: 'UTF8'					with: [ 							spec								className: 'ConfigurationOfGsMisc';								versionString: #stable;								loads: #('Utf8Encoding');								repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];				project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [ spec loads: #('System-Digital-Signatures') ];				project: 'SMTPMail' copyFrom: 'UTF8' with: [ spec loads: #('SMTPMail') ].			spec				package: 'Grease-Core'					with: [ 							spec								requires: #('GsCore');								includes: #('Grease-GemStone-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-GemStone-Core') ];				package: 'Grease-GemStone-Core'					with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];				package: 'Grease-Tests-GemStone-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	spec		for: #'gs2.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone200-Core') ];				package: 'Grease-GemStone200-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone230-Core') ];				package: 'Grease-GemStone230-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.4.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone240-Core') ];				package: 'Grease-GemStone240-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone300-Core') ];				package: 'Grease-GemStone300-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ]! !!ConfigurationOfGrease methodsFor: 'baselines (1.1)' stamp: 'PaulDeBruicker 10/31/2013 18:11'!baseline113: spec	<version: '1.1.3-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec description: ''.			spec repository: 'http://www.smalltalkhub.com/mc/Seaside/Grease11/main'.			spec				package: 'Grease-Core';				package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].			spec				group: 'Core' with: #('Grease-Core');				group: 'Core Tests' with: #('Grease-Tests-Core');				group: 'Slime' with: #('Core');				group: 'Slime Tests' with: #('Core Tests');				group: 'Tests' with: #('Core Tests' 'Slime Tests');				group: 'default' with: #('Slime') ].	spec		for: #'pharo3.x'		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo30-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];				package: 'Grease-Pharo30-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	spec		for: #'pharo2.x'		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];				package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core') ].			self slimeForSqueakPharo1xPharo2x: spec ].	spec		for: #'pharo1.x'		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec ].	spec for: #'pharo1.1' do: [ spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo11-Core') ] ].	spec		for: #'pharo1.0'		do: [ spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo10-Core' 'Grease-Pharo11-Core') ] ].	spec		for: #squeak		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec ].	spec		for: #gemstone		do: [ 			spec repository: 'http://seaside.gemstone.com/ss/Seaside30'.			spec				project: 'GsCore'					with: [ 							spec								className: 'ConfigurationOfGsCore';								versionString: #stable;								repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];				project: 'UTF8'					with: [ 							spec								className: 'ConfigurationOfGsMisc';								versionString: #stable;								loads: #('Utf8Encoding');								repository: 'http://seaside.gemstone.com/ss/MetacelloRepository' ];				project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [ spec loads: #('System-Digital-Signatures') ];				project: 'SMTPMail' copyFrom: 'UTF8' with: [ spec loads: #('SMTPMail') ].			spec				package: 'Grease-Core'					with: [ 							spec								requires: #('GsCore');								includes: #('Grease-GemStone-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-GemStone-Core') ];				package: 'Grease-GemStone-Core'					with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];				package: 'Grease-Tests-GemStone-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	spec		for: #'gs2.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone200-Core') ];				package: 'Grease-GemStone200-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone230-Core') ];				package: 'Grease-GemStone230-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.4.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone240-Core') ];				package: 'Grease-GemStone240-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone300-Core') ];				package: 'Grease-GemStone300-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ]! !!ConfigurationOfGrease methodsFor: 'baselines (1.1)' stamp: 'JohanBrichau 6/15/2014 20:58'!baseline114: spec	<version: '1.1.4-baseline'>	spec		for: #common		do: [ 			spec blessing: #baseline.			spec repository: 'http://www.smalltalkhub.com/mc/Seaside/Grease11/main'.			spec				package: 'Grease-Core';				package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].			spec				group: 'Core' with: #('Grease-Core');				group: 'Core Tests' with: #('Grease-Tests-Core');				group: 'Slime' with: #('Core');				group: 'Slime Tests' with: #('Core Tests');				group: 'Tests' with: #('Core Tests' 'Slime Tests');				group: 'default' with: #('Slime') 	].				spec		for: #'pharo3.x'		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo30-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];				package: 'Grease-Pharo30-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core')];				package: 'Grease-Slime' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Slime') ].			spec				group: 'Slime' with: #('Grease-Slime');				group: 'Slime Tests' with: #('Grease-Tests-Slime').	].	spec		for: #'pharo4.x'		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo30-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];				package: 'Grease-Pharo30-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core')];				package: 'Grease-Slime' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Slime') ].			spec				group: 'Slime' with: #('Grease-Slime');				group: 'Slime Tests' with: #('Grease-Tests-Slime').	].	spec		for: #'pharo2.x'		do: [ 			spec				package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];				package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];				package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core') ].			self slimeForSqueakPharo1xPharo2x: spec ].	spec		for: #'pharo1.x'		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec ].	spec for: #'pharo1.1' do: [ spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo11-Core') ] ].	spec		for: #'pharo1.0'		do: [ spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo10-Core' 'Grease-Pharo11-Core') ] ].	spec		for: #squeak		do: [ 			self greaseCoreAndTestsForSqueakAndPharo1x: spec.			self slimeForSqueakPharo1xPharo2x: spec ].	spec		for: #gemstone		do: [ 			spec repository: 'http://seaside.gemtalksystems.com/ss/Seaside30'.			spec				project: 'GsCore'					with: [ 							spec								className: 'ConfigurationOfGsCore';								versionString: #stable;								repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];				project: 'UTF8'					with: [ 							spec								className: 'ConfigurationOfGsMisc';								versionString: #stable;								loads: #('Utf8Encoding');								repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];				project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [ spec loads: #('System-Digital-Signatures') ];				project: 'SMTPMail' copyFrom: 'UTF8' with: [ spec loads: #('SMTPMail') ].			spec				package: 'Grease-Core'					with: [ 							spec								requires: #('GsCore');								includes: #('Grease-GemStone-Core') ];				package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-GemStone-Core') ];				package: 'Grease-GemStone-Core'					with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];				package: 'Grease-Tests-GemStone-Core' with: [ spec requires: #('Grease-Tests-Core') ] ].	spec		for: #'gs2.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone200-Core') ];				package: 'Grease-GemStone200-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone230-Core') ];				package: 'Grease-GemStone230-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs2.4.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone240-Core') ];				package: 'Grease-GemStone240-Core' with: [ spec requires: #('Grease-GemStone-Core') ] ].	spec		for: #'gs3.x'		do: [ 			spec				package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone300-Core') ];				package: 'Grease-GemStone300-Core' with: [ spec requires: #('Grease-GemStone-Core') ] 	] ! !!ConfigurationOfGrease methodsFor: 'baselines (1.1)' stamp: 'JohanBrichau 11/8/2014 08:57'!baseline115: spec	<version: '1.1.5-baseline'>	spec for: #common do: [ 		spec blessing: #baseline.		spec repository: 'http://www.smalltalkhub.com/mc/Seaside/Grease11/main'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].		spec			group: 'Core' with: #('Grease-Core');			group: 'Core Tests' with: #('Grease-Tests-Core');			group: 'Slime' with: #('Core');			group: 'Slime Tests' with: #('Core Tests');			group: 'Tests' with: #('Core Tests' 'Slime Tests');			group: 'default' with: #('Slime') 	].	spec for: #squeak do: [ 		self greaseCoreAndTestsForSqueakAndPharo1x: spec.		self slimeForSqueakPharo1xPharo2x: spec 	].	spec for: #'pharo1.x' do: [ 		self greaseCoreAndTestsForSqueakAndPharo1x: spec.		self slimeForSqueakPharo1xPharo2x: spec	].			spec for: #'pharo1.1' do: [ 		spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo11-Core') ] 	].		spec for: #'pharo1.0' do: [ 		spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo10-Core' 'Grease-Pharo11-Core') ] 	].	spec for: #'pharo2.x' do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];			package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core') ].		self slimeForSqueakPharo1xPharo2x: spec 	].				spec for: #'pharo3.x' do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo30-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];			package: 'Grease-Pharo30-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core')];			package: 'Grease-Slime' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Slime') ].		spec			group: 'Slime' with: #('Grease-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime').	].	spec for: #'pharo4.x' do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo30-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];			package: 'Grease-Pharo30-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core')];			package: 'Grease-Pharo40-Slime' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Pharo40-Slime') ].		spec			group: 'Slime' with: #('Grease-Pharo40-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime').	].		spec for: #'gs2.x' do: [ 		spec repository: 'http://seaside.gemtalksystems.com/ss/Seaside30'.		spec			project: 'GsCore'			with: [ 				spec					className: 'ConfigurationOfGsCore';					versionString: #stable;					repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];			project: 'UTF8'			with: [ 				spec					className: 'ConfigurationOfGsMisc';					versionString: #stable;					loads: #('Utf8Encoding');					repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [ spec loads: #('System-Digital-Signatures') ];			project: 'SMTPMail' copyFrom: 'UTF8' with: [ spec loads: #('SMTPMail') ].		spec			package: 'Grease-Core' with: [ 					spec						requires: #('GsCore');						includes: #('Grease-GemStone-Core') ];			package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone200-Core') ];			package: 'Grease-GemStone200-Core' with: [ spec requires: #('Grease-GemStone-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-GemStone-Core') ];			package: 'Grease-GemStone-Core' with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];			package: 'Grease-Tests-GemStone-Core' with: [ spec requires: #('Grease-Tests-Core') ] 	].		spec for: #'gs2.3.x' do: [ 		spec			package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone230-Core') ];			package: 'Grease-GemStone230-Core' with: [ spec requires: #('Grease-GemStone-Core') ] 	].	spec for: #'gs2.4.x' do: [ 		spec			package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone240-Core') ];			package: 'Grease-GemStone240-Core' with: [ spec requires: #('Grease-GemStone-Core') ]	].		spec for: #'gs3.x' do: [		spec 			baseline: 'Grease' with: [ spec repository: 'github://GsDevKit/Grease:master/repository' ];			import: 'Grease'	].! !!ConfigurationOfGrease methodsFor: 'baselines (1.1)' stamp: 'JohanBrichau 3/22/2015 11:58'!baseline116: spec	<version: '1.1.6-baseline'>	spec for: #common do: [ 		spec blessing: #baseline.		spec repository: 'http://www.smalltalkhub.com/mc/Seaside/Grease11/main'.		spec			package: 'Grease-Core';			package: 'Grease-Tests-Core' with: [ spec requires: #('Grease-Core') ].		spec			group: 'Core' with: #('Grease-Core');			group: 'Core Tests' with: #('Grease-Tests-Core');			group: 'Slime' with: #('Core');			group: 'Slime Tests' with: #('Core Tests');			group: 'Tests' with: #('Core Tests' 'Slime Tests');			group: 'default' with: #('Slime') 	].	spec for: #squeak do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo-Core' 'Grease-Squeak-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo-Core' 'Grease-Tests-Squeak-Core') ];			package: 'Grease-Pharo-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo-Core' with: [ spec requires: #('Grease-Tests-Core') ];			package: 'Grease-Squeak-Core' with: [ spec requires: #('Grease-Pharo-Core') ];			package: 'Grease-Tests-Squeak-Core' with: [ spec requires: #('Grease-Tests-Pharo-Core') ].		self slimeForSqueakPharo1xPharo2x: spec 	].	spec for: #'pharo1.x' do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo-Core') ];			package: 'Grease-Pharo-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo-Core' with: [ spec requires: #('Grease-Tests-Core') ].		self slimeForSqueakPharo1xPharo2x: spec	].			spec for: #'pharo1.1' do: [ 		spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo11-Core') ] 	].		spec for: #'pharo1.0' do: [ 		spec package: 'Grease-Pharo-Core' with: [ spec includes: #('Grease-Pharo10-Core' 'Grease-Pharo11-Core') ] 	].	spec for: #'pharo2.x' do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo20-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];			package: 'Grease-Pharo20-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core') ].		self slimeForSqueakPharo1xPharo2x: spec 	].				spec for: #'pharo3.x' do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo30-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];			package: 'Grease-Pharo30-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core')];			package: 'Grease-Slime' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Slime') ].		spec			group: 'Slime' with: #('Grease-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime').	].	spec for: #'pharo4.x' do: [ 		spec			package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo30-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo20-Core') ];			package: 'Grease-Pharo30-Core' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Pharo20-Core' with: [ spec requires: #('Grease-Tests-Core')];			package: 'Grease-Pharo40-Slime' with: [ spec requires: #('Grease-Core') ];			package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Pharo40-Slime') ].		spec			group: 'Slime' with: #('Grease-Pharo40-Slime');			group: 'Slime Tests' with: #('Grease-Tests-Slime').	].		spec for: #'gs2.x' do: [ 		spec repository: 'http://seaside.gemtalksystems.com/ss/Seaside30'.		spec			project: 'GsCore'			with: [ 				spec					className: 'ConfigurationOfGsCore';					versionString: #stable;					repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];			project: 'UTF8'			with: [ 				spec					className: 'ConfigurationOfGsMisc';					versionString: #stable;					loads: #('Utf8Encoding');					repository: 'http://seaside.gemtalksystems.com/ss/MetacelloRepository' ];			project: 'System-Digital-Signatures' copyFrom: 'UTF8' with: [ spec loads: #('System-Digital-Signatures') ];			project: 'SMTPMail' copyFrom: 'UTF8' with: [ spec loads: #('SMTPMail') ].		spec			package: 'Grease-Core' with: [ 					spec						requires: #('GsCore');						includes: #('Grease-GemStone-Core') ];			package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone200-Core') ];			package: 'Grease-GemStone200-Core' with: [ spec requires: #('Grease-GemStone-Core') ];			package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-GemStone-Core') ];			package: 'Grease-GemStone-Core' with: [ spec requires: #('Grease-Core' 'GsCore' 'System-Digital-Signatures' 'UTF8' 'SMTPMail') ];			package: 'Grease-Tests-GemStone-Core' with: [ spec requires: #('Grease-Tests-Core') ] 	].		spec for: #'gs2.3.x' do: [ 		spec			package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone230-Core') ];			package: 'Grease-GemStone230-Core' with: [ spec requires: #('Grease-GemStone-Core') ] 	].	spec for: #'gs2.4.x' do: [ 		spec			package: 'Grease-GemStone-Core' with: [ spec includes: #('Grease-GemStone240-Core') ];			package: 'Grease-GemStone240-Core' with: [ spec requires: #('Grease-GemStone-Core') ]	].		spec for: #'gs3.x' do: [		spec 			baseline: 'Grease' with: [ spec repository: 'github://GsDevKit/Grease:master/repository' ];			import: 'Grease'	].! !!ConfigurationOfGrease methodsFor: 'symbolic versions' stamp: 'JohanBrichau 9/6/2014 18:44'!bleedingEdge: spec	<symbolicVersion: #'bleedingEdge'>	spec for: #'common' version: '1.1.5-baseline'.! !!ConfigurationOfGrease methodsFor: 'symbolic versions' stamp: 'JohnMcKeon 3/19/2015 22:07'!development: spec	<symbolicVersion: #'development'>	spec for: #'common' version: '1.1.14'! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'PaulDeBruicker 10/31/2013 18:08'!greaseCoreAndTestsForSqueakAndPharo1x: spec	spec		package: 'Grease-Core' with: [ spec includes: #('Grease-Pharo-Core') ];		package: 'Grease-Tests-Core' with: [ spec includes: #('Grease-Tests-Pharo-Core') ];		package: 'Grease-Pharo-Core' with: [ spec requires: #('Grease-Core') ];		package: 'Grease-Tests-Pharo-Core' with: [ spec requires: #('Grease-Tests-Core') ]! !!ConfigurationOfGrease methodsFor: 'doits' stamp: 'dkh 12/16/2009 15:40'!initializeNewRandomCaches10alpha3	Smalltalk at: #WAKeyGenerator ifPresent: [:cl |		cl initialize ].! !!ConfigurationOfGrease methodsFor: 'doits' stamp: 'NickAger 3/25/2012 05:00'!initializeTransactionMutex1051	(Smalltalk at: #GRGemStonePlatform) initialize.! !!ConfigurationOfGrease methodsFor: 'accessing' stamp: 'DaleHenrichs 10/9/2010 11:35'!project	^ project ifNil: [ | projectAttributes |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		project := (Smalltalk at: #MetacelloMCProject) new.		projectAttributes := #().		Smalltalk at: #SystemVersion ifPresent: [:cl | | versionString |			versionString := cl current version.			((versionString beginsWith: 'Pharo-1.0') or: [versionString beginsWith: 'PharoCore1.0'])				ifTrue: [ projectAttributes := projectAttributes, #(#'GreaseForPharo1.0') ] ].		project projectAttributes:  projectAttributes.		(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.		project loadType: #linear ]! !!ConfigurationOfGrease methodsFor: 'symbolic versions' stamp: 'StephanEggermont 6/25/2014 10:12'!release10: aSpec	<symbolicVersion:#'release1.0'>	aSpec for: #'common' version: '1.0.12'! !!ConfigurationOfGrease methodsFor: 'symbolic versions' stamp: 'StephanEggermont 11/10/2014 13:43'!release11: aSpec	<symbolicVersion:#'release1.1'>	aSpec for: #'common' version: '1.1.13'! !!ConfigurationOfGrease methodsFor: 'symbolic versions' stamp: 'DiegoLont 5/21/2014 11:49'!release1: aSpec	<symbolicVersion:#'release1'>	aSpec for: #'common' version: #'release1.1'! !!ConfigurationOfGrease methodsFor: 'baselines (1.0)' stamp: 'PaulDeBruicker 10/31/2013 18:08'!slimeForSqueakPharo1xPharo2x: spec	spec		project: 'Refactoring-Core'		with: [ 			spec				className: 'ConfigurationOfRefactoringBrowser';				versionString: #stable;				loads: #('Core');				repository: 'http://www.squeaksource.com/MetacelloRepository' ].	spec		package: 'Grease-Slime' with: [ spec requires: #('Refactoring-Core' 'Grease-Core') ];		package: 'Grease-Tests-Slime' with: [ spec requires: #('Grease-Slime') ].	^ spec		group: 'Slime' with: #('Grease-Slime');		group: 'Slime Tests' with: #('Grease-Tests-Slime')! !!ConfigurationOfGrease methodsFor: 'symbolic versions' stamp: 'DiegoLont 5/21/2014 11:49'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: #'release1'! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DiegoLont 3/31/2014 14:36'!version10011: aSpec	<version: '1.0.11' imports: #( '1.0.9-baseline')>	aSpec for: #'common' do: [		aSpec			blessing: #'release';			description: 'Fixes for Pharo3.0';			author: 'JohanBrichau';			timestamp: '02/04/2014 21:13'.		aSpec			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.74';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.83' ].	aSpec for: #'squeak' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.58';			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-topa.15';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #'pharo3.x' do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-JohanBrichau.16';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #'pharo2.x' do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-JohanBrichau.16';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #'pharo1.x' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.58';			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-topa.15';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #'gemstone' do: [		aSpec			project: 'SMTPMail' with: '0.241.1';			project: 'GsCore' with: '0.246.1';			project: 'UTF8' with: '0.241.1';			project: 'System-Digital-Signatures' with: '0.241.1'.		aSpec			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				aSpec					file: 'Grease-GemStone-Core-dkh.49';					postLoadDoIt: #'initializeTransactionMutex1051' ] ].	aSpec for: #'gs3.x' do: [		aSpec			package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ].	aSpec for: #'gs2.x' do: [		aSpec			package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	aSpec for: #'gs2.4.x' do: [		aSpec			package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	aSpec for: #'gs2.3.x' do: [		aSpec			package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'StephanEggermont 6/25/2014 10:12'!version10012: aSpec	<version: '1.0.12' imports: #( '1.0.9-baseline')>	aSpec for: #'common' do: [		aSpec			blessing: #'release';			description: 'Fixes for Pharo4.0';			author: 'StephanEggermont';			timestamp: '25/06/2014 21:13'.		aSpec			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.74';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.83' ].	aSpec for: #'squeak' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.58';			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-topa.15';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #(#'pharo3.x' #'pharo4.x') do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-JohanBrichau.16';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #'pharo2.x' do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-JohanBrichau.16';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #'pharo1.x' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.58';			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-topa.15';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	aSpec for: #'gemstone' do: [		aSpec			project: 'SMTPMail' with: '0.241.1';			project: 'GsCore' with: '0.246.1';			project: 'UTF8' with: '0.241.1';			project: 'System-Digital-Signatures' with: '0.241.1'.		aSpec			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				aSpec					file: 'Grease-GemStone-Core-dkh.49';					postLoadDoIt: #'initializeTransactionMutex1051' ] ].	aSpec for: #'gs3.x' do: [		aSpec			package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ].	aSpec for: #'gs2.x' do: [		aSpec			package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	aSpec for: #'gs2.4.x' do: [		aSpec			package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	aSpec for: #'gs2.3.x' do: [		aSpec			package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'StephanEggermont 6/10/2014 11:02'!version1010: spec	<version: '1.0.10' imports: #('1.0.9-baseline' )>	spec for: #'common' do: [		spec description: '-Slime in Pharo 3.x (and 4.x, added 2014-6-10'.		spec author: 'JohanBrichau'.		spec timestamp: '20/01/2014 17:23'. 		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.72';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.82'. ].			"RB/Slime"	spec for: #(#'squeak' #'pharo1.x') do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-topa.15';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].			spec for: #(#'squeak' #'pharo1.x') do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.58';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13' ].	spec for: #(#'pharo2.x' #'pharo3.x' #'pharo4.x') do: [		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13';			package: 'Grease-Slime' with: 'Grease-Slime-JohanBrichau.16';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].	spec for: #( #'pharo1.x' #'squeak') do: [		spec 			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1' ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.246.1';			project: 'SMTPMail' with: '0.241.1';			project: 'UTF8' with: '0.241.1';			project: 'System-Digital-Signatures' with: '0.241.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.49';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 11/19/2010 12:32'!version1011: spec	<version: '1.0.1.1' imports: #('1.0.1.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- pick up latest mcz files'.		spec author: 'dkh'.		spec timestamp: '11/19/2010 10:44'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.51';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.63'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.32';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.4'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.7';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.6'.].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.3'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-NickAger.28';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.8'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 11/11/2010 13:11'!version101: spec	<version: '1.0.1' imports: #('1.0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- pick up latest mcz files'.		spec author: 'DaleHenrichs'.		spec timestamp: '11/08/2010 15:13:08'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.51';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.62'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.31';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.4'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.7';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.6'.].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.3'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-DaleHenrichs.27';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.8'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 12/08/2010 12:11'!version1021: spec	<version: '1.0.2.1' imports: #('1.0.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '- ABANDONED in favor of 1.0.3'.		spec author: 'DaleHenrichs'.		spec timestamp: '12/03/2010 16:50:14'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.52';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.63'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.32';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.4'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.7';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.6'.].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.3'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.242';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-DaleHenrichs.31';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.11'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'pmm 11/21/2010 12:36'!version102: spec	<version: '1.0.2' imports: #('1.0.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- pick up latest mcz files'.		spec author: 'pmm'.		spec timestamp: '11/21/2010 12:35'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.52';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.63'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.32';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.4'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.7';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.6'.].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.3'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-NickAger.28';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.8'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 02/08/2011 16:36'!version1031: spec	<version: '1.0.3.1' imports: #('1.0.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '- open 1.0.3.1 for development- get Seaside3.0 running on GemStone3.0beta3- fix Issue 212: http://code.google.com/p/glassdb/issues/detail?id=212 "FileDirectory class>>onClient switched sense" [GemStone]- ANSI block behavior means that GemStone3.0 passes GRNumberTest>>testToDoClosures- wait for GemStone bugs 41222 and 41223 to be fixed to pass remaining tests- fix Issue 226:	http://code.google.com/p/glassdb/issues/detail?id=226 "Grease-Core should depend upon GsCore for #gemstone [isInfinite]"'.		spec author: 'DaleHenrichs'.		spec timestamp: '01/20/2011 11:01:37'.		spec 			package: 'Grease-Core' with: 'Grease-Core-DaleHenrichs.53';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.63'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.32';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.4'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.7';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.6'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.3'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.244';			project: 'SMTPMail' with: '0.238';			project: 'UTF8' with: '0.238';			project: 'System-Digital-Signatures' with: '0.238'.		spec 			package: 'Grease-GemStone-Core' with: 'Grease-GemStone-Core-DaleHenrichs.33';			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.12'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 12/13/2010 18:17'!version103: spec	<version: '1.0.3' imports: #('1.0.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- add test coverage for GRPlatform file library support methods [GemStone]- User ServerDirectory in Grease (for performance) [GemStone].- fix open file descriptor leak [GemStone]- fix Issue 166: http://code.google.com/p/glassdb/issues/detail?id=166 "discrepancy between Pharo regex and Gemstone on multiline strings [moved Ansi* streams to core GemStone]'.		spec author: 'DaleHenrichs'.		spec timestamp: '12/13/2010 14:45:46'.		spec 			package: 'Grease-Core' with: 'Grease-Core-DaleHenrichs.53';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.63'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.32';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.4'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.7';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.6'.].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.3'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.243';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: 'Grease-GemStone-Core-DaleHenrichs.32';			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.11'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 3/3/2011 15:28'!version104: spec	<version: '1.0.4' imports: #('1.0.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- latest mcz files for 1.0.4- fix Issue 239: using WAFastCGIAdaptor leads the false conversion of + in urls. [GemStone]  http://code.google.com/p/glassdb/issues/detail?id=239 - fix Issue 227: Squeak/Pharo String extensions methods don''t work on multibyte strings [GemStone]  http://code.google.com/p/glassdb/issues/detail?id=227'.		spec author: 'dkh'.		spec timestamp: '2/28/2011 13:48'.		spec 			package: 'Grease-Core' with: 'Grease-Core-DaleHenrichs.58';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.65'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.36';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.10'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-pmm.8';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.7'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.3'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.244';			project: 'SMTPMail' with: '0.238';			project: 'UTF8' with: '0.238';			project: 'System-Digital-Signatures' with: '0.238'.		spec 			package: 'Grease-GemStone-Core' with: 'Grease-GemStone-Core-DaleHenrichs.36';			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.13'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 08/31/2011 12:43'!version1051: spec	<version: '1.0.5.1' imports: #('1.0.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '1.0.5.1 (dkh.150):- open 1.0.5.1 for development ... GemStone-specific branch aimed at bypassing use of class instance variables (etc.) to allow the GemStone 3.0 version of Seaside to run against a read only SymbolDictionary. Some class instance variables are mapped to session temps and some are mapped to user-specific storage in UserGlobals.- refactor GRGemStonePlatform>>logError:title: and friends a bit to make it somewhat more useful- GRGemStoneRandomProvider class instance variables mutex and generator mapped to session temps1.0.5.1 (dkh.152):- fix issue 290  "transactionMutex is always nil"  http://code.google.com:9393/p/glassdb/issues/detail?id=290'.		spec author: 'dkh'.		spec timestamp: '08/31/2011 12:43:20'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.59';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.65'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.37';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.10'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-pmm.8';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.7'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245';			project: 'SMTPMail' with: '0.239';			project: 'UTF8' with: '0.239';			project: 'System-Digital-Signatures' with: '0.239'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.40';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 09/13/2011 16:42'!version105: spec	<version: '1.0.5' imports: #('1.0.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '1.0.5 (DaleHenrichs.141):- experimental Pharo 1.2 support- support for Iliad [GemStone]1.0.5 (dkh.143):- Move GRGemStonePlatformTest>>testFileLibrary to WAGemStoneFileLibraryTest ... reference to WAFileLibrary belongs in a Seaside package1.0.5 (dkh.145):- changes for the new Random classes available in 3.0'.		spec author: 'dkh'.		spec timestamp: '5/17/2011 11:10'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.59';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.65'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.37';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.10'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-pmm.8';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.7'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.244';			project: 'SMTPMail' with: '0.238';			project: 'UTF8' with: '0.238';			project: 'System-Digital-Signatures' with: '0.238'.		spec 			package: 'Grease-GemStone-Core' with: 'Grease-GemStone-Core-DaleHenrichs.38';			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 10/14/2011 17:52'!version1061: spec	<version: '1.0.6.1' imports: #('1.0.6.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '1.0.6.1 (dkh.157):- address GemStone2.3.x upgrade issues for GLASS 1.0-beta.8.71.0.6.1 (dkh.158):- fix Issue 279: GRGemStoneRandomProvider class>>#''sessionStart'' calls TransientRandom>>#''open'' which does not exist  http://code.google.com/p/glassdb/issues/detail?id=279  GemStone 2.3 fix (GemStone 2.4 fixed in earlier version)1.0.6.1 (dkh.159):- port to GemStone 3.0.1 (#generatehardBreak changed for 3.0)- GemStone 3.0.1 fix for Issue 130: remote breakpoints don''t work  http://code.google.com/p/glassdb/issues/detail?id=130'.		spec author: 'dkh'.		spec timestamp: '10/14/2011 16:56'.		spec 			package: 'Grease-Core' with: 'Grease-Core-dkh.65';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.78'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.43';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245';			project: 'SMTPMail' with: '0.239.1';			project: 'UTF8' with: '0.239.1';			project: 'System-Digital-Signatures' with: '0.239.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.45';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 10/19/2011 11:31'!version1062: spec	<version: '1.0.6.2' imports: #('1.0.6.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '1.0.6.1 (dkh.157):- address GemStone2.3.x upgrade issues for GLASS 1.0-beta.8.71.0.6.1 (dkh.158):- fix Issue 279: GRGemStoneRandomProvider class>>#''sessionStart'' calls TransientRandom>>#''open'' which does not exist  http://code.google.com/p/glassdb/issues/detail?id=279  GemStone 2.3 fix (GemStone 2.4 fixed in earlier version)1.0.6.1 (dkh.159):- port to GemStone 3.0.1 (#generatehardBreak changed for 3.0)- GemStone 3.0.1 fix for Issue 130: remote breakpoints don''t work  http://code.google.com/p/glassdb/issues/detail?id=1301.0.6.2 (StephaneDucasse.157): updating to renaming happening in RB :( 								- grease-slime.14.lr and a couple of others'.		spec author: 'StephaneDucasse'.		spec timestamp: ' 18 October 2011'. "Date today"		spec 			package: 'Grease-Core' with: 'Grease-Core-lr.66';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.79'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.44';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.14';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.10'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'pharo1.1.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].		spec for: #'pharo1.0.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245';			project: 'SMTPMail' with: '0.239.1';			project: 'UTF8' with: '0.239.1';			project: 'System-Digital-Signatures' with: '0.239.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.45';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 10/20/2011 14:52'!version1063: spec	<version: '1.0.6.3' imports: #('1.0.6.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '1.0.6.1 (dkh.157):- address GemStone2.3.x upgrade issues for GLASS 1.0-beta.8.71.0.6.1 (dkh.158):- fix Issue 279: GRGemStoneRandomProvider class>>#''sessionStart'' calls TransientRandom>>#''open'' which does not exist  http://code.google.com/p/glassdb/issues/detail?id=279  GemStone 2.3 fix (GemStone 2.4 fixed in earlier version)1.0.6.1 (dkh.159):- port to GemStone 3.0.1 (#generatehardBreak changed for 3.0)- GemStone 3.0.1 fix for Issue 130: remote breakpoints don''t work  http://code.google.com/p/glassdb/issues/detail?id=1301.0.6.2 (StephaneDucasse.157): updating to renaming happening in RB :( 								- grease-slime.14.lr and a couple of others1.0.6.3 (dkh.172):- opened for development ... continued GemStone 3.0.1 work continued from 1.0.6.1- clean up tests when run against Minimal GLASS group'.		spec author: 'dkh'.		spec timestamp: '10/20/2011 14:51'. "Date today"		spec 			package: 'Grease-Core' with: 'Grease-Core-lr.66';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.79'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.44';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.14';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.10'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'pharo1.1.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].		spec for: #'pharo1.0.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245';			project: 'SMTPMail' with: '0.239.1';			project: 'UTF8' with: '0.239.1';			project: 'System-Digital-Signatures' with: '0.239.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.46';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 11/17/2011 14:11'!version1064: spec	<version: '1.0.6.4' imports: #('1.0.6.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '1.0.6.4 (dkh.174):- open 1.0.6.4 for development- support for GemStone/S 2.4.5 release'.		spec author: 'dkh'.		spec timestamp: '11/17/2011 14:11'.		spec 			package: 'Grease-Core' with: 'Grease-Core-lr.66';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.79'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.44';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.14';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.10'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'pharo1.1.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].		spec for: #'pharo1.0.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245';			project: 'SMTPMail' with: '0.239.1';			project: 'UTF8' with: '0.239.1';			project: 'System-Digital-Signatures' with: '0.239.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.47';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 12/02/2011 14:45'!version1065: spec	<version: '1.0.6.5' imports: #('1.0.6.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: 'open 1.0.6.5 for development1.0.6.5 (dkh.177) [GemStone only];- reimplement SendMail>>connectTo:on: to be portable between GemStone/S 2.x and 3.x'.		spec author: 'dkh'.		spec timestamp: '12/2/2011 14:16'.		spec 			package: 'Grease-Core' with: 'Grease-Core-lr.66';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.79'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.44';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.14';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.10'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'pharo1.1.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].		spec for: #'pharo1.0.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245.2';			project: 'SMTPMail' with: '0.240.1';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.47';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 9/11/2011 11:34'!version106: spec	<version: '1.0.6' imports: #('1.0.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '1.0.6 (dkh.153):- open 1.0.6 for development- update to latest packages (http://code.google.com/p/seaside/wiki/Seaside306Changelog)- update GRPlatform version to 1.0.61.0.6 (dkh.154) [GEMSTONE]:- merge Grease-GemStone-Core-NickAger.431.0.6 (dkh.155) [GEMSTONE]:- fix Issue 290: transactionMutex is always nil  http://code.google.com/p/glassdb/issues/detail?id=290- fix Issue 287: Pick up GsMisc v.0239.1  http://code.google.com/p/glassdb/issues/detail?id=287'.		spec author: 'dkh'.		spec timestamp: '09/02/2011 17:03:50'.		spec 			package: 'Grease-Core' with: 'Grease-Core-dkh.65';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.78'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.43';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245';			project: 'SMTPMail' with: '0.239.1';			project: 'UTF8' with: '0.239.1';			project: 'System-Digital-Signatures' with: '0.239.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.44';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 06/19/2012 17:01'!version1071: spec	<version: '1.0.7.1' imports: #('1.0.7.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- Port Grease to Pharo2.0.- BlockContext class no longer exists in Pharo2.0, so the BlockContext extension methods only needed for Pharo1.3 and earlier- Slime not ported to Pharo2.0, yet, so exclude- GemStone 3.1 support for libICU (Unicode)1.0.7.1 (dkh.186):- Adjust Utf8 code .. libICU produces a ByteArray when it encodes to UTF8, but Seaside wants Strings'.		spec author: 'dkh'.		spec timestamp: '6/19/2012 17:01'.		spec 			package: 'Grease-Core' with: 'Grease-Core-NickAger.70';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.80'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-dkh.50';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo1.x' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.14';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.10';			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1'. ].	spec for: #'squeak' do: [		spec 			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1'. ].		spec for: #'pharo1.1.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'pharo1.0.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.246';			project: 'SMTPMail' with: '0.241';			project: 'UTF8' with: '0.241';			project: 'System-Digital-Signatures' with: '0.241'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.48';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 09/21/2012 14:23'!version1072: spec	<version: '1.0.7.2' imports: #('1.0.7.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'GemStone/S 3.1.0.1 support (GLASS 1.0-beta.8.7.3)'.		spec author: 'dkh'.		spec timestamp: '9/21/2012 14:23'.		spec 			package: 'Grease-Core' with: 'Grease-Core-NickAger.70';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.80'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-dkh.50';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo1.x' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.14';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.10';			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1'. ].	spec for: #'squeak' do: [		spec 			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1'. ].		spec for: #'pharo1.1.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'pharo1.0.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.246.1';			project: 'SMTPMail' with: '0.241.1';			project: 'UTF8' with: '0.241.1';			project: 'System-Digital-Signatures' with: '0.241.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.48';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 4/25/2012 10:31'!version107: spec	<version: '1.0.7' imports: #('1.0.6.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: ''.		spec author: 'dkh'.		spec timestamp: '3/28/2012 16:39'.		spec 			package: 'Grease-Core' with: 'Grease-Core-NickAger.70';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.80'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-NickAger.49';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.14';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.10'. ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'pharo1.1.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].		spec for: #'pharo1.0.x' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.13';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.9'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245.2';			project: 'SMTPMail' with: '0.240.1';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.47';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DamienCassou 10/17/2013 14:56'!version108: spec	<version: '1.0.8' imports: #('1.0.8-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '- Seaside 3 for Pharo 2.0 and Squeak 4.4- support for Seaside3.1 on GemStone'.		spec author: 'dkh'.		spec timestamp: '9/15/2013 07:07'. 		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.72';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-DamienCassou.81'. ].			"RB/Slime"	spec for: #(#'squeak' #'pharo1.x' #'pharo2.x') do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-topa.15';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].			spec for: #(#'squeak' #'pharo1.x') do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.58';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13' ].	spec for: #(#'pharo2.x' #'pharo3.x') do: [		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13' ].	spec for: #( #'pharo1.x' #'squeak') do: [		spec 			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1' ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.246.1';			project: 'SMTPMail' with: '0.241.1';			project: 'UTF8' with: '0.241.1';			project: 'System-Digital-Signatures' with: '0.241.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.49';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'JohanBrichau 1/25/2014 14:04'!version109: spec	<version: '1.0.9' imports: #('1.0.8-baseline' )>	spec for: #'common' do: [		spec blessing: #'development'.		spec description: '- Seaside 3 for Pharo 2.0 and Squeak 4.4- support for Seaside3.1 on GemStone'.		spec author: 'dkh'.		spec timestamp: '9/15/2013 07:07'. 		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.72';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.82'. ].			"RB/Slime"	spec for: #(#'squeak' #'pharo1.x' #'pharo2.x') do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-topa.15';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-JohanBrichau.11' ].			spec for: #(#'squeak' #'pharo1.x') do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.58';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13' ].	spec for: #(#'pharo2.x' #'pharo3.x') do: [		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.13' ].	spec for: #( #'pharo1.x' #'squeak') do: [		spec 			package: 'Grease-Pharo13-Core' with: 'Grease-Pharo13-Core-dkh.1' ].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.246.1';			project: 'SMTPMail' with: '0.241.1';			project: 'UTF8' with: '0.241.1';			project: 'System-Digital-Signatures' with: '0.241.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.49';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 10/11/2010 14:46'!version10: spec	<version: '1.0' imports: #('1.0-baseline' )>	spec for: #common do: [		spec blessing: #release.		spec description: '- 1.0 final'.		spec author: 'DaleHenrichs'.		spec timestamp: '10/11/2010 14:46'.		spec 			package: 'Grease-Core' with: 'Grease-Core-lr.48';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.60'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.29';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.4'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #'GreaseForPharo1.0' do: [		spec package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-pmm.2'].	spec for: #gemstone do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-DaleHenrichs.26';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.8'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 11/13/2009 10:41'!version10alpha1: spec	<version: '1.0-alpha1' imports: #('1.0-alpha1-baseline' )>	spec for: #'common' do: [		spec blessing: #'alpha'.		spec author: 'dkh'.		spec timestamp: '11/12/2009 09:41'.		spec 			package: 'Grease-Core' with: 'Grease-Core-obi.3';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-jf.1'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-jf.1';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jf.1'.].	spec for: #'gemstone' do: [		spec			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: 'Grease-GemStone-Core-dkh.5';			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.3'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 12/8/2009 16:07'!version10alpha2: spec	<version: '1.0-alpha2' imports: #('1.0-alpha2-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- in GemStone the block arg for #on:do: must always have an argument- fix Issue 480: http://code.google.com/p/seaside/issues/detail?id=480 (GemStone/Pharo)- fix Issue 488: http://code.google.com/p/seaside/issues/detail?id=488- fix Issue 499: http://code.google.com/p/seaside/issues/detail?id=499 (GemStone/Pharo)- support for loading Grease into a 2.3 GemStone/S repository- support ''UTF-8'' has a codec name as well- pick up latest repository changes as of 11/17/2009 15:09"'.		spec author: 'dkh'.		spec timestamp: '11/23/2009 16:09'.		spec 			package: 'Grease-Core' with: 'Grease-Core-dkh.8';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.5'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-dkh.3';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-dkh.2'.].	spec for: #gemstone do: [		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: 'Grease-GemStone-Core-dkh.9';			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 1/22/2010 10:55'!version10alpha3: spec	<version: '1.0-alpha3' imports: #('1.0-alpha2-baseline' )>	spec for: #'common' do: [		spec blessing: #'alpha'.		spec description: '- pick up latest developer package versions (12/8/2009 16:14)"'.		spec author: 'dkh'.		spec timestamp: '12/23/09 16:52:29'.		spec 			package: 'Grease-Core' with: 'Grease-Core-dkh.8';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-jf.7'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-dkh.4';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-dkh.2'.].	spec for: #'gemstone' do: [		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 1/22/2010 16:02'!version10alpha4: spec	<version: '1.0-alpha4' imports: #('1.0-alpha2-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest developer package versions (1/22/2010 12:06)"'.		spec author: 'DaleHenrichs'.		spec timestamp: '1/22/2010 12:08'.		spec 			package: 'Grease-Core' with: 'Grease-Core-jf.14';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-jok.17'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-jf.7';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jf.5'.].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 1/27/2010 15:38'!version10alpha501: spec	<version: '1.0-alpha5.1' imports: #('1.0-alpha5-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest developer package versions (1/22/2010 12:06)"'.		spec author: 'dkh'.		spec timestamp: '1/27/2010 15:01'.		spec 			package: 'Grease-Core' with: 'Grease-Core-jok.15';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-jok.22'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-jf.8';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jf.5'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.1'.		spec			package: 'Grease-Slime' with: 'Grease-Slime-jok.2';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.1'. ].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 3/1/2010 14:57'!version10alpha6: spec	<version: '1.0-alpha6' imports: #('1.0-alpha5-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest developer package versions (3/1/2010 12:39)'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/1/2010 13:16'.		spec 			package: 'Grease-Core' with: 'Grease-Core-obi.30';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.39'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.13';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.6'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.1'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.3';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.2'.].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 3/29/2010 12:41'!version10alpha7: spec	<version: '1.0-alpha7' imports: #('1.0-alpha7-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest developer package versions (3/29/2010 11:09)'.		spec author: 'DaleHenrichs'.		spec timestamp: '3/29/2010 11:34'.		spec 			package: 'Grease-Core' with: 'Grease-Core-jok.31';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-jok.43'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-jok.14';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.6'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.2'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.4';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.3'.].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 4/9/2010 15:52'!version10alpha8: spec	<version: '1.0-alpha8' imports: #('1.0-alpha7-baseline' )>	spec for: #common do: [		spec blessing: #development.		spec description: '- pick up latest developer package versions (4/9/2010 15:51)'.		spec author: 'DaleHenrichs'.		spec timestamp: '4/9/2010 15:52'.		spec 			package: 'Grease-Core' with: 'Grease-Core-jok.31';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-jok.45'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.15';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-lr.6'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.2'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.4';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-lr.4'.].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'dkh 5/14/2010 17:09'!version10alpha91: spec	<version: '1.0-alpha9.1' imports: #('1.0-alpha7-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest developer package versions Pharo1.1 compat (5/14/2010 13:29)- pick up latest Refactoring-Core'.		spec author: 'DaleHenrichs'.		spec timestamp: '5/14/2010 13:47'.		spec 			package: 'Grease-Core' with: 'Grease-Core-lr.37';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.50'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-jok.18';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jok.7'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.3'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 6/1/2010 14:33'!version10alpha92: spec	<version: '1.0-alpha9.2' imports: #('1.0-alpha7-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest mcz files(6/1/2010 10:21)'.		spec author: 'DaleHenrichs'.		spec timestamp: '6/1/2010 10:21'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.42';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.56'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.23';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jok.7'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.3'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 7/13/2010 10:24'!version10alpha93: spec	<version: '1.0-alpha9.3' imports: #('1.0-alpha9.3-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- refactor groups:On platforms without Slime   ''Core''        = #(''Grease-Core'')   ''Core Tests''  = #(''Grease-Tests-Core'')   ''Slime''       = #(''Core'')   ''Slime Tests'' = #(''Core Tests'')   ''Tests''       = #(''Core Tests'' ''Slime Tests'')   ''default''     = #(''Slime'')On platforms with Slime   ''Core''        = #(''Grease-Core'')   ''Core Tests''  = #(''Grease-Tests-Core'')   ''Slime''       = #(''Core'' ''Grease-Slime'')   ''Slime Tests'' = #(''Core Tests'' ''Grease-Tests-Slime'')   ''Tests''       = #(''Core Tests'' ''Slime Tests'')   ''default''     = #(''Slime'')- port to GemStone GLASS 1.0-beta.8- adjust grease tests for GemStone Interval implementation; replace #= with #keysAndValuesDo:'.		spec author: 'DaleHenrichs'.		spec timestamp: '6/4/2010 17:41'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.42';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-DaleHenrichs.58'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.23';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jok.7'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.3'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.236';			project: 'UTF8' with: '0.236';			project: 'System-Digital-Signatures' with: '0.236'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-DaleHenrichs.16';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.7'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 5/12/2010 17:56'!version10alpha9: spec	<version: '1.0-alpha9' imports: #('1.0-alpha7-baseline' )>	spec for: #common do: [		spec blessing: #alpha.		spec description: '- pick up latest developer package versions (5/12/2010 16:34)- 1.0-alpha8 skipped as it is still in development'.		spec author: 'DaleHenrichs'.		spec timestamp: '5/12/2010 17:15'.		spec 			package: 'Grease-Core' with: 'Grease-Core-DaleHenrichs.36';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.49'.].	spec for: #squeakCommon do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-jok.18';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jok.7'.].	spec for: #pharo do: [		spec project: 'Refactoring-Core' with: '1.2'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #gemstone do: [		spec blessing: #broken.		spec description: 'NOT PORTED TO GEMSTONE'.		spec 			project: 'SMTPMail' with: '0.233';			project: 'UTF8' with: '0.233';			project: 'System-Digital-Signatures' with: '0.233'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.12';					postLoadDoIt: #initializeNewRandomCaches10alpha3. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.5'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 08/27/2010 13:15'!version10rc1: spec	<version: '1.0-rc.1' imports: #('1.0-rc-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'code updates as of 8/27/2010 10:49'.		spec author: 'DaleHenrichs'.		spec timestamp: '08/27/2010 12:05:55'.		spec 			package: 'Grease-Core' with: 'Grease-Core-jf.45';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.59'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.27';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.3'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-DaleHenrichs.25';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.8'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 09/03/2010 09:49'!version10rc2: spec	<version: '1.0-rc.2' imports: #('1.0-rc-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'GemStone bugfixes:- fix Issue 165: http://code.google.com/p/glassdb/issues/detail?id=165 "Include GemStone version of Seaside-FileSystem in Seaside3.0"'.		spec author: 'DaleHenrichs'.		spec timestamp: '09/02/2010 16:22:59'.		spec 			package: 'Grease-Core' with: 'Grease-Core-jf.45';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-lr.59'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-lr.27';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.8'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.3'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-DaleHenrichs.26';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.8'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.0.x)' stamp: 'DaleHenrichs 07/27/2010 12:49'!version10rc: spec	<version: '1.0-rc' imports: #('1.0-rc-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: '- Grease 1.0 release candidate- port Grease to GemStone 3.0'.		spec author: 'DaleHenrichs'.		spec timestamp: '07/27/10 12:49:44'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.42';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-DaleHenrichs.58'.].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-DaleHenrichs.24';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-jok.7'.].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: '1.3'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-jok.5';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-jok.5'.].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.241';			project: 'SMTPMail' with: '0.237';			project: 'UTF8' with: '0.237';			project: 'System-Digital-Signatures' with: '0.237'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-DaleHenrichs.21';					postLoadDoIt: #'initializeNewRandomCaches10alpha3'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-DaleHenrichs.8'.].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.2'.].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-DaleHenrichs.2'.].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-DaleHenrichs.2'.].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'pmm 8/27/2012 14:54'!version110: spec	<version: '1.1.0' imports: #('1.1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: ''.		spec author: 'pmm'.		spec timestamp: '08/05/2012 19:27'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.74';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.84'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.52';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.17'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.17';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.11'.		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.10';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.3'. ].	spec for: #'pharo1.x' do: [		spec			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245.2';			project: 'SMTPMail' with: '0.240.1';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.47';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 7/20/2014 18:05'!version1110: spec	<version: '1.1.10' imports: #('1.1.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'released'.		spec author: 'JohanBrichau'.		spec timestamp: '7/4/2014 11:33'.		spec 			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.89';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.95'. ].	spec for: #'squeak' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21'. ].	spec for: #'pharo' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-JohanBrichau.27';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18'. ].	spec for: #'pharo4.x' do: [		spec 			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.15';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11'. ].	spec for: #'pharo3.x' do: [		spec 			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.15';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11'. ].	spec for: #'pharo2.x' do: [		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.19';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11'. ].	spec for: #'pharo1.x' do: [		spec 			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21'. ].	spec for: #'gemstone' do: [		spec 			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-JohanBrichau.52';					postLoadDoIt: #'initializeTransactionMutex1051'. ]. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 9/6/2014 19:01'!version1111: spec	<version: '1.1.11' imports: #('1.1.4-baseline' )>	spec for: #'common' do: [		spec blessing: #'released'.		spec author: 'JohanBrichau'.		spec timestamp: '9/6/2014 12:30'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.93';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.99'. ].	spec for: #'squeak' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21'. ].	spec for: #'pharo' do: [		spec 			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.19'. ].	spec for: #'pharo4.x' do: [		spec 			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.15';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11'. ].	spec for: #'pharo3.x' do: [		spec 			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.15';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11'. ].	spec for: #'pharo2.x' do: [		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.19';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11'. ].	spec for: #'pharo1.x' do: [		spec 			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21'. ].			spec for: #'gs2.x' do: [		spec 			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-JohanBrichau.52';					postLoadDoIt: #'initializeTransactionMutex1051'. ]. ].	spec 		for: #'gs3.x'		do: [			spec import: 'Grease'.			spec baseline: 'Grease' with: [ spec repository: 'github://GsDevKit/Grease:v1.1.11/repository' ] ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 11/8/2014 12:37'!version1112: spec	<version: '1.1.12' imports: #('1.1.5-baseline' )>	spec for: #'common' do: [		spec blessing: #'released'.		spec author: 'JohanBrichau'.		spec timestamp: '11/7/2014 12:36'.		spec 			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.94';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.99'. ].	spec for: #'squeak' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21'. ].	spec for: #'pharo' do: [		spec 			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.19'. ].			spec for: #'pharo1.x' do: [		spec 			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	spec for: #'pharo2.x' do: [		spec			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-JohanBrichau.20';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].			spec for: #'pharo3.x' do: [		spec			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.16';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].	spec for: #'pharo4.x' do: [		spec			package: 'Grease-Pharo40-Slime' with: 'Grease-Pharo40-Slime-JohanBrichau.3';			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.15';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].	spec for: #'gs2.x' do: [		spec 			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-JohanBrichau.52';					postLoadDoIt: #'initializeTransactionMutex1051'. ]. ].	spec for: #'gs3.x' do: [		spec import: 'Grease'.		spec baseline: 'Grease' with: [				spec repository: 'github://GsDevKit/Grease:v1.1.12/repository' ]. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'StephanEggermont 11/10/2014 15:35'!version1113: spec	<version: '1.1.13' imports: #('1.1.5-baseline' )>	spec for: #'common' do: [		spec blessing: #'released'.		spec author: 'JohanBrichau'.		spec timestamp: '11/7/2014 12:36'.		spec 			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.94';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.99'. ].	spec for: #'squeak' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21'. ].	spec for: #'pharo' do: [		spec 			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.19'. ].			spec for: #'pharo1.x' do: [		spec 			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	spec for: #'pharo2.x' do: [		spec			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-JohanBrichau.20';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].			spec for: #'pharo3.x' do: [		spec			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.16';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].	spec for: #'pharo4.x' do: [		spec			package: 'Grease-Pharo40-Slime' with: 'Grease-Pharo40-Slime-JohanBrichau.3';			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.16';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].	spec for: #'gs2.x' do: [		spec 			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-JohanBrichau.52';					postLoadDoIt: #'initializeTransactionMutex1051'. ]. ].	spec for: #'gs3.x' do: [		spec import: 'Grease'.		spec baseline: 'Grease' with: [				spec repository: 'github://GsDevKit/Grease:v1.1.12/repository' ]. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohnMcKeon 3/19/2015 22:19'!version1114: spec	<version: '1.1.14' imports: #('1.1.6-baseline' )>	spec for: #'common' do: [		spec blessing: #development.		spec author: 'JohnMcKeon'.		spec timestamp: '03/14/2015 20:10'.		spec 			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.94';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.99'. ].	spec for: #'squeak' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.72';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.22';			package: 'Grease-Squeak-Core' with: 'Grease-Squeak-Core-JohnMcKeon.2';			package: 'Grease-Tests-Squeak-Core' with: 'Grease-Tests-Squeak-Core-JohnMcKeon.1'. ].	spec for: #'pharo' do: [		spec 			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.19'. ].			spec for: #'pharo1.x' do: [		spec 			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	spec for: #'pharo2.x' do: [		spec			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-JohanBrichau.20';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].			spec for: #'pharo3.x' do: [		spec			package: 'Grease-Slime' with: 'Grease-Slime-pmm.29';			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.16';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].	spec for: #'pharo4.x' do: [		spec			package: 'Grease-Pharo40-Slime' with: 'Grease-Pharo40-Slime-JohanBrichau.3';			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.16';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.12'. ].	spec for: #'gs2.x' do: [		spec 			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-JohanBrichau.52';					postLoadDoIt: #'initializeTransactionMutex1051'. ]. ].	spec for: #'gs3.x' do: [		spec import: 'Grease'.		spec baseline: 'Grease' with: [				spec repository: 'github://GsDevKit/Grease:v1.1.12/repository' ]. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 7/21/2013 22:23'!version111: spec	<version: '1.1.1' imports: #('1.1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: 'Issue 733: multibyte characters broken when flushing a WAComboResponse + Slime fixes'.		spec author: 'JohanBrichau'.		spec timestamp: '07/21/2013 19:27'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.76';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.84'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.52';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.17'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.17';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.11'.		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.10';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.3'. ].	spec for: #'pharo1.x' do: [		spec			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245.2';			project: 'SMTPMail' with: '0.240.1';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.47';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 8/22/2013 20:03'!version112: spec	<version: '1.1.2' imports: #('1.1.0-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec author: 'JohanBrichau'.		spec timestamp: '08/22/2013 20:00'.		spec 			package: 'Grease-Core' with: 'Grease-Core-pmm.76';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.86'. ].	spec for: #'squeakCommon' do: [		spec 			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.52';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.17'. ].	spec for: #'pharo' do: [		spec project: 'Refactoring-Core' with: #'stable'.		spec 			package: 'Grease-Slime' with: 'Grease-Slime-lr.17';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.11'.		spec 			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.10';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.4'. ].	spec for: #'pharo1.x' do: [		spec			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1'. ].	spec for: #'gemstone' do: [		spec 			project: 'GsCore' with: '0.245.2';			project: 'SMTPMail' with: '0.240.1';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		spec 			package: 'Grease-GemStone-Core' with: [				spec 					file: 'Grease-GemStone-Core-dkh.47';					postLoadDoIt: #'initializeTransactionMutex1051'. ];			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14'. ].	spec for: #'gs2.x' do: [		spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2'. ].	spec for: #'gs2.3.x' do: [		spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4'. ].	spec for: #'gs2.4.x' do: [		spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3'. ].	spec for: #'gs3.x' do: [		spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4'. ].! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'pmm 12/21/2013 12:31'!version113: spec	<version: '1.1.3' imports: #('1.1.3-baseline')>	spec		for: #common		do: [ 			spec blessing: #development.			spec author: 'JohanBrichau'.			spec timestamp: '9/14/2013 12:42'.			spec				package: 'Grease-Core' with: 'Grease-Core-pmm.82';				package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-DamienCassou.92' ].	spec		for: #squeak		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';				package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo1.x'		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';				package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21';				package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';				package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo2.x'		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.17';				package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.8';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo3.x'		do: [ 			spec				package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.11';				package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.8' ].	spec		for: #gemstone		do: [ 			spec				project: 'GsCore' with: '0.245.2';				project: 'SMTPMail' with: '0.240.1';				project: 'UTF8' with: '0.240.1';				project: 'System-Digital-Signatures' with: '0.240.1'.			spec				package: 'Grease-GemStone-Core'					with: [ 							spec								file: 'Grease-GemStone-Core-dkh.47';								postLoadDoIt: #initializeTransactionMutex1051 ];				package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14' ].	spec for: #'gs2.x' do: [ spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	spec for: #'gs2.3.x' do: [ spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ].	spec for: #'gs2.4.x' do: [ spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	spec for: #'gs3.x' do: [ spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'pmm 12/21/2013 12:31'!version114: spec	<version: '1.1.4' imports: #('1.1.3-baseline')>	spec		for: #common		do: [ 			spec blessing: #development.			spec author: 'JohanBrichau'.			spec timestamp: '12/15/2013 19:00'.			spec				package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.83';				package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.93'];		for: #squeak		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';				package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo1.x'		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';				package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21';				package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';				package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo2.x'		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.17';				package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.8';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo3.x'		do: [ 			spec				package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.11';				package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.8' ].	spec		for: #gemstone		do: [ 			spec				project: 'GsCore' with: '0.245.2';				project: 'SMTPMail' with: '0.240.1';				project: 'UTF8' with: '0.240.1';				project: 'System-Digital-Signatures' with: '0.240.1'.			spec				package: 'Grease-GemStone-Core'					with: [ 							spec								file: 'Grease-GemStone-Core-dkh.47';								postLoadDoIt: #initializeTransactionMutex1051 ];				package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14' ].	spec for: #'gs2.x' do: [ spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	spec for: #'gs2.3.x' do: [ spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ].	spec for: #'gs2.4.x' do: [ spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	spec for: #'gs3.x' do: [ spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 1/18/2014 07:09'!version115: spec	<version: '1.1.5' imports: #('1.1.3-baseline')>	spec		for: #common		do: [ 			spec author: 'JohanBrichau'.			spec timestamp: '12/15/2013 19:00'.			spec				package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.83';				package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-pmm.94' ];		for: #squeak		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';				package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo1.x'		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';				package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21';				package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';				package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo2.x'		do: [ 			spec project: 'Refactoring-Core' with: #stable.			spec				package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.17';				package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.8';				package: 'Grease-Slime' with: 'Grease-Slime-pmm.24';				package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	spec		for: #'pharo3.x'		do: [ 			spec				package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.11';				package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.8' ].	spec		for: #gemstone		do: [ 			spec				project: 'GsCore' with: '0.245.2';				project: 'SMTPMail' with: '0.240.1';				project: 'UTF8' with: '0.240.1';				project: 'System-Digital-Signatures' with: '0.240.1'.			spec				package: 'Grease-GemStone-Core'					with: [ 							spec								file: 'Grease-GemStone-Core-dkh.49';								postLoadDoIt: #initializeTransactionMutex1051 ];				package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14' ].	spec for: #'gs2.x' do: [ spec package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	spec for: #'gs2.3.x' do: [ spec package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ].	spec for: #'gs2.4.x' do: [ spec package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	spec for: #'gs3.x' do: [ spec package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 4/5/2014 14:19'!version116: aSpec	<version: '1.1.6' imports: #( '1.1.4-baseline')>	aSpec for: #'common' do: [		aSpec			blessing: #'release';			author: 'JohanBrichau';			timestamp: '02/16/2014 21:30'.		aSpec			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.86';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.95' ].	aSpec for: #'squeak' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'pharo' do: [		aSpec			package: 'Grease-Slime' with: 'Grease-Slime-JohanBrichau.25';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	aSpec for: #'pharo3.x' do: [		aSpec			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.13';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.9' ].	aSpec for: #'pharo2.x' do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-JohanBrichau.18';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.9' ].	aSpec for: #'pharo1.x' do: [		aSpec			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'gemstone' do: [		aSpec			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		aSpec			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				aSpec					file: 'Grease-GemStone-Core-dkh.49';					postLoadDoIt: #'initializeTransactionMutex1051' ] ].	aSpec for: #'gs3.x' do: [		aSpec			package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ].	aSpec for: #'gs2.x' do: [		aSpec			package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	aSpec for: #'gs2.4.x' do: [		aSpec			package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	aSpec for: #'gs2.3.x' do: [		aSpec			package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 4/5/2014 15:12'!version117: aSpec	<version: '1.1.7' imports: #( '1.1.4-baseline')>	aSpec for: #'common' do: [		aSpec			blessing: #'release';			author: 'JohanBrichau';			timestamp: '04/05/2014 14:20'.		aSpec			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.86';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.95' ].	aSpec for: #'squeak' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'pharo' do: [		aSpec			package: 'Grease-Slime' with: 'Grease-Slime-topa.26';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	aSpec for: #'pharo3.x' do: [		aSpec			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.13';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.9' ].	aSpec for: #'pharo2.x' do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-JohanBrichau.18';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.9' ].	aSpec for: #'pharo1.x' do: [		aSpec			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'gemstone' do: [		aSpec			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		aSpec			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				aSpec					file: 'Grease-GemStone-Core-dkh.49';					postLoadDoIt: #'initializeTransactionMutex1051' ] ].	aSpec for: #'gs3.x' do: [		aSpec			package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ].	aSpec for: #'gs2.x' do: [		aSpec			package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	aSpec for: #'gs2.4.x' do: [		aSpec			package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	aSpec for: #'gs2.3.x' do: [		aSpec			package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'JohanBrichau 4/19/2014 19:57'!version118: aSpec	<version: '1.1.8' imports: #( '1.1.4-baseline')>	aSpec for: #'common' do: [		aSpec			blessing: #'release';			author: 'JohanBrichau';			timestamp: '04/19/2014 19:20'.		aSpec			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.86';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.95' ].	aSpec for: #'squeak' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'pharo' do: [		aSpec			package: 'Grease-Slime' with: 'Grease-Slime-topa.26';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	aSpec for: #'pharo3.x' do: [		aSpec			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-JohanBrichau.13';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.9' ].	aSpec for: #'pharo2.x' do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-JohanBrichau.18';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-JohanBrichau.9' ].	aSpec for: #'pharo1.x' do: [		aSpec			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'gemstone' do: [		aSpec			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		aSpec			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				aSpec					file: 'Grease-GemStone-Core-JohanBrichau.52';					postLoadDoIt: #'initializeTransactionMutex1051' ] ].	aSpec for: #'gs3.x' do: [		aSpec			package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ].	aSpec for: #'gs2.x' do: [		aSpec			package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	aSpec for: #'gs2.4.x' do: [		aSpec			package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	aSpec for: #'gs2.3.x' do: [		aSpec			package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ]! !!ConfigurationOfGrease methodsFor: 'versions (1.1.x)' stamp: 'DamienCassou 6/10/2014 08:12'!version119: aSpec	<version: '1.1.9' imports: #( '1.1.4-baseline')>	aSpec for: #'common' do: [		aSpec			blessing: #'release';			author: 'JohanBrichau';			timestamp: '05/24/2014 17:08'.		aSpec			package: 'Grease-Core' with: 'Grease-Core-JohanBrichau.86';			package: 'Grease-Tests-Core' with: 'Grease-Tests-Core-JohanBrichau.95' ].	aSpec for: #'squeak' do: [		aSpec			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'pharo' do: [		aSpec			package: 'Grease-Slime' with: 'Grease-Slime-topa.26';			package: 'Grease-Tests-Slime' with: 'Grease-Tests-Slime-pmm.18' ].	aSpec for: #'pharo4.x' do: [		aSpec			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.15';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11' ].	aSpec for: #'pharo3.x' do: [		aSpec			package: 'Grease-Pharo30-Core' with: 'Grease-Pharo30-Core-pmm.15';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11' ].	aSpec for: #'pharo2.x' do: [		aSpec			package: 'Grease-Pharo20-Core' with: 'Grease-Pharo20-Core-pmm.19';			package: 'Grease-Tests-Pharo20-Core' with: 'Grease-Tests-Pharo20-Core-pmm.11' ].	aSpec for: #'pharo1.x' do: [		aSpec			package: 'Grease-Pharo10-Core' with: 'Grease-Pharo10-Core-dkh.4';			package: 'Grease-Pharo11-Core' with: 'Grease-Pharo11-Core-pmm.1';			package: 'Grease-Pharo-Core' with: 'Grease-Pharo-Core-pmm.67';			package: 'Grease-Tests-Pharo-Core' with: 'Grease-Tests-Pharo-Core-pmm.21' ].	aSpec for: #'gemstone' do: [		aSpec			project: 'SMTPMail' with: '0.240.1';			project: 'GsCore' with: '0.245.2';			project: 'UTF8' with: '0.240.1';			project: 'System-Digital-Signatures' with: '0.240.1'.		aSpec			package: 'Grease-Tests-GemStone-Core' with: 'Grease-Tests-GemStone-Core-dkh.14';			package: 'Grease-GemStone-Core' with: [				aSpec					file: 'Grease-GemStone-Core-JohanBrichau.52';					postLoadDoIt: #'initializeTransactionMutex1051' ] ].	aSpec for: #'gs3.x' do: [		aSpec			package: 'Grease-GemStone300-Core' with: 'Grease-GemStone300-Core-dkh.4' ].	aSpec for: #'gs2.x' do: [		aSpec			package: 'Grease-GemStone200-Core' with: 'Grease-GemStone200-Core-dkh.2' ].	aSpec for: #'gs2.4.x' do: [		aSpec			package: 'Grease-GemStone240-Core' with: 'Grease-GemStone240-Core-dkh.3' ].	aSpec for: #'gs2.3.x' do: [		aSpec			package: 'Grease-GemStone230-Core' with: 'Grease-GemStone230-Core-dkh.4' ]! !"ConfigurationOfGrease"!!ConfigurationOfSton commentStamp: '<historical>' prior: 0!I am ConfigurationOfSton, a Metacello configuration to load the STON (Smalltalk Object Notation) project.	ConfigurationOfSton load.!!ConfigurationOfSton commentStamp: '<historical>' prior: 34236567!I am ConfigurationOfSton, a Metacello configuration to load the STON (Smalltalk Object Notation) project.	ConfigurationOfSton load.!!ConfigurationOfSton class methodsFor: 'development support' stamp: 'SeanDeNigris 7/5/2012 19:06'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfSton class methodsFor: 'private' stamp: 'SeanDeNigris 7/5/2012 19:06'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfSton class methodsFor: 'private' stamp: 'SeanDeNigris 7/5/2012 19:06'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfSton class methodsFor: 'private' stamp: 'SeanDeNigris 7/5/2012 19:06'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfSton class methodsFor: 'metacello tool support' stamp: 'SeanDeNigris 7/5/2012 19:06'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfSton class methodsFor: 'loading' stamp: 'SeanDeNigris 7/5/2012 19:06'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfSton class methodsFor: 'loading' stamp: 'SeanDeNigris 7/5/2012 19:06'!loadBleedingEdge	"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."	"self loadBleedingEdge"	<apiDocumentation>	^(self project version: #bleedingEdge) load! !!ConfigurationOfSton class methodsFor: 'loading' stamp: 'SeanDeNigris 7/5/2012 19:06'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfSton class methodsFor: 'accessing' stamp: 'SeanDeNigris 7/5/2012 19:06'!project	^self new project! !!ConfigurationOfSton class methodsFor: 'development support' stamp: 'SeanDeNigris 7/5/2012 19:06'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfSton methodsFor: 'baselines' stamp: 'SeanDeNigris 7/5/2012 19:11'!baseline01: spec	<version: '0.1-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://ss3.gemstone.com/ss/STON'.		spec			package: 'Ston-Core';			package: 'Ston-Tests' ].! !!ConfigurationOfSton methodsFor: 'baselines' stamp: 'SvenVanCaekenberghe 10/26/2012 10:45'!baseline02: spec	<version: '0.2-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://ss3.gemstone.com/ss/STON'.		spec			package: 'STON-Core';			package: 'STON-Tests' ].! !!ConfigurationOfSton methodsFor: 'baselines' stamp: 'SvenVanCaekenberghe 11/28/2013 19:20'!baseline03: spec	<version: '0.3-baseline'>	spec for: #'common' do: [		spec blessing: #'baseline'.		spec repository: 'http://ss3.gemstone.com/ss/STON'.		spec			package: 'STON-Core';			package: 'STON-Tests';			group: 'Core' with: #('STON-Core') ].! !!ConfigurationOfSton methodsFor: 'accessing' stamp: 'SeanDeNigris 7/5/2012 19:06'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		(self class baseConfigurationClassIfAbsent: []) ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear. "change to #atomic if desired"		project ]! !!ConfigurationOfSton methodsFor: 'symbolic versions' stamp: 'SvenVanCaekenberghe 4/10/2015 20:32'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'common' version: '0.12'! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SeanDeNigris 7/5/2012 19:12'!version01: spec	<version: '0.1' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec description: ''.		spec author: 'SeanDeNigris'.		spec timestamp: '7/5/2012 19:06'.		spec			package: 'Ston-Core' with: 'Ston-Core-SvenVanCaekenberghe.35';			package: 'Ston-Tests' with: 'Ston-Tests-SvenVanCaekenberghe.33'. ].! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 10/25/2012 17:41'!version02: spec	<version: '0.2' imports: #('0.1-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec			package: 'Ston-Core' with: 'Ston-Core-SvenVanCaekenberghe.36';			package: 'Ston-Tests' with: 'Ston-Tests-SvenVanCaekenberghe.34'. ].! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 10/26/2012 10:54'!version03: spec	<version: '0.3' imports: #('0.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.37';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.29'. ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 12/18/2012 10:29'!version04: spec	<version: '0.4' imports: #('0.2-baseline' )>	spec for: #'common' do: [		spec blessing: #'release'.		spec			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.42';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.39'. ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 3/7/2013 10:55'!version05: spec	<version: '0.5' imports: #('0.2-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.43';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.40' ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 11/28/2013 19:21'!version06: spec	<version: '0.6' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.45';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.42' ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'DamienCassou 12/11/2013 16:46'!version07: spec	<version: '0.7' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-DamienCassou.46';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.42' ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 1/21/2014 20:00'!version08: spec	<version: '0.8' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.47';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.42' ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 4/24/2014 13:38'!version09: spec	<version: '0.9' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.49';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.44' ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 12/8/2014 23:38'!version10: spec	<version: '0.10' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.54';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.48' ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 4/10/2015 15:33'!version11: spec	<version: '0.11' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.55';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.49' ]! !!ConfigurationOfSton methodsFor: 'versions' stamp: 'SvenVanCaekenberghe 4/10/2015 20:31'!version12: spec	<version: '0.12' imports: #('0.3-baseline' )>	spec for: #'common' do: [		spec 			blessing: #'release';			package: 'STON-Core' with: 'STON-Core-SvenVanCaekenberghe.55';			package: 'STON-Tests' with: 'STON-Tests-SvenVanCaekenberghe.50' ]! !"ConfigurationOfSton"!!GRNotification commentStamp: 'pmm 9/14/2013 15:50' prior: 0!This class provides consistent initialization and exception signaling behaviour across platforms. All platforms must provide the ANSI-standard signaling protocol on this class. #signal: can therefore be safely called on any subclass.Packages that are using Seaside-Platform should usually subclass GRNotification instead of Notification.!!GRDeprecatedApiNotification commentStamp: 'pmm 9/14/2013 15:50' prior: 0!This notification is signaled whenever a deprecated message is sent.see WAObject>>#greaseDeprecatedApi:details: !!GRError commentStamp: 'pmm 9/14/2013 15:50' prior: 0!This class provides consistent initialization and exception signaling behaviour across platforms. All platforms must provide the ANSI-standard signaling protocol on this class. #signal: can therefore be safely called on any subclass.Packages that are using Seaside-Platform should usually subclass GRError instead of Error.!!GRInvalidArgumentCount commentStamp: 'jf 3/14/2009 11:05' prior: 0!Signaled whenever a message is sent with the incorrect number of arguments.!!GRInvalidUtf8Error commentStamp: 'pmm 1/10/2009 22:29' prior: 0!A WAInvalidUtf8Error signals that the input is not valid UTF-8.!!GRObject commentStamp: 'pmm 9/14/2013 15:52' prior: 0!A common superclass that ensures consistent initialization behaviour on all platforms and provides #error: methods that signal an instance of WAPlatformError.Packages that are using Seaside-Platform should normally subclass GRObject instead of Object.!!GRCodec commentStamp: 'lr 2/7/2009 09:55' prior: 0!A codec defines how Seaside communicates without the outside world and how outside data is converted into the image (decoding) and back outside the image (encoding). The codec is essentially a stream factory that provides wrappers around standard streams. All streams do support binary mode for non-converted transfer.!!GRNullCodec commentStamp: 'pmm 9/14/2013 15:52' prior: 0!The null codec always returns the original streams. It assumes that the outside world uses the same encoding as the inside world. This is highly efficient as no transformation is applied to the data, but has its drawbacks.!!GRDelayedSend commentStamp: 'NickAger 3/20/2012 09:04' prior: 0!A GRDelayedSend is a future message send of a message to an object. Some of the arguments can be predefined. Instances are intended to be interchangeable with blocks.This class should conform the ANSI (block) valuable protocol. Unlike a block, a GRDelayedSend is not a closure so doesn't hold onto the method context. GRDelayedSend provides similar, but portable, functionality to Pharo's MessageSend.This is an abstract class. Use the methods in the 'instance-creation' protocol on the class side to create intances.Instance Variables	receiver:		<Object>	selector:		<Symbol>receiver	- the object receiving the messageselector	- the message selector sent to the receiver!!GRDelayedSendMessage commentStamp: 'NickAger 3/19/2012 11:20' prior: 0!GRDelayedSendMessage is an abstract base for objects that provide currying functionality for GRDelayedSend!!GRBoundMessage commentStamp: 'jf 3/14/2009 11:04' prior: 0!A delayed send that has some or all of the arguments defined in advance. Additionally supplied arguments will be added, if possible, to these when the object is evaluate.Instance Variables	arguments:		<Array>arguments	- the predefined arguments!!GRUnboundMessage commentStamp: 'jf 3/14/2009 11:03' prior: 0!A delayed send that has none of the arguments defined in advance.!!GRDelegatingStream commentStamp: 'pmm 6/25/2012 20:20' prior: 0!A GRDelegatingStream is a wrapper around a write stream and defines common behavior.Instance Variables	stream:		<WriteStream>stream	- a WriteStream!!GRCodecStream commentStamp: 'pmm 6/25/2012 20:21' prior: 0!GRCodecStream is the abstract base class for codec streams!!GRNullCodecStream commentStamp: 'pmm 6/25/2012 20:21' prior: 0!A WANullCodecStream is a WriteStream on a String on which you can both put binary and character data without encoding happening.Instance Variables	stream:		<WriteStream>stream	- a WriteStream on a String!!GRCountingStream commentStamp: 'pmm 6/25/2012 20:39' prior: 0!A GRCountingStream counts how many elements have been added to it. This is necessary because the underlying stream may inflate the number of elements in the stream.Instance Variables:	count	<Integer>		count  - number of elements added to this stream!!GRInflector commentStamp: 'lr 12/27/2008 09:43' prior: 0!The Inflector transforms words from singular to plural.!!GRPackage commentStamp: 'pmm 9/14/2013 15:53' prior: 0!I am a platform independent package representation. I know my name, description, my dependencies, the license and the repository URL. Packages are declared by creating a class side extension method that answers a configured package instance. The expression    GRPackage packagesanswers the collection of the complete package graph.!!GRPlatform commentStamp: 'jf 2/6/2009 16:05' prior: 0!The abstract platform implementation. Each platform should provide a subclass implementing any abstract methods and overriding any other methods as necessary.Default implementations should be provided here when possible/useful but default implementations MUST be valid on ALL PLATFORMS so it is rarely practical. VA Smalltalk flags sends of uknown messages so even these must be known to exist on all platforms.Common cases where default implementations *are* appropriate are where there is a standard implementation that is valid on all platforms but one or more platforms have an additional, optimized implementation that should be used instead.All classes and methods used by methods of this class should be either:  + included in the Seaside-Platform package;  + defined by the ANSI Smalltalk standard; or  + (not ideal) referenced via 'Smalltalk at: #ClassName'.!!GRNumberPrinter commentStamp: 'pmm 2/1/2014 13:27' prior: 0!A GRNumberPrinter prints numbers (integers and floats) in various formats in a platform independent way.Instance Variables	accuracy:	<UndefinedObject|Float>	base:		<Integer>	delimiter:	<UndefinedObject|Character>	digits:		<UndefinedObject|Integer>	infinite:		<UndefinedObject|String>	nan:			<UndefinedObject|String>	padding:	<UndefinedObject|Character>	precision:	<Integer>	separator:	<UndefinedObject|Character>!!GRSmallDictionary commentStamp: 'jf 2/15/2010 15:51' prior: 0!I am an implementation of a dictionary. Compared to other dictionaries I am very efficient for small sizes, speed- and space-wise. I also mantain the order in which elements are added when iterating. My implementation features some ideas from the RefactoringBrowser.!!GROrderedMultiMap commentStamp: 'jf 2/15/2010 16:04' prior: 0!I am an implementation of an ordered multi-map. I allow multiple values to be associated with the same key and maintain the order of addition. #at: and its derivatives all operate on the first matching key, while #allAt: returns the complete list of values for a key in the order they were added.!!GRVersion commentStamp: 'lr 2/19/2012 12:57' prior: 0!I model version numbers. I am comparable and I define a natural order.!!GRNotification commentStamp: 'pmm 9/14/2013 15:50' prior: 34246320!This class provides consistent initialization and exception signaling behaviour across platforms. All platforms must provide the ANSI-standard signaling protocol on this class. #signal: can therefore be safely called on any subclass.Packages that are using Seaside-Platform should usually subclass GRNotification instead of Notification.!!GRDeprecatedApiNotification commentStamp: 'pmm 9/14/2013 15:50' prior: 34246736!This notification is signaled whenever a deprecated message is sent.see WAObject>>#greaseDeprecatedApi:details: !!GRDeprecatedApiNotification methodsFor: 'accessing' stamp: 'jf 9/24/2008 10:28'!details	^ details! !!GRDeprecatedApiNotification methodsFor: 'accessing' stamp: 'jf 9/24/2008 10:28'!details: anObject	details := anObject! !!Character methodsFor: '*grease-core' stamp: 'lr 7/24/2008 18:20'!print: anObject on: aStream	aStream nextPut: self! !!Number methodsFor: '*grease-core' stamp: 'jf 9/30/2009 01:04'!greaseInteger	"Answer an integer of the receiver, in our case we simply truncate the number."	^ self truncated! !!GRError commentStamp: 'pmm 9/14/2013 15:50' prior: 34246907!This class provides consistent initialization and exception signaling behaviour across platforms. All platforms must provide the ANSI-standard signaling protocol on this class. #signal: can therefore be safely called on any subclass.Packages that are using Seaside-Platform should usually subclass GRError instead of Error.!!GRInvalidArgumentCount commentStamp: 'jf 3/14/2009 11:05' prior: 34247303!Signaled whenever a message is sent with the incorrect number of arguments.!!GRInvalidUtf8Error commentStamp: 'pmm 1/10/2009 22:29' prior: 34247446!A WAInvalidUtf8Error signals that the input is not valid UTF-8.!!GRObject commentStamp: 'pmm 9/14/2013 15:52' prior: 34247568!A common superclass that ensures consistent initialization behaviour on all platforms and provides #error: methods that signal an instance of WAPlatformError.Packages that are using Seaside-Platform should normally subclass GRObject instead of Object.!!GRCodec commentStamp: 'lr 2/7/2009 09:55' prior: 34247876!A codec defines how Seaside communicates without the outside world and how outside data is converted into the image (decoding) and back outside the image (encoding). The codec is essentially a stream factory that provides wrappers around standard streams. All streams do support binary mode for non-converted transfer.!!GRCodec class methodsFor: 'accessing' stamp: 'pmm 6/28/2009 16:35'!allCodecs	"Answer all codecs supported in this system. This is a collection of codec instances."	^ self subclasses		inject: self codecs asArray		into: [ :result :each | result , each allCodecs ]! !!GRCodec class methodsFor: 'private' stamp: 'pmm 6/28/2009 16:40'!basicForEncoding: aString	"Create the actual instance."	self subclassResponsibility! !!GRCodec class methodsFor: 'accessing' stamp: 'jf 2/7/2009 20:27'!codecs	"Answer a collection of possible codecs of the receiver. To be overridden by concrete subclasses."	^ #()! !!GRCodec class methodsFor: 'instance creation' stamp: 'lr 7/25/2011 19:46'!forEncoding: aString	"Answer a new codec instance for the given encoding name. Raise an WAUnsupportedEncodingError if the encoding name is not supported by this image."	self allSubclassesDo: [ :each | 		(each supportsEncoding: aString)			ifTrue: [ ^ each basicForEncoding: aString ] ].	^ self unsupportedEncoding: aString! !!GRCodec class methodsFor: 'testing' stamp: 'pmm 6/28/2009 16:40'!supportsEncoding: aString	"Answer whether the the given encoding name is supported by this codec class."	self subclassResponsibility! !!GRCodec class methodsFor: 'private' stamp: 'lr 7/25/2011 19:46'!unsupportedEncoding: aString	"Signal an unsupported encoding."	^ GRUnsupportedEncodingError signal: 'unsupported encoding: ' , aString! !!GRCodec methodsFor: 'convenience' stamp: 'pmm 8/26/2011 09:47'!decode: aString	| readStream writeStream |	readStream := self decoderFor: aString readStream.	writeStream := GRPlatform current writeCharacterStreamOn: (String new: aString size).	[ readStream atEnd ]		whileFalse: [ writeStream nextPutAll: (readStream next: 1024) ].	^ writeStream contents! !!GRCodec methodsFor: 'conversion' stamp: 'lr 2/7/2009 09:41'!decoderFor: aReadStream	"Wrap aReadStream with an decoder for the codec of the receiver. Answer a read stream that delegates to and shares the state of aReadStream." 		self subclassResponsibility! !!GRCodec methodsFor: 'convenience' stamp: 'pmm 8/26/2011 09:48'!encode: aString	| writeStream |	writeStream := self encoderFor: (GRPlatform current		writeCharacterStreamOn:  (String new: aString size)).	writeStream nextPutAll: aString.	^ writeStream contents! !!GRCodec methodsFor: 'conversion' stamp: 'lr 2/7/2009 09:41'!encoderFor: aWriteStream	"Wrap aWriteStream with an encoder for the codec of the receiver. Answer a write stream that delegates to and shares the state of aWriteStream."		self subclassResponsibility! !!GRCodec methodsFor: 'accessing' stamp: 'lr 2/7/2009 10:16'!name	"Answer a human readable string of the receivers encoding policy."	self subclassResponsibility! !!GRCodec methodsFor: 'printing' stamp: 'lr 2/7/2009 10:17'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' name: '; print: self name! !!GRCodec methodsFor: 'accessing' stamp: 'lr 2/7/2009 11:54'!url	"Answer a codec that is responsible to encode and decode URLs. In most cases an UTF-8 codec is the only valid choice, but subclasses might decide to do something else."	self subclassResponsibility! !!GRNullCodec commentStamp: 'pmm 9/14/2013 15:52' prior: 34248255!The null codec always returns the original streams. It assumes that the outside world uses the same encoding as the inside world. This is highly efficient as no transformation is applied to the data, but has its drawbacks.!!GRNullCodec class methodsFor: 'private' stamp: 'lr 7/25/2011 19:46'!basicForEncoding: aString	^ self new! !!GRNullCodec class methodsFor: 'accessing' stamp: 'pmm 5/26/2010 07:07'!codecName	^ '(none)'! !!GRNullCodec class methodsFor: 'accessing' stamp: 'jf 2/7/2009 20:27'!codecs	^ Array with: self new! !!GRNullCodec class methodsFor: 'testing' stamp: 'lr 7/25/2011 19:46'!supportsEncoding: aString	^ aString isNil! !!GRNullCodec methodsFor: 'convenience' stamp: 'pmm 8/19/2014 10:00'!decode: aString	"Overridden for efficiency."	^ aString! !!GRNullCodec methodsFor: 'conversion' stamp: 'jf 9/30/2009 00:28'!decoderFor: aReadStream 	"wrap to avoid String vs ByteArray issues"	^ GRNullCodecStream on: aReadStream! !!GRNullCodec methodsFor: 'convenience' stamp: 'pmm 8/19/2014 10:00'!encode: aString	"Overridden for efficiency."	^ aString! !!GRNullCodec methodsFor: 'conversion' stamp: 'jf 9/30/2009 00:28'!encoderFor: aWriteStream 	"wrap to avoid String vs ByteArray issues"	^ GRNullCodecStream on: aWriteStream! !!GRNullCodec methodsFor: 'accessing' stamp: 'pmm 5/26/2010 07:07'!name	^ GRNullCodec codecName! !!GRNullCodec methodsFor: 'accessing' stamp: 'lr 2/7/2009 12:06'!url	"The selfish method. Let's do it with ourselves."		^ self! !!GRDelayedSend commentStamp: 'NickAger 3/20/2012 09:04' prior: 34248545!A GRDelayedSend is a future message send of a message to an object. Some of the arguments can be predefined. Instances are intended to be interchangeable with blocks.This class should conform the ANSI (block) valuable protocol. Unlike a block, a GRDelayedSend is not a closure so doesn't hold onto the method context. GRDelayedSend provides similar, but portable, functionality to Pharo's MessageSend.This is an abstract class. Use the methods in the 'instance-creation' protocol on the class side to create intances.Instance Variables	receiver:		<Object>	selector:		<Symbol>receiver	- the object receiving the messageselector	- the message selector sent to the receiver!!GRDelayedSend class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:48'!empty	^ self receiver: nil selector: #yourself! !!GRDelayedSend class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:49'!new	^ self empty! !!GRDelayedSend class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:33'!receiver: anObject selector: aSymbol 	^ self basicNew 		initializeWithReceiver: anObject			message: (GRUnboundMessage selector: aSymbol);		yourself! !!GRDelayedSend class methodsFor: 'instance creation' stamp: 'pmm 1/10/2009 23:44'!receiver: anObject selector: aSymbol argument: aParameter	^ self receiver: anObject selector: aSymbol arguments: (Array with: aParameter)! !!GRDelayedSend class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:33'!receiver: anObject selector: aSymbol arguments: anArray 	^ self basicNew 		initializeWithReceiver: anObject			message: (GRBoundMessage selector: aSymbol arguments: anArray);		yourself! !!GRDelayedSend methodsFor: 'accessing' stamp: 'jf 7/10/2011 23:32'!argumentCount	"Answer the number of arguments that must be provided to the receiver when sending it."		^ message argumentCount! !!GRDelayedSend methodsFor: 'accessing' stamp: 'lr 1/11/2009 11:44'!fixCallbackTemps	"For polymorphism with BlockContext>>#fixCallbackTemps."! !!GRDelayedSend methodsFor: 'initialization' stamp: 'jf 7/10/2011 23:23'!initializeWithReceiver: anObject message: aDelayedSendMessage	self initialize.	receiver := anObject.	message := aDelayedSendMessage! !!GRDelayedSend methodsFor: 'printing' stamp: 'jf 7/10/2011 23:23'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' receiver: '; print: receiver.	aStream nextPut: $ .	message printOn: aStream! !!GRDelayedSend methodsFor: 'evaluating' stamp: 'lr 1/11/2009 11:45'!value	^ self valueWithArguments: #()! !!GRDelayedSend methodsFor: 'evaluating' stamp: 'lr 1/11/2009 11:45'!value: anObject	^ self valueWithArguments: (Array with: anObject)! !!GRDelayedSend methodsFor: 'evaluating' stamp: 'lr 1/11/2009 11:46'!value: aFirstObject value: aSecondObject	^ self valueWithArguments: (Array with: aFirstObject with: aSecondObject)! !!GRDelayedSend methodsFor: 'evaluating' stamp: 'jf 7/10/2011 23:24'!valueWithArguments: anArray	^ message valueFor: receiver withArguments: anArray! !!GRDelayedSend methodsFor: 'evaluating' stamp: 'jf 7/10/2011 23:24'!valueWithPossibleArguments: anArray	^ message valueFor: receiver withPossibleArguments: anArray! !!GRDelayedSendMessage commentStamp: 'NickAger 3/19/2012 11:20' prior: 34249305!GRDelayedSendMessage is an abstract base for objects that provide currying functionality for GRDelayedSend!!GRBoundMessage commentStamp: 'jf 3/14/2009 11:04' prior: 34249474!A delayed send that has some or all of the arguments defined in advance. Additionally supplied arguments will be added, if possible, to these when the object is evaluate.Instance Variables	arguments:		<Array>arguments	- the predefined arguments!!GRBoundMessage class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:30'!selector: aSymbol	^ self selector: aSymbol arguments: #()! !!GRBoundMessage class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:29'!selector: aSymbol arguments: anArray	^ self basicNew		initializeWithSelector: aSymbol arguments: anArray;		yourself! !!GRBoundMessage methodsFor: 'delegation' stamp: 'jf 7/10/2011 23:38'!argumentCount	^ selector numArgs - arguments size! !!GRBoundMessage methodsFor: 'initialization' stamp: 'jf 7/10/2011 23:21'!initializeWithSelector: aSymbol arguments: anArray	self initializeWithSelector: aSymbol.	arguments := anArray asArray! !!GRBoundMessage methodsFor: 'private' stamp: 'jf 7/10/2011 23:14'!mergeArguments: anArray	^ arguments , anArray! !!GRBoundMessage methodsFor: 'printing' stamp: 'lr 1/11/2009 11:50'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' arguments: '; print: arguments! !!GRDelayedSendMessage class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:28'!new	^ self selector: #yourself! !!GRDelayedSendMessage class methodsFor: 'instance creation' stamp: 'jf 7/10/2011 23:27'!selector: aSymbol	^ self basicNew		initializeWithSelector: aSymbol;		yourself! !!GRDelayedSendMessage methodsFor: 'delegation' stamp: 'jf 7/10/2011 23:02'!argumentCount	"Answer the number of arguments that must be provided when sending this message."		self subclassResponsibility! !!GRDelayedSendMessage methodsFor: 'private' stamp: 'jf 7/10/2011 23:20'!basicPerformFor: receiver withArguments: anArray	^ anArray size = selector numArgs		ifTrue: [ receiver perform: selector withArguments: anArray ]		ifFalse: [ self invalidArgumentCount ]! !!GRDelayedSendMessage methodsFor: 'initialization' stamp: 'jf 7/10/2011 23:01'!initializeWithSelector: aSymbol	self initialize.	selector := aSymbol! !!GRDelayedSendMessage methodsFor: 'private' stamp: 'jf 7/10/2011 23:25'!invalidArgumentCount	GRInvalidArgumentCount signal! !!GRDelayedSendMessage methodsFor: 'private' stamp: 'jf 7/10/2011 23:14'!mergeArguments: anArray	self subclassResponsibility! !!GRDelayedSendMessage methodsFor: 'printing' stamp: 'jf 7/10/2011 23:36'!printOn: aStream	aStream nextPutAll: 'selector: '; print: selector! !!GRDelayedSendMessage methodsFor: 'delegation' stamp: 'jf 7/10/2011 23:37'!valueFor: receiver withArguments: anArray	"Send the message to receiver with the arguments in anArray. Answer the result.	Signal an error if the number of arguments does not match the selector."		^ self basicPerformFor: receiver withArguments: (self mergeArguments: anArray)! !!GRDelayedSendMessage methodsFor: 'delegation' stamp: 'jf 7/10/2011 23:19'!valueFor: receiver withPossibleArguments: anArray	"Send the message to receiver with as many of the arguments in anArray as possible. Answer the result.	Error if not enough arguments are available for the selector."	| allArguments |	allArguments := self mergeArguments: anArray.		^ allArguments size < selector numArgs		ifTrue: [ self invalidArgumentCount ]		ifFalse: [ self basicPerformFor: receiver withArguments: (allArguments first: selector numArgs) ]! !!GRUnboundMessage commentStamp: 'jf 3/14/2009 11:03' prior: 34249790!A delayed send that has none of the arguments defined in advance.!!GRUnboundMessage methodsFor: 'delegation' stamp: 'lr 1/11/2009 13:02'!argumentCount	^ selector numArgs! !!GRUnboundMessage methodsFor: 'private' stamp: 'lr 7/25/2011 19:52'!mergeArguments: anArray	^ anArray! !!GRDelegatingStream commentStamp: 'pmm 6/25/2012 20:20' prior: 34249923!A GRDelegatingStream is a wrapper around a write stream and defines common behavior.Instance Variables	stream:		<WriteStream>stream	- a WriteStream!!GRCodecStream commentStamp: 'pmm 6/25/2012 20:21' prior: 34250141!GRCodecStream is the abstract base class for codec streams!!GRNullCodecStream commentStamp: 'pmm 6/25/2012 20:21' prior: 34250266!A WANullCodecStream is a WriteStream on a String on which you can both put binary and character data without encoding happening.Instance Variables	stream:		<WriteStream>stream	- a WriteStream on a String!!GRNullCodecStream methodsFor: 'streaming' stamp: 'lr 7/25/2011 19:50'!next	^ stream next! !!GRNullCodecStream methodsFor: 'streaming' stamp: 'lr 7/25/2011 19:50'!next: anInteger	^ stream next: anInteger! !!GRNullCodecStream methodsFor: 'streaming' stamp: 'lr 7/16/2009 08:52'!nextPut: aCharacterOrByte	aCharacterOrByte isCharacter		ifTrue: [ stream nextPut: aCharacterOrByte ]		ifFalse: [ stream nextPut: (Character codePoint: aCharacterOrByte) ]! !!GRNullCodecStream methodsFor: 'streaming' stamp: 'lr 7/16/2009 08:52'!nextPutAll: aStringOrByteArray	aStringOrByteArray isString		ifTrue: [ stream nextPutAll: aStringOrByteArray ]		ifFalse: [			1 to: aStringOrByteArray size do: [ :index |				stream nextPut: (Character codePoint: (aStringOrByteArray at: index)) ] ]! !!GRCountingStream commentStamp: 'pmm 6/25/2012 20:39' prior: 34250542!A GRCountingStream counts how many elements have been added to it. This is necessary because the underlying stream may inflate the number of elements in the stream.Instance Variables:	count	<Integer>		count  - number of elements added to this stream!!GRCountingStream methodsFor: 'accessing' stamp: 'pmm 6/25/2012 20:26'!count	^ count! !!GRCountingStream methodsFor: 'streaming' stamp: 'pmm 6/25/2012 20:28'!greaseNext: anInteger putAll: aCollection startingAt: startIndex	super greaseNext: anInteger putAll: aCollection startingAt: startIndex.	count := count + anInteger! !!GRCountingStream methodsFor: 'initialization' stamp: 'pmm 6/25/2012 20:26'!initialize	super initialize.	count := 0! !!GRCountingStream methodsFor: 'streaming' stamp: 'pmm 6/25/2012 20:46'!next	self shouldNotImplement! !!GRCountingStream methodsFor: 'streaming' stamp: 'pmm 6/25/2012 20:46'!next: anInteger	self shouldNotImplement! !!GRCountingStream methodsFor: 'streaming' stamp: 'pmm 6/25/2012 20:45'!nextPut: aCharacter	stream nextPut: aCharacter.	count := count + 1	! !!GRCountingStream methodsFor: 'streaming' stamp: 'pmm 6/25/2012 20:45'!nextPutAll: aString	stream nextPutAll: aString.	count := count + aString size	! !!GRCountingStream methodsFor: 'accessing' stamp: 'pmm 6/25/2012 20:27'!reset	super reset.	count := 0! !!GRDelegatingStream class methodsFor: 'instance creation' stamp: 'pmm 10/30/2010 18:53'!on: aStream	^ self basicNew initializeOn: aStream! !!GRDelegatingStream methodsFor: 'testing' stamp: 'pmm 2/20/2009 22:04'!atEnd	^ stream atEnd! !!GRDelegatingStream methodsFor: 'accessing' stamp: 'pmm 2/20/2009 22:05'!contents	^ stream contents! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'pmm 2/20/2009 22:11'!crlf	self nextPut: Character cr; nextPut: Character lf! !!GRDelegatingStream methodsFor: 'accessing' stamp: 'pmm 2/20/2009 22:06'!flush	stream flush! !!GRDelegatingStream methodsFor: 'initialization' stamp: 'pmm 9/1/2012 15:25'!initializeOn: aStream	self initialize.	stream := aStream! !!GRDelegatingStream methodsFor: 'testing' stamp: 'NorbertHartl 10/7/2010 08:21'!isStream	^ true! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'pmm 2/20/2009 22:11'!next	self subclassResponsibility! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'pmm 2/20/2009 22:12'!next: anInteger	self subclassResponsibility! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'pmm 2/20/2009 22:12'!nextPut: aCharacter	self subclassResponsibility! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'pmm 2/20/2009 22:12'!nextPutAll: aString	self subclassResponsibility! !!GRDelegatingStream methodsFor: 'accessing' stamp: 'JohanBrichau 9/14/2013 12:20'!position	^ stream position! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'lr 9/25/2011 10:11'!print: anObject	anObject printOn: self! !!GRDelegatingStream methodsFor: 'accessing' stamp: 'ar 8/4/2010 20:54'!reset	"Reset the stream"	stream reset! !!GRDelegatingStream methodsFor: 'accessing' stamp: 'pmm 2/20/2009 22:05'!size	^ stream size! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'jf 7/28/2009 15:55'!space	self nextPut: Character space! !!GRDelegatingStream methodsFor: 'streaming' stamp: 'jf 7/28/2009 15:56'!tab	self nextPut: Character tab! !!GRInflector commentStamp: 'lr 12/27/2008 09:43' prior: 34250858!The Inflector transforms words from singular to plural.!!GRInflector class methodsFor: 'initialization' stamp: 'pmm 2/24/2008 18:31'!initialize	Uninflected := #('bison' 'bream' 'breeches' 'britches' 'carp' 'chassis' 'clippers' 'cod' 'contretemps' 'corps' 'debris' 'deer' 'diabetes' 'djinn' 'eland' 'elk' 'equipment' 'fish' 'flounder' 'gallows' 'graffiti' 'headquarters' 'herpes' 'high-jinks' 'homework' 'information' 'innings' 'ities' 'itis' 'jackanapes' 'mackerel' 'measles' 'mews' 'money' 'mumps' 'news' 'ois' 'pincers' 'pliers' 'pox' 'proceedings' 'rabies' 'rice' 'salmon' 'scissors' 'sea-bass' 'series' 'shears' 'sheep' 'species' 'swine' 'trout' 'tuna' 'whiting' 'wildebeest').	InflectionRules := #(('man' 'en' 2) ('child' 'ren' 0) ('cow' 'kine' 3) ('penis' 'es' 0) ('sex' 'es' 0) ('person' 'ople' 4) ('octopus' 'es' 0) ('quiz' 'zes' 0) ('ox' 'en' 0) ('louse' 'ice' 4) ('mouse' 'ice' 4) ('matrix' 'ices' 2) ('vertix' 'ices' 2) ('vertex' 'ices' 2) ('indix' 'ices' 2) ('index' 'ices' 2) ('x' 'es' 0) ('ch' 'es' 0) ('ss' 'es' 0) ('sh' 'es' 0) ('ay' 's' 0) ('ey' 's' 0) ('iy' 's' 0) ('oy' 's' 0) ('uy' 's' 0) ('y' 'ies' 1) ('alf' 'ves' 1) ('elf' 'ves' 1) ('olf' 'ves' 1) ('arf' 'ves' 1) ('nife' 'ves' 2) ('life' 'ves' 2) ('wife' 'ves' 2) ('sis' 'es' 2) ('tum' 'a' 2) ('ium' 'a' 2) ('buffalo' 'es' 0) ('tomato' 'es' 0) ('buffalo' 'es' 0) ('bus' 'es' 0) ('alias' 'es' 0) ('status' 'es' 0) ('octopus' 'i' 2) ('virus' 'i' 2) ('axis' 'es' 2) ('s' '' 0))! !!GRInflector class methodsFor: 'accessing' stamp: 'jok 3/22/2010 12:04'!pluralize: aString	| string |	string := aString asLowercase.	Uninflected do: [ :each |		(string endsWithSubCollection: each)			ifTrue: [ ^ aString ] ].	InflectionRules do: [ :rule |		(string endsWithSubCollection: rule first)			ifTrue: [ ^ (aString allButLast: rule third) , rule second ] ].	^ aString , 's'! !!GRObject class methodsFor: 'error handling' stamp: 'jf 9/30/2009 00:20'!defaultErrorClass	^ GRError! !!GRObject class methodsFor: 'error handling' stamp: 'jf 3/13/2009 16:40'!error: aString	^ self defaultErrorClass signal: aString! !!GRObject class methodsFor: 'instance creation' stamp: 'jf 3/13/2009 16:28'!new	^ self basicNew initialize! !!GRObject methodsFor: 'error handling' stamp: 'jf 3/13/2009 16:40'!error: aString	^ self class error: aString! !!GRObject methodsFor: 'initialization' stamp: 'jf 3/13/2009 16:14'!initialize! !!GRPackage commentStamp: 'pmm 9/14/2013 15:53' prior: 34250972!I am a platform independent package representation. I know my name, description, my dependencies, the license and the repository URL. Packages are declared by creating a class side extension method that answers a configured package instance. The expression    GRPackage packagesanswers the collection of the complete package graph.!!GRPackage class methodsFor: 'querying' stamp: 'JohanBrichau 12/15/2013 18:27'!grPackages	"Answer a list of all registered packages. A package is registered by adding a class extension to the receiving class answering an instance of the receiving class."	| packages package |	packages := Dictionary new.	self class selectors do: [ :each |		(each numArgs = 0 and: [ each ~= #grPackages ]) ifTrue: [ 			package := self perform: each.			packages at: package name put: package ] ].	packages do: [ :each | each resolveWith: packages ].	^ packages values! !!GRPackage class methodsFor: 'accessing' stamp: 'pmm 9/12/2013 16:00'!greaseCore	^ self new		name: 'Grease-Core';		description: 'The main package of the Grease compatibility layer.';		url: #greaseUrl;		yourself! !!GRPackage methodsFor: 'private' stamp: 'lr 9/5/2009 18:35'!addDependenciesTo: aCollection	(aCollection includes: self) ifFalse: [		self dependencies			do: [ :each | each addDependenciesTo: aCollection ].		aCollection add: self ].	^ aCollection! !!GRPackage methodsFor: 'dependencies' stamp: 'merged 10/20/2008 09:33'!addDependency: aString	dependencies add: aString! !!GRPackage methodsFor: 'dependencies' stamp: 'lr 2/17/2010 15:18'!allDependencies	"Answer all dependencies on which this package depends."	^ self addDependenciesTo: OrderedCollection new! !!GRPackage methodsFor: 'dependencies' stamp: 'jf 3/15/2009 17:00'!dependencies	"Return a collection of package names on which this package depends."	^ dependencies! !!GRPackage methodsFor: 'accessing' stamp: 'merged 10/20/2008 09:23'!description	"Answer a short description of the package."	^ description! !!GRPackage methodsFor: 'accessing' stamp: 'lr 10/25/2009 11:26'!description: aString	description := aString! !!GRPackage methodsFor: 'accessing-repositories' stamp: 'pmm 9/12/2013 15:57'!greaseUrl	^ 'http://smalltalkhub.com/mc/Seaside/Grease11/main'! !!GRPackage methodsFor: 'initialization' stamp: 'lr 2/17/2010 15:06'!initialize	super initialize.	dependencies := OrderedCollection new.	license := #MIT! !!GRPackage methodsFor: 'testing' stamp: 'lr 10/25/2009 15:19'!isLGPL	^ self license = #LGPL! !!GRPackage methodsFor: 'testing' stamp: 'lr 10/25/2009 15:19'!isMIT	^ self license = #MIT! !!GRPackage methodsFor: 'accessing' stamp: 'lr 2/10/2010 11:18'!license	"Answer the current license of this package, by default MIT is used."	^ license! !!GRPackage methodsFor: 'accessing' stamp: 'obi 10/8/2009 07:51'!license: aSymbol	license := aSymbol! !!GRPackage methodsFor: 'accessing' stamp: 'lr 2/17/2010 15:18'!name	"Answer the name of the package. This string should be useable to identify the platform specific native package object, e.g. the Monticello package name."	^ name! !!GRPackage methodsFor: 'accessing' stamp: 'lr 10/25/2009 11:26'!name: aString	name := aString! !!GRPackage methodsFor: 'printing' stamp: 'merged 10/20/2008 09:24'!printOn: aStream	super printOn: aStream.	aStream nextPut: $(; nextPutAll: self name; nextPut: $)! !!GRPackage methodsFor: 'dependencies' stamp: 'jok 8/23/2014 10:59'!resolveWith: aDictionary	dependencies := dependencies 		collect: [ :each |			aDictionary at: each ifAbsent: [				"if Foo-Pharo-Bar fails try Foo-Pharo20-Bar and Foo-Pharo30-Bar"				(each indexOfSubCollection: '-Pharo-' startingAt: 1) ~= 0 ifTrue: [ 					"try -Pharo20-"					aDictionary at: (each copyReplaceAll: '-Pharo-' with: '-Pharo20-') ifAbsent: [						"try -Pharo30-"						aDictionary at: (each copyReplaceAll: '-Pharo-' with: '-Pharo30-') ifAbsent: [							"try -Pharo40-"							aDictionary at: (each copyReplaceAll: '-Pharo-' with: '-Pharo40-') ifAbsent: [								self error: self name printString , ' depends on unknown package ' , each printString ] ] ] ] ] ]! !!GRPackage methodsFor: 'accessing-repositories' stamp: 'pmm 9/12/2013 15:59'!seasideAddonsUrl	^ 'http://smalltalkhub.com/mc/Seaside/Seaside30Addons/main'! !!GRPackage methodsFor: 'accessing-repositories' stamp: 'pmm 9/12/2013 15:59'!seasideLGPLUrl	^ 'http://smalltalkhub.com/mc/Seaside/Seaside30LGPL/main'! !!GRPackage methodsFor: 'accessing-repositories' stamp: 'pmm 9/12/2013 15:58'!seasideUrl	^ 'http://smalltalkhub.com/mc/Seaside/Seaside31/main'! !!GRPackage methodsFor: 'accessing' stamp: 'lr 2/10/2010 11:18'!url	"Answer the base-URL of the package. This string is only meaningful for platforms that can directly access Monticello repositories."	^ url isSymbol		ifTrue: [ self perform: url ]		ifFalse: [ url ]! !!GRPackage methodsFor: 'accessing' stamp: 'lr 2/17/2010 15:18'!url: aStringOrSymbol	"Set the base-URL of the package, or a symbol referring to a method in this class that answers the URL. This setting is only meaningful for platforms that can directly access Monticello repositories."	url := aStringOrSymbol! !!GRPlatform commentStamp: 'jf 2/6/2009 16:05' prior: 34251365!The abstract platform implementation. Each platform should provide a subclass implementing any abstract methods and overriding any other methods as necessary.Default implementations should be provided here when possible/useful but default implementations MUST be valid on ALL PLATFORMS so it is rarely practical. VA Smalltalk flags sends of uknown messages so even these must be known to exist on all platforms.Common cases where default implementations *are* appropriate are where there is a standard implementation that is valid on all platforms but one or more platforms have an additional, optimized implementation that should be used instead.All classes and methods used by methods of this class should be either:  + included in the Seaside-Platform package;  + defined by the ANSI Smalltalk standard; or  + (not ideal) referenced via 'Smalltalk at: #ClassName'.!!GRPlatform class methodsFor: 'registration' stamp: 'jgf 1/25/2009 12:06'!current	^ Current! !!GRPlatform class methodsFor: 'registration' stamp: 'jf 1/21/2009 17:08'!current: aPlatform	Current := aPlatform! !!GRPlatform class methodsFor: 'registration' stamp: 'jf 9/30/2009 00:19'!select	GRPlatform current: self new! !!GRPlatform class methodsFor: 'registration' stamp: 'jf 9/30/2009 00:19'!unselect	GRPlatform current class = self ifTrue: [ GRPlatform current: nil ]! !!GRPlatform methodsFor: 'startup' stamp: 'jf 1/22/2009 02:11'!addToShutDownList: anObject	"Add anObject to the shutdown-list of the system. On shutdown the message #shutDown will be sent to anObject."	self subclassResponsibility! !!GRPlatform methodsFor: 'startup' stamp: 'jf 1/22/2009 02:10'!addToStartUpList: anObject	"Add anObject to the startup-list of the system. On startup the message #startUp will be sent to anObject."	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'jf 1/22/2009 02:11'!asMethodReturningByteArray: aByteArrayOrString named: aSymbol	"Generates the source of a method named aSymbol that returns aByteArrayOrString as a ByteArray"	self subclassResponsibility! !!GRPlatform methodsFor: 'encoding' stamp: 'pmm 8/27/2011 15:12'!base64Decode: aString	"Base64 decode the given String and answer the result as a String."	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'jf 1/22/2009 02:11'!compile: aString into: aClass classified: aSymbol	"The trick here is to be as silently a possible so that the package is not marked dirty when running WAFileLibrary test.	This also makes running tests much faster."	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'jf 1/22/2009 02:11'!contentsOfFile: aString binary: aBoolean	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'lr 4/15/2010 19:15'!convertToSmalltalkNewlines: aString	"Convert any line endings (CR, CRLF, LF) to the default platform newline."		aString isNil 		ifTrue: [ ^ nil ].	^ String streamContents: [ :writeStream |		| readStream |		readStream := aString readStream.		[ readStream atEnd ] whileFalse: [			| next |			next := readStream next.			next = Character cr				ifTrue: [					readStream peek = Character lf						ifTrue: [ readStream skip: 1 ].					writeStream nextPutAll: self newline ]				ifFalse: [					next = Character lf						ifTrue: [ writeStream nextPutAll: self newline ]						ifFalse: [ writeStream nextPut: next ] ] ] ]! !!GRPlatform methodsFor: 'exceptions' stamp: 'pmm 9/6/2014 12:17'!deprecationExceptionSet	"Answer the exception set that should considered besides WADeprecation."	^ ExceptionSet new! !!GRPlatform methodsFor: 'file library' stamp: 'NickAger 3/9/2012 11:29'!directoriesIn: aPathString	"Answer a collection of absolute paths for all the directories (no files) in the directory given by aPathString	must not include directory names that start with ."	self subclassResponsibility! !!GRPlatform methodsFor: 'transactions' stamp: 'lr 7/25/2011 19:51'!doTransaction: aBlock	"for Gemstone/S compatibility	http://gemstonesoup.wordpress.com/2007/05/10/porting-application-specific-seaside-threads-to-gemstone/	use when modifying an object from an outside thread"	^ aBlock value! !!GRPlatform methodsFor: 'file library' stamp: 'pmm 2/5/2011 09:54'!ensureExistenceOfFolder: aString	"Create a folder named aString in the image directory."	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'JohanBrichau 10/3/2014 20:02'!fileExists: aString	self subclassResponsibility ! !!GRPlatform methodsFor: 'file library' stamp: 'JohanBrichau 10/3/2014 20:00'!fileStreamOn: aString do: aBlock binary: aBoolean	self subclassResponsibility ! !!GRPlatform methodsFor: 'file library' stamp: 'pmm 2/5/2011 09:54'!filesIn: aPathString	"Answer a collection of absolute paths for all the files (no directories) in the directory given by aPathString	must not include file names that start with ."	self subclassResponsibility! !!GRPlatform methodsFor: 'processes' stamp: 'jf 2/6/2009 16:00'!isProcessTerminated: aProcess	"Return a boolean indicating whether aProcess has been terminated."		self subclassResponsibility! !!GRPlatform methodsFor: 'version info' stamp: 'jf 2/9/2010 00:57'!label	"Answer a descriptive label string for the platform implementation"		self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'pmm 8/19/2014 10:10'!localNameOf: aFilename	"Answer the local name of a file identified by an absolute file path.		Eg.	If the platform is Windwos and aFilename is 'C:\Windows\win32.dll' then it would answer 'win32.dll'.	If the platform is Unix and aFilename is '/usr/bin/vim' then it would answer 'vim'."	self subclassResponsibility! !!GRPlatform methodsFor: 'factory' stamp: 'jf 9/25/2009 16:40'!newRandom	"Answers the random number generator to be used to create session and continuation keys. Make sure it is seeded. They only methods that will be sent to it are:	  #nextInt: - should answer a random integer in the interval [1, anInteger]	  #randomFrom: - should answer a random element from the given collection		Make sure that both methods are safe under heavy concurrent load.		Used by Gemstone/S traditional Randoms which cannot be persisted.	Used by Squeak to use a secure random when avaiable."	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'lr 4/15/2010 19:13'!newline	"Answer a String with the default newline character of this platform."		self subclassResponsibility! !!GRPlatform methodsFor: 'exceptions' stamp: 'jf 1/22/2009 02:11'!openDebuggerOn: anError	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'pmm 2/5/2011 09:53'!pathSeparator	"Answer the path separator as a String, eg. '/' on Unix and '\' on Windows."	self subclassResponsibility! !!GRPlatform methodsFor: 'factory' stamp: 'lr 7/25/2011 19:51'!readWriteByteStream	"Return a ReadWriteStream on a ByteArray that stores integers 0..255		^ReadWriteStream on: ByteArray new	"	^ self subclassResponsibility! !!GRPlatform methodsFor: 'factory' stamp: 'lr 7/25/2011 19:51'!readWriteCharacterStream	"Return a ReadWriteStream on a String that stores characters		^ReadWriteStream on: String new	"	^ self subclassResponsibility! !!GRPlatform methodsFor: 'factory' stamp: 'jf 1/22/2009 02:39'!reducedConflictDictionary	"used by Gemstone/S reduced conflict classes that can be used to avoid transaction conflicts"	^ Dictionary! !!GRPlatform methodsFor: 'startup' stamp: 'jf 1/22/2009 02:11'!removeFromShutDownList: anObject	"Remove anObject from the shutdown list in the system."	self subclassResponsibility! !!GRPlatform methodsFor: 'startup' stamp: 'jf 1/22/2009 02:11'!removeFromStartUpList: anObject	"Remove anObject from the startup list in the system."	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'jf 1/22/2009 02:11'!removeSelector: aSymbol from: aClass	self subclassResponsibility! !!GRPlatform methodsFor: 'cryptography' stamp: 'jf 1/22/2009 02:11'!secureHashFor: aString	self subclassResponsibility! !!GRPlatform methodsFor: 'factory' stamp: 'jf 1/22/2009 02:10'!semaphoreClass	"used by Gemstone/S traditional Semaphores which cannot be persisted"	self subclassResponsibility! !!GRPlatform methodsFor: 'exceptions' stamp: 'jf 1/22/2009 02:11'!stackDepth	self subclassResponsibility! !!GRPlatform methodsFor: 'processes' stamp: 'jf 2/6/2009 16:00'!terminateProcess: aProcess	"Permanently terminate the process, unwinding first to execute #ensure: and #ifCurtailed: blocks."		self subclassResponsibility! !!GRPlatform methodsFor: 'version info' stamp: 'JohanBrichau 7/20/2014 17:51'!version	"Answer the Grease version"	^ (GRVersion major: 1 minor: 1 revision: 10)		yourself! !!GRPlatform methodsFor: 'version info' stamp: 'jf 2/9/2010 00:57'!versionString	^ String streamContents: [ :stream |		stream			nextPutAll: (self version greaseString);			nextPutAll: ' (';			nextPutAll: (self label);			nextPut: $) ]! !!GRPlatform methodsFor: 'factory' stamp: 'jf 1/22/2009 02:11'!weakDictionaryOfSize: aNumber	self subclassResponsibility! !!GRPlatform methodsFor: 'file library' stamp: 'pmm 8/19/2014 10:11'!write: aStringOrByteArray toFile: aFileNameString inFolder: aFolderString	"Write aStringOrByteArray to a file named aFileNameString in the folder aFolderString."	self subclassResponsibility! !!GRPlatform methodsFor: 'factory' stamp: 'pmm 8/26/2011 09:45'!writeCharacterStreamOn: aString	"String based write stream"	^ WriteStream on: aString! !!GRMappedPrinter class methodsFor: 'instance creation' stamp: 'lr 7/24/2008 11:32'!block: aBlock next: aPrinter	^ self new 		block: aBlock;		next: aPrinter;		yourself! !!GRMappedPrinter methodsFor: 'accessing' stamp: 'lr 7/24/2008 11:29'!block: aBlock	block := aBlock! !!GRMappedPrinter methodsFor: 'initialization' stamp: 'lr 2/6/2010 10:26'!initialize	super initialize.	self block: [ :value | value ]! !!GRMappedPrinter methodsFor: 'accessing' stamp: 'lr 7/24/2008 11:27'!next: aPrinter	next := aPrinter! !!GRMappedPrinter methodsFor: 'printing' stamp: 'lr 7/24/2008 11:26'!print: anObject on: aStream	next print: (block value: anObject) on: aStream! !!GRNumberPrinter commentStamp: 'pmm 2/1/2014 13:27' prior: 34252305!A GRNumberPrinter prints numbers (integers and floats) in various formats in a platform independent way.Instance Variables	accuracy:	<UndefinedObject|Float>	base:		<Integer>	delimiter:	<UndefinedObject|Character>	digits:		<UndefinedObject|Integer>	infinite:		<UndefinedObject|String>	nan:			<UndefinedObject|String>	padding:	<UndefinedObject|Character>	precision:	<Integer>	separator:	<UndefinedObject|Character>!!GRNumberPrinter class methodsFor: 'initialization' stamp: 'lr 1/23/2009 21:18'!initialize	NumbersToCharactersLowercase := '0123456789abcdefghijklmnopqrstuvwxyz'.	NumbersToCharactersUppercase := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 7/25/2008 19:13'!accuracy: aFloat	"Round towards the nearest number that is a multiple of aFloat."		accuracy := aFloat! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 7/25/2008 19:16'!base: anInteger	"The numeric base to which the number should be printed."	base := anInteger! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 2/6/2010 10:17'!characters: aString	"The characters to be used to convert a number to a string."	characters := aString! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 7/24/2008 14:36'!delimiter: aCharacter	"The delimiter to separate the integer and fraction part of the number."	delimiter := aCharacter! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 7/24/2008 11:50'!digits: anInteger	"The number of digits to be printed in the integer part."	digits := anInteger! !!GRNumberPrinter methodsFor: 'utilities' stamp: 'lr 5/13/2010 12:26'!digitsOf: aNumber base: aBaseInteger	"Answer the absolute digits of aNumber in the base aBaseInteger."	| integer stream next |	integer := aNumber truncated abs.	integer = 0 ifTrue: [ ^ '0' ].	stream := WriteStream on: (String new: 10).	[ integer > 0 ] whileTrue: [		next := integer quo: aBaseInteger.		stream nextPut: (characters 			at: 1 + integer - (next * aBaseInteger)).		integer := next ].	^ stream contents reverse! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 3/24/2008 16:19'!infinite: aString	"The string that should be displayed if the number is positive or negative infinity."		infinite := aString! !!GRNumberPrinter methodsFor: 'initialization' stamp: 'lr 2/6/2010 10:58'!initialize	super initialize.	self lowercase.	self base: 10.	self delimiter: $..	self infinite: 'Infinite'.	self nan: 'NaN'.	self padding: $ .	self precision: 0! !!GRNumberPrinter methodsFor: 'actions' stamp: 'lr 2/6/2010 10:17'!lowercase	"Use lowercase characters for numbers of base 10 and higher."	self characters: NumbersToCharactersLowercase! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 3/24/2008 16:19'!nan: aString	"The string that should be displayed if the number is not a number."		nan := aString! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 7/24/2008 11:51'!padding: aCharacter	"The padding for the integer part."	padding := aCharacter! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 7/25/2008 19:16'!precision: anInteger	"The number of digits to be printed in the fraction part."		precision := anInteger! !!GRNumberPrinter methodsFor: 'printing' stamp: 'lr 3/24/2008 16:27'!print: aNumber on: aStream	aNumber isNaN		ifTrue: [ ^ self printNaN: aNumber on: aStream ].	aNumber isInfinite 		ifTrue: [ ^ self printInfinite: aNumber on: aStream ].	precision = 0		ifTrue: [ self printInteger: aNumber on: aStream ]		ifFalse: [ self printFloat: aNumber on: aStream ]! !!GRNumberPrinter methodsFor: 'printing' stamp: 'pmm 9/15/2013 11:45'!printFloat: aNumber on: aStream	| multiplier rounded |	multiplier := base raisedTo: precision.	rounded := aNumber roundTo: (accuracy ifNil: [ multiplier reciprocal ]).	self printInteger: rounded on: aStream.	delimiter isNil		ifFalse: [ aStream nextPut: delimiter ].	self printFraction: rounded fractionPart abs * multiplier on: aStream! !!GRNumberPrinter methodsFor: 'printing' stamp: 'lr 6/4/2009 21:41'!printFraction: aNumber on: aStream	| result |	result := self		pad: (self digitsOf: aNumber rounded base: base)		left: $0 to: precision.	separator isNil		ifFalse: [ result := self separate: result left: separator ].	aStream nextPutAll: result! !!GRNumberPrinter methodsFor: 'printing' stamp: 'lr 3/24/2008 16:39'!printInfinite: aNumber on: aStream	infinite isNil		ifFalse: [ aStream nextPutAll: infinite ]! !!GRNumberPrinter methodsFor: 'printing' stamp: 'lr 7/24/2008 12:39'!printInteger: aNumber on: aStream	| result |	result := self digitsOf: aNumber integerPart base: base.	separator isNil		ifFalse: [ result := self separate: result right: separator ].	(digits isNil or: [ padding isNil ])		ifFalse: [ result := self pad: result left: padding to: digits ].	aStream nextPutAll: result! !!GRNumberPrinter methodsFor: 'printing' stamp: 'lr 3/24/2008 16:39'!printNaN: anInteger on: aStream	nan isNil		ifFalse: [ aStream nextPutAll: nan ]! !!GRNumberPrinter methodsFor: 'utilities' stamp: 'lr 7/24/2008 14:34'!separate: aString left: aCharacter	"Separate from the left side every 3 characters with aCharacter."			| size stream |	size := aString size.	stream := WriteStream on: (String new: 2 * size).	1 to: size do: [ :index |		(index ~= 1 and: [ index \\ 3 = 1 ])			ifTrue: [ stream nextPut: aCharacter ].		stream nextPut: (aString at: index) ].	^ stream contents! !!GRNumberPrinter methodsFor: 'utilities' stamp: 'lr 7/24/2008 14:34'!separate: aString right: aCharacter	"Separate from the right side every 3 characters with aCharacter."			| size stream |	size := aString size.	stream := WriteStream on: (String new: 2 * size).	1 to: size do: [ :index |		(index ~= 1 and: [ size - index \\ 3 = 2 ])			ifTrue: [ stream nextPut: aCharacter ].		stream nextPut: (aString at: index) ].	^ stream contents! !!GRNumberPrinter methodsFor: 'accessing' stamp: 'lr 7/24/2008 14:35'!separator: aCharacter	"Separator character to be used to group digits."	separator := aCharacter! !!GRNumberPrinter methodsFor: 'actions' stamp: 'lr 2/6/2010 10:17'!uppercase	"Use uppercase characters for numbers of base 10 and higher."		self characters: NumbersToCharactersUppercase! !!GROrdinalizePrinter methodsFor: 'private' stamp: 'lr 2/16/2008 19:37'!ordinalize: anInteger	^ (anInteger \\ 100 between: 11 and: 13)		ifTrue: [ 'th' ]		ifFalse: [ 			#('st' 'nd' 'rd')				at: anInteger \\ 10 				ifAbsent: [ 'th' ] ]! !!GROrdinalizePrinter methodsFor: 'printing' stamp: 'lr 2/16/2008 19:32'!print: anObject on: aStream	aStream nextPutAll: (self ordinalize: anObject integerPart)! !!GRPluggablePrinter class methodsFor: 'instance creation' stamp: 'lr 7/24/2008 13:59'!on: aBlock	^ self new block: aBlock! !!GRPluggablePrinter methodsFor: 'accessing' stamp: 'lr 7/24/2008 12:49'!block: aBlock	block := aBlock! !!GRPluggablePrinter methodsFor: 'initialization' stamp: 'lr 2/6/2010 10:15'!initialize	super initialize.	self block: [ :value | String new ]! !!GRPluggablePrinter methodsFor: 'printing' stamp: 'lr 7/24/2008 12:49'!print: anObject on: aStream	aStream nextPutAll: (block value: anObject)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'lr 7/24/2008 13:59'!abbreviatedMonthName	^ self monthName: #('Jan' 'Feb' 'Mar' 'Apr' 'May' 'Jun' 'Jul' 'Aug' 'Sep' 'Oct' 'Nov' 'Dec')! !!GRPrinter class methodsFor: 'parts-date' stamp: 'lr 7/24/2008 14:25'!abbreviatedWeekName	^ self weekName: #('Sun' 'Mon' 'Tue' 'Wed' 'Thu' 'Fri' 'Sat')! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!absOffsetHoursPadded	^ GRMappedPrinter 		block: [ :date | date offset hours abs ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!absOffsetMinutesPadded	^ GRMappedPrinter 		block: [ :date | date offset minutes abs ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-units' stamp: 'lr 2/19/2012 13:00'!binaryFileSize	^ GRUnitPrinter base: 1024 units: #('byte' 'bytes' 'KiB' 'MiB' 'GiB' 'TiB' 'PiB' 'EiB' 'ZiB' 'YiB')! !!GRPrinter class methodsFor: 'factory-http' stamp: 'lr 2/19/2012 13:01'!cookieTimestamp	"Netscape's original proposal defined an Expires header that took a date value in a fixed-length variant format in place of Max-Age: Wdy, DD-Mon-YY HH:MM:SS GMT"	^ GRMappedPrinter		block: [ :timestamp | timestamp asUTC ]		next: self abbreviatedWeekName , ', ' , self paddedDay , '-' , self abbreviatedMonthName , '-' , self paddedYear , ' ' , self isoTime , ' GMT'! !!GRPrinter class methodsFor: 'parts-units' stamp: 'lr 2/19/2012 13:00'!decimalFileSize	^ GRUnitPrinter base: 1000 units: #('byte' 'bytes' 'kB' 'MB' 'GB' 'TB' 'PB' 'EB' 'ZB' 'YB')! !!GRPrinter class methodsFor: 'parts-date' stamp: 'lr 7/24/2008 13:59'!fullMonthName	^ self monthName: #('January' 'February' 'March' 'April' 'May' 'June' 'July' 'August' 'September' 'October' 'November' 'December')! !!GRPrinter class methodsFor: 'parts-date' stamp: 'lr 7/24/2008 14:25'!fullWeekName	^ self weekName: #('Sunday' 'Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday' 'Saturday')! !!GRPrinter class methodsFor: 'factory-http' stamp: 'lr 2/19/2012 13:01'!httpDate	"Answers a printer that formats dates for HTTP1.1 (RFC 2616)"	^ self rfc1123! !!GRPrinter class methodsFor: 'factory-http' stamp: 'pmm 8/19/2014 10:06'!isoDate	"Ansers a printer that formats dates according to ISO(YYYY-MM-DD) E.g. 2003-12-24"	^ self paddedYear , $- , self paddedMonth , $- , self paddedDay! !!GRPrinter class methodsFor: 'factory-http' stamp: 'pmm 8/19/2014 10:05'!isoTime	"Ansers a printer that formats time according to ISO(HH:MM:SS) E.g. 12:23:34"		^ self paddedHour24 , $: , self paddedMinute , $: , self paddedSecond! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!monthName: anArray 	^ GRPluggablePrinter on: [ :date | anArray at: date monthIndex ]! !!GRPrinter class methodsFor: 'parts-units' stamp: 'lr 2/19/2012 13:00'!numberWithAtLeastDigits: anInteger	^ GRNumberPrinter new		padding: $0;		digits: anInteger;		yourself! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:33'!offsetSign	^ GRMappedPrinter 		block: [ :date | date offset ]		next: (GRSignPrinter new				positivePrinter: $+;				negativePrinter: $-;				yourself)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!paddedCentury	^ GRMappedPrinter 		block: [ :date | date year \\ 100 ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!paddedDay	^ GRMappedPrinter 		block: [ :date | date dayOfMonth ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!paddedHour12	^ GRMappedPrinter 		block: [ :time | (time hour - 1) \\ 12 + 1 ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!paddedHour24	^ GRMappedPrinter 		block: [ :time | time hour ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!paddedMinute	^ GRMappedPrinter 		block: [ :time | time minute ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!paddedMonth	^ GRMappedPrinter 		block: [ :date | date monthIndex ]		next: (self numberWithAtLeastDigits: 2)! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!paddedSecond	^ GRMappedPrinter 		block: [ :time | time second ]		next: (GRNumberPrinter new				padding: $0;				digits: 2)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!paddedYear	^ GRMappedPrinter 		block: [ :date | date year ]		next: (self numberWithAtLeastDigits: 4)! !!GRPrinter class methodsFor: 'factory-http' stamp: 'lr 2/19/2012 13:01'!rfc1123	"Answers a printer that formats dates for HTTP1.1 (RFC 1123). Eg.	Sun, 06 Nov 1994 08:49:37 GMT "		^ GRMappedPrinter 		block: [ :date | 			"For the purposes of HTTP, GMT is exactly equal to UTC (Coordinated Universal Time)"			date asUTC ]		next: GRSequentialPrinter new , self abbreviatedWeekName , ', ' , self paddedDay , Character space , self abbreviatedMonthName , Character space , self paddedYear , Character space , self isoTime , ' GMT'! !!GRPrinter class methodsFor: 'factory-http' stamp: 'pmm 8/19/2014 10:06'!rfc822	"Answers a printer that formats dates according to RFC 822 (email). Eg.	Sun, 31 Aug 2008 19:41:46 +0200"	^ self abbreviatedWeekName , ', ' , self paddedDay , Character space , self abbreviatedMonthName , Character space , self paddedYear , Character space , self isoTime , Character space , self offsetSign , self absOffsetHoursPadded , self absOffsetMinutesPadded! !!GRPrinter class methodsFor: 'factory-http' stamp: 'lr 2/19/2012 13:02'!rfc822WithTimeZone: aString	"Answers a privter that formats dates according to RFC 822 (email) with the given time zone String. Eg.	Sun, 31 Aug 2008 19:41:46 <aString>"	^ self abbreviatedWeekName , ', ' , self paddedDay , Character space , self abbreviatedMonthName , Character space , self paddedYear , Character space , self isoTime , Character space , aString! !!GRPrinter class methodsFor: 'factory-currency' stamp: 'jf 9/30/2009 00:33'!swissCurrency	^ GRSequentialPrinter new , 'CHF ' , GRSignPrinter new , (GRNumberPrinter new			separator: $';			precision: 2;			accuracy: 0.05;			yourself)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!unpaddedCentury	^ GRMappedPrinter 		block: [ :date | date year \\ 100 ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!unpaddedDay	^ GRMappedPrinter 		block: [ :date | date dayOfMonth ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!unpaddedHour12	^ GRMappedPrinter 		block: [ :time | (time hour - 1) \\ 12 + 1 ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!unpaddedHour24	^ GRMappedPrinter 		block: [ :time | time hour ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!unpaddedMinute	^ GRMappedPrinter 		block: [ :time | time minute ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!unpaddedMonth	^ GRMappedPrinter 		block: [ :date | date monthIndex ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'parts-time' stamp: 'jf 9/30/2009 00:32'!unpaddedSecond	^ GRMappedPrinter 		block: [ :time | time second ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!unpaddedYear	^ GRMappedPrinter 		block: [ :date | date year ]		next: GRNumberPrinter new! !!GRPrinter class methodsFor: 'factory-currency' stamp: 'jf 9/30/2009 00:33'!usCurrency	^ GRSignPrinter new , $$ , (GRNumberPrinter new			separator: $,;			precision: 2;			yourself)! !!GRPrinter class methodsFor: 'parts-date' stamp: 'jf 9/30/2009 00:32'!weekName: anArray 	^ GRPluggablePrinter on: [ :date | anArray at: date dayOfWeek ]! !!GRPrinter methodsFor: 'operators' stamp: 'jf 9/30/2009 00:33'!, aPrinter 	^ GRSequentialPrinter new , self , aPrinter! !!GRPrinter methodsFor: 'utilities' stamp: 'jok 1/26/2010 09:56'!pad: aString center: aCharacter to: anInteger	"Pad to the center of aString with aCharacter to at least anInteger characters."	| result index |	anInteger <= aString size		ifTrue: [ ^ aString ].	index := (anInteger - aString size) // 2.	result := (String new: anInteger) atAllPut: aCharacter.	result		replaceFrom: index + 1		to: index + aString size		with: aString		startingAt: 1.	^ result! !!GRPrinter methodsFor: 'utilities' stamp: 'jok 1/26/2010 09:56'!pad: aString left: aCharacter to: anInteger	"Pad to the left side of aString with aCharacter to at least anInteger characters."	| result |	anInteger <= aString size		ifTrue: [ ^ aString ].	result := (String new: anInteger) atAllPut: aCharacter.	result		replaceFrom: anInteger - aString size + 1		to: anInteger		with: aString		startingAt: 1.	^ result! !!GRPrinter methodsFor: 'utilities' stamp: 'jok 1/26/2010 09:56'!pad: aString right: aCharacter to: anInteger	"Pad to the right side of aString with aCharacter to at least anInteger characters."	| result |	anInteger <= aString size		ifTrue: [ ^ aString ].	result := (String new: anInteger) atAllPut: aCharacter.	result		replaceFrom: 1		to: aString size		with: aString		startingAt: 1.	^ result! !!GRPrinter methodsFor: 'printing' stamp: 'lr 2/7/2008 10:37'!print: anObject	^ String streamContents: [ :stream | self print: anObject on: stream ]! !!GRPrinter methodsFor: 'printing' stamp: 'lr 7/25/2008 19:51'!print: anObject on: aStream	"Subclasses override this method to produce some output."! !!GRSequentialPrinter methodsFor: 'operators' stamp: 'lr 2/7/2008 11:33'!, aConverter	parts add: aConverter! !!GRSequentialPrinter methodsFor: 'initialization' stamp: 'lr 2/7/2008 10:28'!initialize	super initialize.	parts := OrderedCollection new! !!GRSequentialPrinter methodsFor: 'printing' stamp: 'lr 2/7/2008 10:29'!print: anObject on: aStream 	parts do: [ :each | each print: anObject on: aStream ]! !!GRSignPrinter methodsFor: 'initialization' stamp: 'lr 2/6/2010 10:15'!initialize	super initialize.	self negativePrinter: $-.	self positivePrinter: nil! !!GRSignPrinter methodsFor: 'accessing' stamp: 'lr 2/7/2008 13:28'!negativePrinter: aPrinter	"The printer to be used when the number is negative."		negativePrinter := aPrinter! !!GRSignPrinter methodsFor: 'accessing' stamp: 'lr 2/7/2008 13:28'!positivePrinter: aPrinter	"The printer to be used when the number is zero or positive."		positivePrinter := aPrinter! !!GRSignPrinter methodsFor: 'printing' stamp: 'lr 2/7/2008 13:27'!print: anObject on: aStream 	anObject negative		ifTrue: [ negativePrinter print: anObject on: aStream ]		ifFalse: [ positivePrinter print: anObject on: aStream ]! !!GRStringPrinter methodsFor: 'accessing' stamp: 'lr 1/23/2009 21:40'!character: aCharacter	"The character to pad the string with."		character := aCharacter! !!GRStringPrinter methodsFor: 'initialization' stamp: 'lr 2/6/2010 10:11'!initialize	super initialize.	self character: $ ; length: nil.	self trimNone; padNone! !!GRStringPrinter methodsFor: 'accessing' stamp: 'lr 1/23/2009 22:00'!length: anInteger	"The maximal size of the string, or the size to pad to."	length := anInteger! !!GRStringPrinter methodsFor: 'padding' stamp: 'lr 1/23/2009 22:01'!padCenter	"Pad to the center."		pad := #pad:center:to:! !!GRStringPrinter methodsFor: 'padding' stamp: 'lr 1/23/2009 22:02'!padLeft	"Pad to the left."		pad := #pad:left:to:! !!GRStringPrinter methodsFor: 'padding' stamp: 'lr 2/6/2010 10:11'!padNone	"Do not pad the input."		pad := nil! !!GRStringPrinter methodsFor: 'padding' stamp: 'lr 1/23/2009 22:01'!padRight	"Pad to the right."		pad := #pad:right:to:! !!GRStringPrinter methodsFor: 'printing' stamp: 'lr 2/6/2010 10:10'!print: anObject on: aStream 	| string |	string := anObject greaseString.	trim isNil		ifFalse: [ string := string perform: trim ].	length isNil ifFalse: [		length < string size 			ifTrue: [ string := string copyFrom: 1to: length ].		(pad isNil or: [ character isNil ])			ifFalse: [ string := self perform: pad with: string with: character with: length ] ].	aStream nextPutAll: string! !!GRStringPrinter methodsFor: 'trimming' stamp: 'lr 1/23/2009 21:59'!trimBoth	"Trim to the left and to the right."	trim := #trimBoth! !!GRStringPrinter methodsFor: 'trimming' stamp: 'lr 1/23/2009 21:59'!trimLeft	"Trim to the left and to the right."	trim := #trimLeft! !!GRStringPrinter methodsFor: 'trimming' stamp: 'lr 2/6/2010 10:11'!trimNone	"Do not trim the input."	trim := nil! !!GRStringPrinter methodsFor: 'trimming' stamp: 'lr 1/23/2009 21:59'!trimRight	"Trim to the left and to the right."	trim := #trimRight! !!GRUnitPrinter class methodsFor: 'instance creation' stamp: 'lr 9/22/2008 23:34'!base: anInteger units: anArray	^ self new 		base: anInteger;		units: anArray;		yourself! !!GRUnitPrinter methodsFor: 'accessing' stamp: 'lr 9/22/2008 23:27'!base: anInteger	base := anInteger! !!GRUnitPrinter methodsFor: 'accessing' stamp: 'lr 2/7/2008 13:23'!fractionPrinter: aPrinter	fractionPrinter := aPrinter! !!GRUnitPrinter methodsFor: 'initialization' stamp: 'lr 2/6/2010 10:07'!initialize	super initialize.	self integerPrinter: (GRNumberPrinter new		precision: 0;		yourself).	self fractionPrinter: (GRNumberPrinter new		precision: 1;		yourself)! !!GRUnitPrinter methodsFor: 'accessing' stamp: 'lr 2/7/2008 13:23'!integerPrinter: aPrinter	integerPrinter := aPrinter! !!GRUnitPrinter methodsFor: 'printing' stamp: 'lr 9/22/2008 23:28'!print: anObject on: aStream	anObject = 1		ifTrue: [ ^ self print: anObject unit: units first on: aStream ].	units allButFirst		inject: anObject asFloat		into: [ :value :each |			value < base				ifFalse: [ value / base ]				ifTrue: [ ^ self print: value unit: each on: aStream ] ]! !!GRUnitPrinter methodsFor: 'printing' stamp: 'lr 9/22/2008 23:36'!print: aNumber unit: aString on: aStream	(units first = aString or: [ units second = aString ])		ifTrue: [ integerPrinter print: aNumber on: aStream ]		ifFalse: [ fractionPrinter print: aNumber on: aStream ].	aStream nextPut: $ ; nextPutAll: aString! !!GRUnitPrinter methodsFor: 'accessing' stamp: 'lr 9/22/2008 23:27'!units: anArray	units := anArray! !!GRSmallDictionary commentStamp: 'jf 2/15/2010 15:51' prior: 34252794!I am an implementation of a dictionary. Compared to other dictionaries I am very efficient for small sizes, speed- and space-wise. I also mantain the order in which elements are added when iterating. My implementation features some ideas from the RefactoringBrowser.!!GROrderedMultiMap commentStamp: 'jf 2/15/2010 16:04' prior: 34253126!I am an implementation of an ordered multi-map. I allow multiple values to be associated with the same key and maintain the order of addition. #at: and its derivatives all operate on the first matching key, while #allAt: returns the complete list of values for a key in the order they were added.!!GROrderedMultiMap methodsFor: 'accessing' stamp: 'lr 7/25/2011 19:52'!add: anAssociation	self privateAt: anAssociation key put: anAssociation value.	^ anAssociation! !!GROrderedMultiMap methodsFor: 'accessing' stamp: 'jf 2/15/2010 15:39'!allAt: aKey	^ Array streamContents: [ :stream |		1 to: size do: [ :index |			(keys at: index) = aKey				ifTrue: [ stream nextPut: (values at: index) ] ] ]! !!GROrderedMultiMap methodsFor: 'accessing' stamp: 'jf 2/15/2010 15:39'!allAt: aKey ifAbsent: absentBlock	| results |	results := self allAt: aKey.	^ results isEmpty		ifTrue: [ absentBlock value ]		ifFalse: [ results ]! !!GROrderedMultiMap methodsFor: 'accessing' stamp: 'jf 2/15/2010 13:24'!at: aKey add: aValue	"Add an association between aKey and aValue. Do not replace existing	values with the same key."		^ self privateAt: aKey put: aValue! !!GROrderedMultiMap methodsFor: 'accessing' stamp: 'jf 2/15/2010 14:43'!removeKey: aKey ifAbsent: aBlock	"Remove aKey from the receiver, evaluate aBlock if the element is missing."	"This is inefficient and could be optimized."	| removed |	removed := Array streamContents: [ :stream |		| index |		[ (index := self findIndexFor: aKey) = 0 ] whileFalse: [			stream nextPut: (self removeIndex: index) ] ].	^ removed isEmpty		ifTrue: [ aBlock value ]		ifFalse: [ removed ]! !!GRSmallDictionary class methodsFor: 'instance creation' stamp: 'lr 1/24/2008 12:34'!new	^ self new: 3! !!GRSmallDictionary class methodsFor: 'instance creation' stamp: 'jf 3/13/2009 18:19'!new: anInteger	^ self basicNew initialize: anInteger; yourself! !!GRSmallDictionary class methodsFor: 'instance creation' stamp: 'jf 2/15/2010 22:50'!withAll: aDictionary	^ (self new: aDictionary size)		addAll: aDictionary;		yourself! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 7/25/2011 19:51'!add: anAssociation	self at: anAssociation key put: anAssociation value.	^ anAssociation! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'jf 2/15/2010 22:56'!addAll: aDictionary	aDictionary keysAndValuesDo: [ :key :value | self add: key -> value ].	^ aDictionary! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!associations	"Answer a Collection containing the receiver's associations."	| result |	result := WriteStream on: (Array new: self size).	self associationsDo: [ :assoc | result nextPut: assoc ].	^ result contents! !!GRSmallDictionary methodsFor: 'enumerating' stamp: 'lr 8/20/2007 13:45'!associationsDo: aBlock	self keysAndValuesDo: [ :key :value | aBlock value: key -> value ]! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey	"Answer the value associated with aKey. Raise an exception, if no such key is defined."	^ self at: aKey ifAbsent: [ self errorKeyNotFound ]! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey ifAbsent: aBlock	"Answer the value associated with aKey. Evaluate aBlock, if no such key is defined."	| index |	index := self findIndexFor: aKey.	^ index = 0		ifFalse: [ values at: index ]		ifTrue: [ aBlock value ]! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey ifAbsentPut: aBlock	"Answer the value associated with aKey. Evaluate aBlock, if no such key is defined and store the return value."	| index |	index := self findIndexFor: aKey.	^ index = 0		ifFalse: [ values at: index ]		ifTrue: [ self privateAt: aKey put: aBlock value ]! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey ifPresent: aBlock	"Lookup aKey in the receiver. If it is present, answer the value of evaluating the given block with the value associated with the key. Otherwise, answer nil."	| index |	index := self findIndexFor: aKey.	^ index = 0 ifFalse: [ aBlock value: (values at: index) ]! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 10/28/2007 14:42'!at: aKey put: aValue	"Set the value of aKey to be aValue."	| index |	index := self findIndexFor: aKey.	^ index = 0		ifFalse: [ values at: index put: aValue ]		ifTrue: [ self privateAt: aKey put: aValue ]! !!GRSmallDictionary methodsFor: 'enumerating' stamp: 'jf 12/29/2009 20:38'!do: aBlock	1 to: size do: [ :index | aBlock value: (values at: index) ]! !!GRSmallDictionary methodsFor: 'private' stamp: 'lr 7/12/2007 13:18'!errorKeyNotFound	self error: 'Key not found'! !!GRSmallDictionary methodsFor: 'private' stamp: 'lr 10/28/2007 14:42'!findIndexFor: aKey	1 to: size do: [ :index |		(keys at: index) = aKey			ifTrue: [ ^ index ] ].	^ 0! !!GRSmallDictionary methodsFor: 'private' stamp: 'lr 6/6/2007 19:12'!grow	| newKeys newValues |	newKeys := Array new: 2 * size.	newValues := Array new: 2 * size.	1 to: size do: [ :index |		newKeys at: index put: (keys at: index).		newValues at: index put: (values at: index) ].	keys := newKeys.	values := newValues! !!GRSmallDictionary methodsFor: 'testing' stamp: 'lr 10/28/2007 14:42'!includesKey: aKey	"Answer whether the receiver has a key equal to aKey."	^ (self findIndexFor: aKey) ~= 0! !!GRSmallDictionary methodsFor: 'initialization' stamp: 'jf 3/13/2009 17:48'!initialize: anInteger	self initialize.	size := 0.	keys := Array new: anInteger.	values := Array new: anInteger! !!GRSmallDictionary methodsFor: 'testing' stamp: 'jf 2/15/2010 15:47'!isCollection	^ true! !!GRSmallDictionary methodsFor: 'testing' stamp: 'lr 7/9/2007 08:13'!isEmpty	^ size = 0! !!GRSmallDictionary methodsFor: 'enumerating' stamp: 'lr 7/9/2007 10:37'!keys	^ keys copyFrom: 1 to: size! !!GRSmallDictionary methodsFor: 'enumerating' stamp: 'lr 6/7/2007 08:04'!keysAndValuesDo: aBlock	1 to: size do: [ :index | aBlock value: (keys at: index) value: (values at: index) ]! !!GRSmallDictionary methodsFor: 'enumerating' stamp: 'lr 8/17/2007 11:52'!keysDo: aBlock	1 to: size do: [ :each | aBlock value: (keys at: each) ]! !!GRSmallDictionary methodsFor: 'copying' stamp: 'lr 7/9/2007 07:50'!postCopy	super postCopy.	keys := keys copy.	values := values copy! !!GRSmallDictionary methodsFor: 'printing' stamp: 'pmm 1/22/2012 16:32'!printOn: aStream	super printOn: aStream.		aStream nextPut: $(.	self size <= 100		ifTrue: [			| first |			first := true.			self keysAndValuesDo: [ :key :value |				"keysAndValuesDo:separatedBy: would be nice"				first					ifTrue: [ first := false ]					ifFalse: [ aStream space ].				aStream					print: key;					nextPutAll: '->';									print: value ] ]		ifFalse: [			aStream				nextPutAll: 'size ';				print: self size ].	aStream nextPut: $)	! !!GRSmallDictionary methodsFor: 'private' stamp: 'lr 6/6/2007 19:28'!privateAt: aKey put: aValue	size = keys size ifTrue: [ self grow ].	keys at: (size := size + 1) put: aKey.	^ values at: size put: aValue! !!GRSmallDictionary methodsFor: 'private' stamp: 'jf 2/15/2010 14:33'!removeIndex: index	| value |	value := values at: index.	index to: size - 1 do:			[ :i | 			keys at: i put: (keys at: i + 1).			values at: i put: (values at: i + 1) ].	keys at: size put: nil.	values at: size put: nil.	size := size - 1.	^ value! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 7/12/2007 13:18'!removeKey: aKey	"Remove aKey from the receiver, raise an exception if the element is missing."	^ self removeKey: aKey ifAbsent: [ self errorKeyNotFound ]! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'jf 2/15/2010 14:40'!removeKey: aKey ifAbsent: aBlock	"Remove aKey from the receiver, evaluate aBlock if the element is missing."	| index |	index := self findIndexFor: aKey.	index = 0 ifTrue: [ ^ aBlock value ].	^ self removeIndex: index! !!GRSmallDictionary methodsFor: 'accessing' stamp: 'lr 7/9/2007 10:38'!size	^ size! !!GRSmallDictionary methodsFor: 'enumerating' stamp: 'lr 7/9/2007 10:38'!values	^ values copyFrom: 1 to: size! !!GRVersion commentStamp: 'lr 2/19/2012 12:57' prior: 34253480!I model version numbers. I am comparable and I define a natural order.!!GRVersion class methodsFor: 'instance creation' stamp: 'jf 2/8/2010 23:14'!major: majorInteger	^ self major: majorInteger minor: nil! !!GRVersion class methodsFor: 'instance creation' stamp: 'jf 2/8/2010 23:14'!major: majorInteger minor: minorInteger	^ self major: majorInteger minor: minorInteger revision: nil! !!GRVersion class methodsFor: 'instance creation' stamp: 'jf 2/8/2010 23:08'!major: majorInteger minor: minorInteger revision: revisionInteger	^ self basicNew		initializeWithMajor: majorInteger minor: minorInteger revision: revisionInteger;		yourself! !!GRVersion class methodsFor: 'instance creation' stamp: 'jf 2/9/2010 01:01'!new	^ self major: 1! !!GRVersion methodsFor: 'comparing' stamp: 'jf 2/9/2010 00:18'!< otherVersion	(major < otherVersion major) ifTrue: [ ^ true ].	(otherVersion major < major) ifTrue: [ ^ false ].	((minor ifNil: [ 0 ]) < (otherVersion minor ifNil: [ 0 ])) ifTrue: [ ^ true ].	((otherVersion minor ifNil: [ 0 ]) < (minor ifNil: [ 0 ])) ifTrue: [ ^ false ].	((revision ifNil: [ 0 ]) < (otherVersion revision ifNil: [ 0 ])) ifTrue: [ ^ true ].	((otherVersion revision ifNil: [ 0 ]) < (revision ifNil: [ 0 ])) ifTrue: [ ^ false ].	(stageLabel = otherVersion stage) ifTrue: [		^ ((stageNumber ifNil: [ 1 ]) < (otherVersion stageNumber ifNil: [ 1 ])) ].	stageLabel isNil ifTrue: [ ^ false ].	otherVersion stage isNil ifTrue: [ ^ true ].	^ stageLabel < otherVersion stage		! !!GRVersion methodsFor: 'comparing' stamp: 'jf 2/9/2010 00:06'!<= otherVersion	^ (self > otherVersion) not! !!GRVersion methodsFor: 'comparing' stamp: 'jf 2/9/2010 00:16'!= otherVersion	^ (major = otherVersion major) and: [		((minor ifNil: [ 0 ]) = (otherVersion minor ifNil: [ 0 ])) and: [		((revision ifNil: [ 0 ] ) = (otherVersion revision ifNil: [ 0 ])) and: [		(stageLabel = otherVersion stage) and: [		(stageNumber ifNil: [ 1 ]) = (otherVersion stageNumber ifNil: [ 1 ]) ] ] ] ]! !!GRVersion methodsFor: 'comparing' stamp: 'jf 2/9/2010 00:07'!> otherVersion	^ otherVersion < self! !!GRVersion methodsFor: 'comparing' stamp: 'jf 2/9/2010 00:07'!>= otherVersion	^ (self < otherVersion) not! !!GRVersion methodsFor: 'convenience' stamp: 'jf 2/8/2010 23:18'!beAlpha	self beAlpha: nil! !!GRVersion methodsFor: 'convenience' stamp: 'jf 2/8/2010 23:18'!beAlpha: anInteger	self stage: #alpha number: anInteger! !!GRVersion methodsFor: 'convenience' stamp: 'jf 2/8/2010 23:18'!beBeta	self beBeta: nil! !!GRVersion methodsFor: 'convenience' stamp: 'jf 2/8/2010 23:18'!beBeta: anInteger	self stage: #beta number: anInteger! !!GRVersion methodsFor: 'convenience' stamp: 'jf 2/9/2010 00:35'!beFinal	self stage: nil number: nil! !!GRVersion methodsFor: 'convenience' stamp: 'jf 5/22/2010 23:38'!beReleaseCandidate	self beReleaseCandidate: nil! !!GRVersion methodsFor: 'convenience' stamp: 'jf 5/22/2010 23:37'!beReleaseCandidate: anInteger	self stage: #rc number: anInteger! !!GRVersion methodsFor: 'converting' stamp: 'pmm 1/22/2012 16:32'!greaseString	^ String streamContents: [ :stream |		stream nextPutAll: major greaseString.		stream nextPut: $..		stream nextPutAll: (minor ifNil: [ 0 ]) greaseString.		revision isNil ifFalse: [			stream nextPut: $..			stream nextPutAll: revision greaseString ].		stageLabel isNil ifFalse: [			stream nextPutAll: stageLabel greaseString.			stageNumber isNil ifFalse: [ stream nextPutAll: stageNumber greaseString ] ] ]! !!GRVersion methodsFor: 'comparing' stamp: 'lr 2/16/2010 20:55'!hash	^ (major hash bitXor: minor hash) bitXor: revision hash! !!GRVersion methodsFor: 'initialization' stamp: 'jf 2/8/2010 23:08'!initializeWithMajor: majorInteger minor: minorInteger revision: revisionInteger	self initialize.	major := majorInteger.	minor := minorInteger.	revision := revisionInteger! !!GRVersion methodsFor: 'testing' stamp: 'jf 2/9/2010 00:34'!isAlpha	^ stageLabel = #alpha! !!GRVersion methodsFor: 'testing' stamp: 'jf 2/9/2010 00:34'!isBeta	^ stageLabel = #beta! !!GRVersion methodsFor: 'testing' stamp: 'jf 2/9/2010 00:34'!isFinal	^ stageLabel isNil! !!GRVersion methodsFor: 'testing' stamp: 'jf 5/22/2010 23:38'!isReleaseCandidate	^ stageLabel = #rc! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/8/2010 23:16'!major	^ major! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/8/2010 23:16'!major: anInteger	major := anInteger! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/8/2010 23:16'!minor	^ minor! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/8/2010 23:17'!minor: anInteger	minor := anInteger! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/8/2010 23:16'!revision	^ revision! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/8/2010 23:17'!revision: anInteger	revision := anInteger! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/9/2010 00:01'!stage	^ stageLabel! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/8/2010 23:17'!stage: aSymbol number: anInteger	stageLabel := aSymbol.	stageNumber := anInteger! !!GRVersion methodsFor: 'accessing' stamp: 'jf 2/9/2010 00:01'!stageNumber	^ stageNumber! !!Object methodsFor: '*grease-core' stamp: 'jf 9/30/2009 01:02'!greaseDeprecatedApi: apiString details: detailsString 	GRDeprecatedApiNotification new		details: detailsString;		signal: apiString! !!UndefinedObject methodsFor: '*grease-core' stamp: 'lr 2/7/2008 13:13'!print: anObject on: aStream! !!Integer methodsFor: '*grease-core' stamp: 'jf 9/30/2009 01:04'!greaseInteger	^ self! !!Integer methodsFor: '*grease-core' stamp: 'jf 9/30/2009 00:37'!pluralize: aSingularString 	^ self 		pluralize: aSingularString		with: (GRInflector pluralize: aSingularString)! !!Integer methodsFor: '*grease-core' stamp: 'lr 1/30/2008 22:39'!pluralize: aSingularString with: aPluralString	^ self printString , ' ' , (self abs = 1 ifTrue: [ aSingularString ] ifFalse: [ aPluralString ])! !!String methodsFor: '*grease-core' stamp: 'lr 10/25/2009 11:19'!excerpt: aString	"Answer an excerpt of the receiver that matches the first occurence of aString. If aString isn't found, nil is answered."		^ self excerpt: aString radius: 100! !!String methodsFor: '*grease-core' stamp: 'lr 10/25/2009 11:19'!excerpt: aString radius: anInteger	"Answer an excerpt of the receiver that matches the first occurence of aString. The radius anInteger expands the excerpt on each side of the first occurrence by the number of characters defined in radius. If aString isn't found, nil is answered."		^ self excerpt: aString radius: anInteger ellipsis: '...'! !!String methodsFor: '*grease-core' stamp: 'jf 12/17/2009 10:49'!excerpt: aString radius: anInteger ellipsis: anEllipsisString	"Answer an excerpt of the receiver that matches the first occurence of aString. The radius anInteger expands the excerpt on each side of the first occurrence by the number of characters defined in radius. If aString isn't found, nil is answered."	| index start stop |	(index := self indexOfSubCollection: aString) = 0		ifTrue: [ ^ nil ].	start := index - anInteger max: 1.	stop := index + anInteger + aString size - 1 min: self size.	^ (start > 1 ifTrue: [ anEllipsisString ] ifFalse: [ '' ]) ,		(self copyFrom: start to: stop) ,	  	(stop < self size ifTrue: [ anEllipsisString ] ifFalse: [ '' ])! !!String methodsFor: '*grease-core' stamp: 'pmm 12/26/2010 21:46'!greaseInteger	"Convert the receiver to an integer, answer nil if this is not a number."	| number stream negated char |	number := nil.	stream := self readStream.	negated := stream peek = $-.	negated ifTrue: [ stream next ].	[ stream atEnd not and: [ (char := stream next) isDigit ] ] whileTrue: [		number := (number isNil  ifTrue: [ 0 ]ifFalse: [ 10 * number ])			+ (char greaseInteger - $0 greaseInteger) ].	^ (number isNil or: [ negated not ]) 		ifFalse: [ number negated ]		ifTrue: [ number ]! !!String methodsFor: '*grease-core' stamp: 'jf 9/30/2009 00:37'!pluralize	^ GRInflector pluralize: self! !!String methodsFor: '*grease-core' stamp: 'lr 7/24/2008 18:19'!print: anObject on: aStream	aStream nextPutAll: self! !!String methodsFor: '*grease-core' stamp: 'lr 10/25/2009 11:17'!truncate	"Truncate the receiver to 30 characters."		^ self truncate: 30! !!String methodsFor: '*grease-core' stamp: 'lr 10/25/2009 11:17'!truncate: anInteger	"Truncate the receiver to anInteger characters."		^ self truncate: anInteger ellipsis: '...'! !!String methodsFor: '*grease-core' stamp: 'lr 2/7/2008 09:22'!truncate: anInteger ellipsis: aString	"Truncate the receiver to anInteger characters and append aString as ellipsis if necessary."	^ anInteger < self size		ifTrue: [ (self copyFrom: 1 to: anInteger) , aString ]		ifFalse: [ self copy ]! !"Grease-Core"!!GRPharoLatin1Codec commentStamp: '<historical>' prior: 0!A GRPharoLatin1Codec is a WACodec optimized for ISO-8859-1 (direct byte to character mapping).!!GRPharoUtf8Codec commentStamp: 'pmm 2/20/2009 12:51' prior: 0!A WAUtf8Codec is a WACodec optimized for UTF-8.!!GRWorkingWriteStream commentStamp: 'pmm 8/25/2011 18:30' prior: 0!I'm a work around for bugs in the Pharo stream classes.!!GRPharoPlatform commentStamp: 'pmm 6/1/2008 01:03' prior: 0!A WASqueakPlatform is the Squeak implementation of SeasidePlatformSupport, the Seaside class that provides functionality that can not be implemented in a platform independent way.!!GRPharoLatin1CodecStream commentStamp: '<historical>' prior: 0!A GRPharoLatin1CodecStream is a WACodecStream optimized for ISO-8859-1 (direct byte to character mapping).!!GRPharoConverterCodecStream commentStamp: 'pmm 6/25/2012 20:22' prior: 0!A WAConverterCodecStream is a WACodec stream around a TextConverter. It is always in text mode.Instance Variables	converter:		<TextConverter>converter	- the TextConverter used to do the encoding conversion!!GRPharoUtf8CodecStream commentStamp: 'pmm 2/20/2009 12:27' prior: 0!A WAUtf8CodecStream is a WACodecStream optimized for UTF-8 performance in the case where most of the characters are ASCII.!!Interval methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 2/6/2010 03:25'!any	"#first (used by SequenceableCollection>>anyOne) is an accessor of	Interval and does not error on an empty Interval."		^ self at: 1! !!SocketStream methodsFor: '*Grease-Pharo30-Core' stamp: 'pmm 5/23/2010 08:17'!greaseNext: anInteger putAll: aCollection startingAt: startIndex	"Put a String or a ByteArray onto the stream starting at the given position.	Currently a large collection will allocate a large buffer."	| toPut |	anInteger = 0 ifTrue: [		^ aCollection ].	toPut := binary ifTrue: [ aCollection asByteArray ] ifFalse: [ aCollection asString ].	self adjustOutBuffer: anInteger.	outBuffer replaceFrom: outNextToWrite to: outNextToWrite + anInteger - 1 with: toPut startingAt: startIndex.	outNextToWrite := outNextToWrite + anInteger.	self checkFlush! !!Character methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 9/30/2009 01:04'!greaseInteger	"Answer an unicode code point of the receiver."	^ self charCode! !!GRSmallDictionary methodsFor: '*Grease-Pharo30-Core' stamp: 'lr 7/25/2011 19:51'!customizeExplorerContents	^ true! !!GRSmallDictionary methodsFor: '*Grease-Pharo30-Core' stamp: 'lr 7/25/2011 19:51'!explorerContents	| contents |		contents := OrderedCollection new.	self keysAndValuesDo: [ :key :value |		contents add: (ObjectExplorerWrapper			with: value			name: (key printString contractTo: 32)			model: self) ].	^ contents! !!GRSmallDictionary methodsFor: '*Grease-Pharo30-Core' stamp: 'lr 7/25/2011 19:51'!hasContentsInExplorer	^ true! !!GRPharoLatin1Codec commentStamp: '<historical>' prior: 34330342!A GRPharoLatin1Codec is a WACodec optimized for ISO-8859-1 (direct byte to character mapping).!!GRPharoLatin1Codec class methodsFor: 'private' stamp: 'pmm 8/16/2010 00:36'!basicForEncoding: aString	(self supportsEncoding: aString)		ifFalse: [ self unsupportedEncoding: aString ].	^ self basicNew initializeWithName: aString! !!GRPharoLatin1Codec class methodsFor: 'accessing' stamp: 'lr 7/25/2011 19:46'!codecs	^ Array with: (self basicForEncoding: 'iso-8859-1')! !!GRPharoLatin1Codec class methodsFor: 'private' stamp: 'lr 7/25/2011 19:46'!supportedEncodingNames	^ #('iso-8859-1' 'ISO-8859-1' 'latin-1' 'latin1')! !!GRPharoLatin1Codec class methodsFor: 'private' stamp: 'pmm 8/16/2010 00:36'!supportsEncoding: aString	"Answer whether the the given encoding name is supported."	^ self supportedEncodingNames includes: aString! !!GRPharoLatin1Codec methodsFor: 'conversion' stamp: 'pmm 8/16/2010 09:20'!decode: aStringOrByteArray	"Overridden for efficencey."	^ aStringOrByteArray asString! !!GRPharoLatin1Codec methodsFor: 'conversion' stamp: 'pmm 8/16/2010 00:32'!decoderFor: aReadStream 	"wrap to avoid String vs ByteArray issues"	^ GRPharoLatin1CodecStream on: aReadStream! !!GRPharoLatin1Codec methodsFor: 'conversion' stamp: 'pmm 8/16/2010 00:32'!encoderFor: aWriteStream 	"wrap to avoid String vs ByteArray issues"	^ GRPharoLatin1CodecStream on: aWriteStream! !!GRPharoLatin1Codec methodsFor: 'initialization' stamp: 'pmm 8/16/2010 00:35'!initializeWithName: aString 	self initialize.	name := aString.! !!GRPharoLatin1Codec methodsFor: 'accessing' stamp: 'pmm 8/16/2010 00:32'!name	^ name! !!GRPharoGenericCodec class methodsFor: 'private' stamp: 'pmm 6/28/2009 15:43'!basicForEncoding: aString	(self supportsEncoding: aString)		ifFalse: [ self unsupportedEncoding: aString ].	^ self basicNew initializeWithName: aString! !!GRPharoGenericCodec class methodsFor: 'accessing' stamp: 'pmm 8/16/2010 00:19'!codecs	^ (TextConverter allEncodingNames		select:  [ :each | 			"exclude UFT-8 which is handeled by WAUtf8Codec"			self supportsEncoding: each ])		collect: [ :each |			self basicForEncoding: each greaseString ]! !!GRPharoGenericCodec class methodsFor: 'private' stamp: 'lr 7/25/2011 19:46'!supportedEncodingNames	"answers the names of the encodings supported by this class"	^ TextConverter allEncodingNames		removeAllFoundIn: GRPharoLatin1Codec supportedEncodingNames;		removeAllFoundIn: UTF8TextConverter encodingNames;		yourself! !!GRPharoGenericCodec class methodsFor: 'testing' stamp: 'pmm 6/28/2009 16:43'!supportsEncoding: aString	"Answer whether the the given encoding name is supported."	^ self supportedEncodingNames includes: aString! !!GRPharoGenericCodec methodsFor: 'private' stamp: 'lr 7/25/2011 19:51'!converter	^ TextConverter newForEncoding: self name! !!GRPharoGenericCodec methodsFor: 'conversion' stamp: 'lr 2/7/2009 12:52'!decoderFor: aStream	^ self encoderFor: aStream! !!GRPharoGenericCodec methodsFor: 'conversion' stamp: 'jf 9/30/2009 00:46'!encoderFor: aStream 	^ GRPharoConverterCodecStream 		on: aStream		converter: self converter! !!GRPharoGenericCodec methodsFor: 'initialization' stamp: 'pmm 8/16/2010 11:52'!initializeWithName: aString 	self initialize.	name := aString.	urlCodec := (#('iso-8859-15' 'cp-1252') includes: aString) 		ifFalse: [ GRCodec forEncoding: 'utf-8' ]		ifTrue: [ self ]! !!GRPharoGenericCodec methodsFor: 'accessing' stamp: 'lr 2/7/2009 10:16'!name	^ name! !!GRPharoGenericCodec methodsFor: 'accessing' stamp: 'lr 2/7/2009 12:36'!url	"RFC 3986: When a new URI scheme defines a component that represents textual data consisting of characters from the Universal Character Set [UCS], the data should first be encoded as octets according to the UTF-8 character encoding."	^ urlCodec! !!GRPharoUtf8Codec commentStamp: 'pmm 2/20/2009 12:51' prior: 34330502!A WAUtf8Codec is a WACodec optimized for UTF-8.!!GRPharoUtf8Codec class methodsFor: 'private' stamp: 'lr 7/25/2011 19:46'!basicForEncoding: aString	^ self new! !!GRPharoUtf8Codec class methodsFor: 'accessing' stamp: 'lr 7/25/2011 19:46'!codecs	^ Array with: self new! !!GRPharoUtf8Codec class methodsFor: 'testing' stamp: 'lr 7/25/2011 19:46'!supportsEncoding: aString	^ (#('utf-8' 'UTF-8') includes: aString) or: [ UTF8TextConverter encodingNames includes: aString ]! !!GRPharoUtf8Codec methodsFor: 'decoding' stamp: 'pmm 2/17/2012 19:45'!decode: aString	"Convert the given string from UTF-8 using the fast path if converting to Latin-1"	| outStream byte1 byte2 byte3 byte4 unicode stream |	stream := aString readStream.	outStream := WriteStream on: (String new: aString size).	[ stream atEnd not ] whileTrue: [		byte1 := stream next asInteger.		unicode := byte1.		(byte1 bitAnd: 16rE0) = 192 ifTrue: [ "two bytes"			byte2 := stream next asInteger.			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 31) bitShift: 6) + (byte2 bitAnd: 63) ].		(byte1 bitAnd: 16rF0) = 224 ifTrue: [ "three bytes"			byte2 := stream next asInteger.			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte3 := stream next asInteger.			(byte3 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 15) bitShift: 12) + ((byte2 bitAnd: 63) bitShift: 6)				+ (byte3 bitAnd: 63) ].		(byte1 bitAnd: 16rF8) = 240 ifTrue: [ "four bytes"			byte2 := stream next asInteger.			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte3 := stream next asInteger.			(byte3 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte4 := stream next asInteger.			(byte4 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 16r7) bitShift: 18) +							((byte2 bitAnd: 63) bitShift: 12) + 							((byte3 bitAnd: 63) bitShift: 6) +							(byte4 bitAnd: 63) ].		unicode ifNil: [ self invalidUtf8 ].		unicode = 16rFEFF "ignore BOM" ifFalse: [			outStream nextPut: (Character codePoint: unicode) ].		unicode := nil ].	^ outStream contents! !!GRPharoUtf8Codec methodsFor: 'conversion' stamp: 'jf 9/30/2009 00:46'!decoderFor: aStream 	^ GRPharoUtf8CodecStream 		on: aStream		converter: UTF8TextConverter new! !!GRPharoUtf8Codec methodsFor: 'conversion' stamp: 'jf 9/30/2009 00:46'!encoderFor: aStream 	^ GRPharoUtf8CodecStream 		on: aStream		converter: UTF8TextConverter new! !!GRPharoUtf8Codec methodsFor: 'accessing' stamp: 'pmm 2/20/2009 13:25'!name	^ 'utf-8'! !!GRPharoUtf8Codec methodsFor: 'accessing' stamp: 'pmm 2/20/2009 12:50'!url	^ self! !!BlockClosure methodsFor: '*Grease-Pharo30-Core' stamp: 'lr 4/8/2009 13:33'!fixCallbackTemps! !!BlockClosure methodsFor: '*Grease-Pharo30-Core' stamp: 'lr 4/8/2009 13:36'!valueWithPossibleArguments: anArray	| args |	(anArray size == self numArgs)		ifTrue: [ ^ self valueWithArguments: anArray ].	args := Array new: self numArgs.	args replaceFrom: 1		to: (anArray size min: args size)		with: anArray		startingAt: 1.	^ self valueWithArguments: args! !!Duration class methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 2/6/2010 00:12'!milliseconds: anInteger	^ self milliSeconds: anInteger! !!Duration methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 2/5/2010 23:58'!asMilliseconds	^ self asMilliSeconds! !!Duration methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 2/6/2010 00:02'!milliseconds	^ nanos quo: NanosInMillisecond! !!Number methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 2/6/2010 00:12'!milliseconds	^ self milliSeconds! !!Behavior methodsFor: '*Grease-Pharo30-Core' stamp: 'lr 7/25/2011 19:45'!fullName	"In VW, will include the namespace"	^ self name! !!ByteArray methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 9/30/2009 01:10'!greaseString	"ByteArrays should not automatically be converted to Strings. You should use a GRCodec for this."	^ self printString! !!GRPackage class methodsFor: '*Grease-Pharo30-Core' stamp: 'pmm 9/12/2013 16:00'!greasePharo30Core	^ self new		name: 'Grease-Pharo30-Core';		addDependency: 'Grease-Core';		url: #greaseUrl;		yourself! !!GRWorkingWriteStream commentStamp: 'pmm 8/25/2011 18:30' prior: 34330619!I'm a work around for bugs in the Pharo stream classes.!!GRWorkingWriteStream methodsFor: 'positioning' stamp: 'pmm 8/26/2011 09:39'!reset	self resetToStart! !!WriteStream methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 5/22/2010 20:26'!greaseNext: anInteger putAll: aCollection startingAt: startIndex	"Store the next anInteger elements from the given collection."	^ self next: anInteger putAll: aCollection startingAt: startIndex! !!GRPharoPlatform commentStamp: 'pmm 6/1/2008 01:03' prior: 34330738!A WASqueakPlatform is the Squeak implementation of SeasidePlatformSupport, the Seaside class that provides functionality that can not be implemented in a platform independent way.!!GRPharoPlatform class methodsFor: 'class initialization' stamp: 'pmm 5/20/2010 11:49'!initialize	self initializeXmlTable.	self initializeUrlTable.	self select! !!GRPharoPlatform class methodsFor: 'class initialization' stamp: 'pmm 5/20/2010 20:56'!initializeUrlTable	UrlTable := ByteArray new: 256.	1 to: 256 do: [ :index |		('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~' includes: (Character codePoint: index - 1))			ifTrue: [ UrlTable at: index put: 0 ]			ifFalse: [ UrlTable at: index put: 1 ] ]! !!GRPharoPlatform class methodsFor: 'class initialization' stamp: 'pmm 5/20/2010 20:56'!initializeXmlTable	XmlTable := ByteArray new: 256.	1 to: 256 do: [ :index |		('"<&>' includes: (Character codePoint: index - 1))			ifTrue: [ XmlTable at: index put: 1 ]			ifFalse: [ XmlTable at: index put: 0 ] ]! !!GRPharoPlatform class methodsFor: 'class initialization' stamp: 'jf 1/22/2009 02:45'!unload	self unselect! !!GRPharoPlatform methodsFor: 'startup' stamp: 'jf 1/21/2009 17:31'!addToShutDownList: anObject	"Add anObject to the shutdown-list of the system. On shutdown the message #shutDown will be sent to anObject."	Smalltalk addToShutDownList: anObject! !!GRPharoPlatform methodsFor: 'startup' stamp: 'jf 1/21/2009 17:31'!addToStartUpList: anObject	"Add anObject to the startup-list of the system. On startup the message #startUp will be sent to anObject."	Smalltalk addToStartUpList: anObject! !!GRPharoPlatform methodsFor: 'file library' stamp: 'lr 7/25/2011 19:51'!asMethodReturningByteArray: aByteArrayOrString named: aSymbol	"Generates the source of a method named aSymbol that returns aByteArrayOrString as a ByteArray"	^ self useByteArrayLiterals		ifTrue: [ self asMethodReturningByteArrayLiteral: aByteArrayOrString named: aSymbol ]		ifFalse: [ self asMethodReturningByteArrayWithCache: aByteArrayOrString named: aSymbol ]! !!GRPharoPlatform methodsFor: 'private-file library' stamp: 'lr 7/25/2011 19:51'!asMethodReturningByteArrayLiteral: aByteArrayOrString named: aSymbol	"Generates the source of a method named aSymbol that returns aByteArrayOrString as a byte array using VW/NewCompiler byte array literal syntax."	^ String streamContents: [ :stream |		stream nextPutAll: aSymbol; nextPut: Character cr.		stream tab; nextPutAll: '^ #['.		aByteArrayOrString asByteArray			do: [ :each | each printOn: stream ]			separatedBy: [ stream space ].		stream nextPutAll: ']' ]! !!GRPharoPlatform methodsFor: 'private-file library' stamp: 'pmm 2/20/2009 17:44'!asMethodReturningByteArrayWithCache: aByteArrayOrString named: aSymbol	"Generates the source of a method named aSymbol that returns aByteArrayOrString as a byte array and caching this array in a literal array of size 1."	^ String streamContents: [ :stream |		stream nextPutAll: aSymbol; nextPut: Character cr.		stream tab; nextPutAll: '^ #('.		aByteArrayOrString asByteArray			do: [ :each | each printOn: stream ]			separatedBy: [ stream space ].		stream nextPutAll: ') asByteArray' ]! !!GRPharoPlatform methodsFor: 'encoding' stamp: 'jf 1/21/2009 17:31'!base64Decode: aString	^ (Base64MimeConverter mimeDecodeToChars: aString readStream) contents! !!GRPharoPlatform methodsFor: 'file library' stamp: 'pmm 9/12/2013 11:24'!compile: aString into: aClass classified: aSymbol 	aClass compile: aString classified: aSymbol! !!GRPharoPlatform methodsFor: 'file library' stamp: 'JohanBrichau 10/3/2014 19:59'!contentsOfFile: aString binary: aBoolean	^ self fileStreamOn: aString do: [ :stream | stream contents ] binary: aBoolean! !!GRPharoPlatform methodsFor: 'file library' stamp: 'pmm 8/19/2012 10:19'!directoriesIn: aPathString	"Answer a collection of absolute paths for all the directories (no files) in the directory given by aPathString	must not include directory names that start with ."	^ Array streamContents: [ :stream | 		FileSystem disk directoriesAt: aPathString do: [ :each |			each basename first = $. ifFalse: [				stream nextPut: each asFileReference fullName  ] ] ]! !!GRPharoPlatform methodsFor: 'private' stamp: 'pmm 9/12/2013 17:55'!doSilently: aBlock	^ SystemAnnouncer uniqueInstance suspendAllWhile:  aBlock! !!GRPharoPlatform methodsFor: 'file library' stamp: 'pmm 9/12/2013 12:05'!ensureExistenceOfFolder: aString	"creates a folder named aString in the image directory"	FileSystem disk ensureCreateDirectory: aString! !!GRPharoPlatform methodsFor: 'file library' stamp: 'JohanBrichau 10/3/2014 20:02'!fileExists: aString	^ aString asFileReference exists ! !!GRPharoPlatform methodsFor: 'file library' stamp: 'JohanBrichau 10/3/2014 19:59'!fileStreamOn: aString do: aBlock binary: aBoolean	^ aBoolean		ifTrue: [			FileStream fileNamed: aString do: [ :stream |				stream binary.				aBlock value: stream ] ]		ifFalse: [			MultiByteFileStream fileNamed: aString do: [ :stream |				stream					ascii;					wantsLineEndConversion: true.					aBlock value: stream ] ]! !!GRPharoPlatform methodsFor: 'file library' stamp: 'pmm 8/19/2012 10:18'!filesIn: aPathString	"Return a collection of absolute paths for all the files (no directories) in the directory given by aPathString	must not include file names that start with ."	^ Array streamContents: [ :stream | 		FileSystem disk filesAt: aPathString do: [ :each |			each basename first = $. ifFalse: [				stream nextPut: each asFileReference fullName  ] ] ]! !!GRPharoPlatform methodsFor: 'processes' stamp: 'jf 2/6/2009 15:58'!isProcessTerminated: aProcess	"Return a boolean indicating whether aProcess has been terminated."	^ aProcess isTerminated! !!GRPharoPlatform methodsFor: 'version info' stamp: 'jf 2/9/2010 00:56'!label	^ 'Pharo'! !!GRPharoPlatform methodsFor: 'file library' stamp: 'pmm 8/19/2012 10:19'!localNameOf: aFilename	^ (FileSystem disk resolveString: aFilename) basename! !!GRPharoPlatform methodsFor: 'factory' stamp: 'pmm 10/7/2010 13:10'!newRandom	"Answers the random number generator to be used to create session and continuation keys. Make sure it is seeded. They only methods that will be sent to it are:	  #nextInt: - should answer a random integer in the interval [1, anInteger]	  #randomFrom: - should answer a random element from the given collection		Make sure that both methods are safe under heavy concurrent load.		Used by Gemstone/S traditional Randoms which cannot be persisted.."	^ GRPharoRandomProvider! !!GRPharoPlatform methodsFor: 'file library' stamp: 'lr 4/15/2010 19:14'!newline	^ String cr! !!GRPharoPlatform methodsFor: 'exceptions' stamp: 'pmm 1/22/2012 16:31'!openDebuggerOn: anError	| process |	process := Processor activeProcess.	"If we are running in the UI process, we don't want to suspend the active process. The	error was presumably triggered while stepping in the Debugger. If we simply immediately	signal an UnhandledError, the debugger will catch this and display the signaling context.	It isn't perfect or pretty but it works."	(ProcessBrowser isUIProcess: process)		ifTrue: [			UnhandledError signalForException: anError ]		ifFalse: [			WorldState addDeferredUIMessage: [				process					debug: anError signalerContext					title: anError description					full: true ].			process suspend ]! !!GRPharoPlatform methodsFor: 'file library' stamp: 'pmm 8/4/2012 12:38'!pathSeparator	^ String with: FileSystem disk delimiter! !!GRPharoPlatform methodsFor: 'factory' stamp: 'JohanBrichau 1/18/2014 07:05'!readWriteByteStream	"ByteArray based read write stream"		^ RWBinaryOrTextStream on: (ByteArray new: 4096)! !!GRPharoPlatform methodsFor: 'factory' stamp: 'dkh 9/4/2009 09:14'!readWriteCharacterStream	"String based read write stream"	^ ReadWriteStream on: (String new: 4096)! !!GRPharoPlatform methodsFor: 'startup' stamp: 'jf 1/21/2009 17:31'!removeFromShutDownList: anObject	"Remove anObject from the shutdown list in the system."	Smalltalk removeFromShutDownList: anObject! !!GRPharoPlatform methodsFor: 'startup' stamp: 'jf 1/21/2009 17:31'!removeFromStartUpList: anObject	"Remove anObject from the startup list in the system."	Smalltalk removeFromStartUpList: anObject! !!GRPharoPlatform methodsFor: 'file library' stamp: 'JohanBrichau 4/19/2014 13:44'!removeSelector: aSymbol from: aClass	aClass removeSelector: aSymbol! !!GRPharoPlatform methodsFor: 'cryptography' stamp: 'DamienCassou 8/27/2013 18:30'!secureHashFor: aString	^ SHA1 new hashMessage: aString! !!GRPharoPlatform methodsFor: 'factory' stamp: 'lr 7/25/2011 19:51'!semaphoreClass	"used by Gemstone/S traditional Semaphores which cannot be persisted"	^ Semaphore! !!GRPharoPlatform methodsFor: 'exceptions' stamp: 'jf 1/21/2009 17:31'!stackDepth	| depth current |	depth := 0.	current := thisContext.	[ current isNil ] whileFalse: [		current := current sender.		depth := depth + 1 ].	^ depth - 1! !!GRPharoPlatform methodsFor: 'processes' stamp: 'jf 2/6/2009 15:59'!terminateProcess: aProcess	"Permanently terminate the process, unwinding first to execute #ensure: and #ifCurtailed: blocks."	aProcess terminate! !!GRPharoPlatform methodsFor: 'private-file library' stamp: 'pmm 8/4/2012 12:39'!useByteArrayLiterals	"whether ByteArray literals can/should be used"	^ true! !!GRPharoPlatform methodsFor: 'factory' stamp: 'lr 7/25/2011 19:51'!weakDictionaryOfSize: aNumber	^ IdentityDictionary new: aNumber! !!GRPharoPlatform methodsFor: 'file library' stamp: 'pmm 8/4/2012 13:02'!write: aStringOrByteArray toFile: aFileNameString inFolder: aFolderString	"writes aStringOrByteArray to a file named aFilenameString in the folder aFolderString"	| folder stream fullFilePath |	folder := FileSystem disk resolveString: aFolderString.	fullFilePath := (folder / aFileNameString) asFileReference.	stream := aStringOrByteArray isString		ifTrue: [			(MultiByteFileStream forceNewFileNamed: fullFilePath fullName)				ascii;				wantsLineEndConversion: true;				yourself ]		ifFalse: [ (FileStream forceNewFileNamed: fullFilePath fullName) binary ].	[ stream nextPutAll: aStringOrByteArray ]		ensure: [ stream close ]! !!GRPharoPlatform methodsFor: 'factory' stamp: 'pmm 8/26/2011 09:45'!writeCharacterStreamOn: aString	^ GRWorkingWriteStream on: aString! !!GRPharoLatin1CodecStream commentStamp: '<historical>' prior: 34330985!A GRPharoLatin1CodecStream is a WACodecStream optimized for ISO-8859-1 (direct byte to character mapping).!!GRPharoLatin1CodecStream methodsFor: 'streaming' stamp: 'pmm 8/16/2010 09:16'!next	^ Character value: stream next! !!GRPharoLatin1CodecStream methodsFor: 'streaming' stamp: 'lr 7/25/2011 19:50'!next: anInteger	^ (stream next: anInteger) asString! !!Point methodsFor: '*Grease-Pharo30-Core' stamp: 'pmm 3/4/2012 20:24'!greaseString	"Reimplemented because in Pharo 1.4	(4 @ 2) greaseString	ansers  '(4@2)'"	^ String streamContents: [ :stream |		x printOn: stream.		stream nextPut: $@.		(y notNil and: [y negative])			ifTrue: [				"Avoid ambiguous @- construct"				stream space].		y printOn: stream ]! !!ScaledDecimal methodsFor: '*Grease-Pharo30-Core' stamp: 'pmm 9/15/2013 12:23'!greaseString	| converter |	converter := GRNumberPrinter new precision: self scale.	^ converter print: self! !!GRDelegatingStream methodsFor: '*Grease-Pharo30-Core' stamp: 'pmm 12/28/2010 22:13'!greaseNext: anInteger putAll: aCollection startingAt: startIndex	stream greaseNext: anInteger putAll: aCollection startingAt: startIndex! !!GRPharoConverterCodecStream commentStamp: 'pmm 6/25/2012 20:22' prior: 34331168!A WAConverterCodecStream is a WACodec stream around a TextConverter. It is always in text mode.Instance Variables	converter:		<TextConverter>converter	- the TextConverter used to do the encoding conversion!!GRPharoConverterCodecStream class methodsFor: 'instance creation' stamp: 'pmm 10/30/2010 18:58'!on: aStream converter: aConverter	^ self basicNew initializeOn: aStream converter: aConverter! !!GRPharoConverterCodecStream methodsFor: 'streaming' stamp: 'pmm 12/28/2010 22:12'!greaseNext: anInteger putAll: aCollection startingAt: startIndex	self nextPutAll: (aCollection copyFrom: startIndex to: startIndex + anInteger - 1)! !!GRPharoConverterCodecStream methodsFor: 'initialization' stamp: 'pmm 10/30/2010 18:58'!initializeOn: aStream converter: aConverter	self initializeOn: aStream.	converter := aConverter! !!GRPharoConverterCodecStream methodsFor: 'streaming' stamp: 'pmm 4/10/2010 13:32'!next	| character |	character := converter nextFromStream: stream.	^ character isNil		ifFalse: [ character asCharacter ]! !!GRPharoConverterCodecStream methodsFor: 'streaming' stamp: 'lr 2/7/2009 12:57'!next: anInteger	| writeStream |	writeStream := WriteStream on: (String new: anInteger).	anInteger timesRepeat: [		writeStream nextPut: (self next			ifNil: [ ^ writeStream contents ]) ].	^ writeStream contents! !!GRPharoConverterCodecStream methodsFor: 'streaming' stamp: 'pmm 4/10/2010 13:30'!nextPut: aCharacter	converter nextPut: aCharacter asCharacter toStream: stream! !!GRPharoConverterCodecStream methodsFor: 'streaming' stamp: 'lr 2/7/2009 12:54'!nextPutAll: aString	aString asString do: [ :each | self nextPut: each ]! !!GRPharoUtf8CodecStream commentStamp: 'pmm 2/20/2009 12:27' prior: 34331452!A WAUtf8CodecStream is a WACodecStream optimized for UTF-8 performance in the case where most of the characters are ASCII.!!GRPharoUtf8CodecStream class methodsFor: 'class initialization' stamp: 'lr 7/25/2011 19:46'!initialize	(Smalltalk hasClassNamed: #UTF8TextConverter) "guard for Squeak 37"		ifFalse: [ ^ self ].	Latin1ToUtf8Map := ByteArray new: 256.	Latin1ToUtf8Encodings := Array new: 256.	0 to: 255 do:[ :index |		| latin1 utf8 |		latin1 := String with: (Character codePoint: index).		utf8 := latin1 convertToWithConverter: UTF8TextConverter new.		latin1 = utf8			ifTrue:[				Latin1ToUtf8Map at: index + 1 put: 0 ] "no translation needed"			ifFalse:[				Latin1ToUtf8Map at: index + 1 put: 1. "no translation needed"				Latin1ToUtf8Encodings at: index + 1 put: utf8 ] ]! !!GRPharoUtf8CodecStream methodsFor: 'streaming' stamp: 'pmm 4/10/2010 13:28'!crlf	stream nextPut: Character cr.	stream nextPut: Character lf! !!GRPharoUtf8CodecStream methodsFor: 'private' stamp: 'lr 7/25/2011 18:36'!encodeDefault: aString	"Convert the given string from UTF-8 using the fast path if converting to Latin-1"	1 to: aString size by: 1 do: [ :index |		converter nextPut: (aString at: index) toStream: stream ]! !!GRPharoUtf8CodecStream methodsFor: 'private' stamp: 'lr 7/25/2011 19:51'!encodeFast: aByteString	"Convert the given string from UTF-8 using the fast path if converting to Latin-1"	| lastIndex nextIndex |	lastIndex := 1.	nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.	nextIndex = 0 ifTrue: [ ^ stream nextPutAll: aByteString ].	[	nextIndex > lastIndex ifTrue: [			stream greaseNext: nextIndex - lastIndex putAll: aByteString startingAt: lastIndex ].		stream nextPutAll: (Latin1ToUtf8Encodings at: (aByteString byteAt: nextIndex) + 1).		lastIndex := nextIndex + 1.		nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.		nextIndex = 0 ] whileFalse.	stream greaseNext: aByteString size - lastIndex + 1 putAll: aByteString startingAt: lastIndex.! !!GRPharoUtf8CodecStream methodsFor: 'streaming' stamp: 'pmm 8/15/2011 21:32'!greaseNext: anInteger putAll: aCollection startingAt: startIndex	aCollection isByteString		ifTrue: [ self greaseNext: anInteger putAllFast: aCollection startingAt: startIndex ]		ifFalse: [ super greaseNext: anInteger putAll: aCollection startingAt: startIndex ]! !!GRPharoUtf8CodecStream methodsFor: 'private' stamp: 'pmm 5/21/2014 21:28'!greaseNext: anInteger putAllFast: aByteString startingAt: startIndex	| lastIndex nextIndex |	lastIndex := startIndex.	nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.	nextIndex = 0 ifTrue: [ ^ stream greaseNext: anInteger putAll: aByteString startingAt: startIndex ].	[			nextIndex >= (startIndex + anInteger) ifTrue: [			^ stream greaseNext: startIndex + anInteger - lastIndex  putAll: aByteString startingAt: lastIndex ].		nextIndex > lastIndex ifTrue: [			stream greaseNext: nextIndex - lastIndex putAll: aByteString startingAt: lastIndex ].		stream nextPutAll: (Latin1ToUtf8Encodings at: (aByteString byteAt: nextIndex) + 1).		lastIndex := nextIndex + 1.		nextIndex := ByteString findFirstInString: aByteString inSet: Latin1ToUtf8Map startingAt: lastIndex.		(nextIndex = 0 or: [ nextIndex >= (startIndex + anInteger) ]) ] whileFalse.	lastIndex >= (startIndex + anInteger) ifFalse: [		stream greaseNext: startIndex + anInteger - lastIndex putAll: aByteString startingAt: lastIndex ]! !!GRPharoUtf8CodecStream methodsFor: 'private' stamp: 'jf 9/30/2009 00:39'!invalidUtf8	^ GRInvalidUtf8Error signal: 'Invalid UTF-8 input'! !!GRPharoUtf8CodecStream methodsFor: 'streaming' stamp: 'pmm 2/17/2010 20:09'!next	^ (self next: 1) first! !!GRPharoUtf8CodecStream methodsFor: 'streaming' stamp: 'pmm 2/17/2012 08:00'!next: anInteger	"Convert the given string from UTF-8 using the fast path if converting to Latin-1"	| output byte1 byte2 byte3 byte4 unicode count alreadyWide |	output := ByteString new: anInteger.	count := 0.	alreadyWide := false.	[ count < anInteger and: [ stream atEnd not ] ] whileTrue: [		byte1 := stream next.		unicode := byte1.		(byte1 bitAnd: 16rE0) = 192 ifTrue: [ "two bytes"			byte2 := stream next.			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 31) bitShift: 6) + (byte2 bitAnd: 63) ].		(byte1 bitAnd: 16rF0) = 224 ifTrue: [ "three bytes"			byte2 := stream next.			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte3 := stream next.			(byte3 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 15) bitShift: 12) + ((byte2 bitAnd: 63) bitShift: 6)				+ (byte3 bitAnd: 63).			alreadyWide ifFalse: [				output := WideString withAll: output.				alreadyWide := true ] ].		(byte1 bitAnd: 16rF8) = 240 ifTrue: [ "four bytes"			byte2 := stream next.			(byte2 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte3 := stream next.			(byte3 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			byte4 := stream next.			(byte4 bitAnd: 16rC0) = 16r80 ifFalse: [ self invalidUtf8 ].			unicode := ((byte1 bitAnd: 16r7) bitShift: 18) +							((byte2 bitAnd: 63) bitShift: 12) + 							((byte3 bitAnd: 63) bitShift: 6) +							(byte4 bitAnd: 63).			alreadyWide ifFalse: [				output := WideString withAll: output.				alreadyWide := true ] ].		unicode ifNil: [ self invalidUtf8 ].		unicode = 16rFEFF "ignore BOM" ifFalse: [			count := count + 1.			output at: count put: (Character codePoint: unicode). ].		unicode := nil ].	^ count < anInteger		ifTrue: [ output first: count ]		ifFalse: [ output ]! !!GRPharoUtf8CodecStream methodsFor: 'streaming' stamp: 'lr 7/25/2011 19:51'!nextPut: aCharacter	| codePoint shouldEncode |	codePoint := aCharacter codePoint.	codePoint > 255		ifTrue: [ ^ self nextPutAll: (String with: aCharacter) ].	shouldEncode := Latin1ToUtf8Map at: codePoint + 1.	shouldEncode = 1		ifTrue: [ stream nextPutAll: (Latin1ToUtf8Encodings at: codePoint + 1) ]		ifFalse: [ stream nextPut: aCharacter ]	! !!GRPharoUtf8CodecStream methodsFor: 'streaming' stamp: 'pmm 4/10/2010 13:28'!nextPutAll: aString	aString isByteString		ifTrue: [ self encodeFast: aString ]		ifFalse: [ self encodeDefault: aString ]! !!PositionableStream methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 9/30/2009 01:06'!greaseUpToAll: aCollection 	"Needed for Seaside ports to other dialects where #upToAll: may have	different semantics"	^ self upToAll: aCollection! !!SequenceableCollection methodsFor: '*Grease-Pharo30-Core' stamp: 'jok 3/22/2010 11:48'!beginsWithSubCollection: aSequenceableCollection	"Some platforms implement #beginsWith: to answer true for an empty argument."	^ self beginsWith: aSequenceableCollection! !!SequenceableCollection methodsFor: '*Grease-Pharo30-Core' stamp: 'jok 3/22/2010 11:47'!endsWithSubCollection: aSequenceableCollection	"Some platforms implement #endsWith: to answer true for an empty argument."	^ self endsWith: aSequenceableCollection! !!SequenceableCollection methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 2/6/2010 02:01' prior: 52970306!sorted	^ self sorted: [ :a :b | a <= b ]! !!Object methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 9/30/2009 01:10'!greaseString	^ self asString! !!MessageSend methodsFor: '*Grease-Pharo30-Core' stamp: 'pmm 1/10/2009 19:22'!argumentCount	^ selector numArgs - self arguments size! !!MessageSend methodsFor: '*Grease-Pharo30-Core' stamp: 'pmm 4/23/2007 20:02'!fixCallbackTemps	"for polymorphism with BlockContext >> #fixCallbackTemps"! !!MessageSend methodsFor: '*Grease-Pharo30-Core' stamp: 'lr 7/25/2011 19:52'!valueWithPossibleArguments: anArray	"Evaluate the block represented by the receiver.     If the block requires one argument, use anArg, if it requires more than one,     fill up the rest with nils."	^ self valueWithEnoughArguments: anArray! !!GRPharoRandomProvider class methodsFor: 'private' stamp: 'jgf 1/25/2009 12:05'!initialize	Smalltalk addToStartUpList: self.	self startUp! !!GRPharoRandomProvider class methodsFor: 'public' stamp: 'lr 7/25/2011 19:46'!nextInt: anInteger	"Answer a random integer in the interval [1, anInteger]"	^ mutex critical: [ generator nextInt: anInteger ]! !!GRPharoRandomProvider class methodsFor: 'private' stamp: 'lr 7/25/2011 19:46'!randomClass	^ Random! !!GRPharoRandomProvider class methodsFor: 'public' stamp: 'lr 7/25/2011 18:28'!randomFrom: aCollection	| random count |	random := self nextInt: aCollection size.	^ aCollection isSequenceable		ifTrue: [ aCollection at: random ]		ifFalse: [			count := 1.			aCollection do: [ :ea |				count = random ifTrue: [ ^ ea ].				count := count + 1 ] ]! !!GRPharoRandomProvider class methodsFor: 'class initialization' stamp: 'pmm 1/10/2009 16:01'!startUp	generator := self randomClass new.	mutex := Semaphore forMutualExclusion! !!GRPharoRandomProvider class methodsFor: 'private' stamp: 'jf 9/30/2009 00:19'!unload	GRPlatform current removeFromStartUpList: self! !!Collection methodsFor: '*Grease-Pharo30-Core' stamp: 'jf 2/6/2010 00:41'!any	^ self anyOne! !"Grease-Pharo30-Core"!!MustacheParser commentStamp: '<historical>' prior: 0!A MustacheParser is the internally used parser that is used my MustacheTemplate to compile a template string into a template structure!!MustachePart commentStamp: '<historical>' prior: 0!A MustachePart is the base class for all entities that are parsed from a template string. The structure is held internally by MustacheTemplate to render a string from a template.For public access have a look at MustacheTemplate!!MustacheTemplate commentStamp: '<historical>' prior: 0!A MustacheTemplate is the main class to interact when dealing with mustache templates.A MustacheTemplate can be created from a string containing mustache template markup either withMustacheTemplate on: aStringoraString asMustacheTemplate To fill out a template just provide a context object and doaMustacheTemplate value: aContextObject Nested templates can be used be providing a dictionary with keys as the names used in the master template and values being individual mustache templates!!MustacheWriteVisitor commentStamp: '<historical>' prior: 0!A MustacheWriteVisitor is the main visitor produces a final string from a template and a context object. It is used by MustacheTemplate!!MustacheParser commentStamp: '<historical>' prior: 34364651!A MustacheParser is the internally used parser that is used my MustacheTemplate to compile a template string into a template structure!!MustacheParser class methodsFor: 'instance creation' stamp: 'NorbertHartl 9/28/2013 00:57'!on: aStringOrStream 	^ self new		stream: aStringOrStream readStream ! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/28/2013 22:21'!addPart: aMustachePart	stack top addPart: aMustachePart	! !!MustacheParser methodsFor: 'generating' stamp: 'NorbertHartl 10/2/2013 09:58'!compile	|  sequenceStart |	sequenceStart := [ 		self readStringChunk.		[ self readTag. sequenceStart ] ].	self readUpToEndUsing: sequenceStart ! !!MustacheParser methodsFor: 'as yet unclassified' stamp: 'NorbertHartl 12/23/2014 15:01'!compileTemplate: aTemplate	self push: aTemplate.	self compile! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 9/27/2013 22:48'!consumeWhiteSpace	[ stream atEnd not and: [ stream peek isSeparator ] ] whileTrue: [ 		stream next ]! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/27/2013 23:01'!defaultEndDelimiter	^ '}}'! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/27/2013 22:11'!defaultStartDelimiter	^ '{{'! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 10/2/2013 10:11'!delimiterExtensions	^ Dictionary new		at: $# put: [ self startSection: MustacheSection ];		at: $/ put: [ self endSection ];		at: ${ put: [ self readDefaultUnescapedToken ];		at: $& put: [ self readUnescapedToken  ];		at: $!! put: [  self readComment ];		at: $^ put: [ self startSection: MustacheInvertedSection ];		at: $= put: [ self readChangeDelimiter ];		at: $> put: [ self readPartial ];		yourself! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/27/2013 23:02'!endDelimiter	^ endDelimiter ifNil: [ 		endDelimiter := self defaultEndDelimiter  ]! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/28/2013 23:16'!endDelimiter: aString	endDelimiter := aString! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 9/30/2013 11:01'!endSection	| token |	token := self readToken.	(stack top selector = token) ifFalse: [ 		Error signal: 'end section does not match ', stack top selector asString ].	stack pop! !!MustacheParser methodsFor: 'initialize-release' stamp: 'NorbertHartl 9/28/2013 01:01'!initialize 	super initialize.	stack := Stack new! !!MustacheParser methodsFor: 'testing' stamp: 'NorbertHartl 9/27/2013 22:35'!isDelimiterExtension: aCharacter	^ self delimiterExtensions keys includes: aCharacter! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/28/2013 00:59'!push: aTemplate 	stack push: aTemplate ! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 2/25/2014 16:06'!readChangeDelimiter	self startDelimiter: (String streamContents: [ :s| 		[ stream peek isSeparator ] whileFalse: [ 			s nextPut: stream next ]]).	self consumeWhiteSpace.	self endDelimiter: (stream upToAll: self endDelimiter) allButLast! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 10/2/2013 10:12'!readComment	"just read and forget"	self readToken! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 10/2/2013 09:33'!readDefaultTag	self readHtmlEscapedToken! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 9/28/2013 22:17'!readDefaultUnescapedToken	self readUnescapedToken.	(stream next = $}) ifFalse: [ 		Error signal: $} asString, ' character expected' ].! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 10/2/2013 09:32'!readExtendedTag	 ^ (self delimiterExtensions at: stream next) value! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 9/29/2013 17:29'!readHtmlEscapedToken	self addPart: (MustacheHtmlEscapedToken token: self readToken)! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 10/2/2013 10:13'!readPartial	self addPart: (MustachePartial name: self readToken)! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 9/28/2013 23:38'!readStringChunk	(stream upToAll: self startDelimiter) ifNotNil: [:chunk|		self addPart: (MustacheStringChunk string: chunk) ].! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 10/2/2013 09:33'!readTag	(self isDelimiterExtension: stream peek)		ifTrue: [  self readExtendedTag  ]		ifFalse: [  self readDefaultTag  ]! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 9/28/2013 23:07'!readToken	^ (stream upToAll: self endDelimiter) trimBoth! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 9/28/2013 22:23'!readUnescapedToken	self addPart: (MustacheToken token: self readToken)! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 10/2/2013 09:49'!readUpToEndUsing: aBlock	| nextRead |	nextRead := aBlock.	[ stream atEnd ] whileFalse: [  		 nextRead := nextRead value ]! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/27/2013 22:11'!startDelimiter	^ startDelimiter ifNil: [		startDelimiter := self defaultStartDelimiter ]! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/28/2013 23:17'!startDelimiter: aString	startDelimiter := aString! !!MustacheParser methodsFor: 'reading' stamp: 'NorbertHartl 10/3/2013 20:14'!startSection: aSectionClass	| section |	section := aSectionClass selector: self readToken.	self addPart: section. 	stack push: section	! !!MustacheParser methodsFor: 'accessing' stamp: 'NorbertHartl 9/28/2013 00:58'!stream: aStream 	stream := aStream! !!MustachePart commentStamp: '<historical>' prior: 34364840!A MustachePart is the base class for all entities that are parsed from a template string. The structure is held internally by MustacheTemplate to render a string from a template.For public access have a look at MustacheTemplate!!MustacheCompositePart methodsFor: 'adding' stamp: 'NorbertHartl 9/27/2013 23:54'!addPart: aMustachePart	parts add: aMustachePart ! !!MustacheCompositePart methodsFor: 'initialize-release' stamp: 'NorbertHartl 9/27/2013 23:54'!initialize 	super initialize.	parts := OrderedCollection new.! !!MustacheCompositePart methodsFor: 'accessing' stamp: 'NorbertHartl 9/29/2013 16:52'!parts	^ parts! !!MustacheInvertedSection methodsFor: 'testing' stamp: 'NorbertHartl 10/1/2013 14:25'!isInverted	^ true! !!MustacheSection class methodsFor: 'instance creation' stamp: 'NorbertHartl 9/28/2013 00:05'!selector: aString 	^ self new		selector: aString! !!MustacheSection methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:56'!accept: aVisitor 	aVisitor visitSection: self! !!MustacheSection methodsFor: 'testing' stamp: 'NorbertHartl 10/1/2013 14:24'!isInverted	^ false! !!MustacheSection methodsFor: 'accessing' stamp: 'NorbertHartl 9/30/2013 10:44'!lookupInContext: anObject	^ self lookup: selector inContext: anObject! !!MustacheSection methodsFor: 'resolving' stamp: 'NorbertHartl 10/1/2013 14:25'!mustacheDo: aBlock inContext: aContext 	aContext mustacheDo: aBlock inverted: self isInverted! !!MustacheSection methodsFor: 'accessing' stamp: 'NorbertHartl 9/30/2013 11:01'!selector	^ selector! !!MustacheSection methodsFor: 'accessing' stamp: 'NorbertHartl 9/28/2013 00:05'!selector: aString 	selector := aString! !!MustacheSection methodsFor: 'accessing' stamp: 'NorbertHartl 4/18/2014 18:47'!valueInContext: anObject	^ self lookupInContext: anObject! !!MustacheTemplate commentStamp: '<historical>' prior: 34365128!A MustacheTemplate is the main class to interact when dealing with mustache templates.A MustacheTemplate can be created from a string containing mustache template markup either withMustacheTemplate on: aStringoraString asMustacheTemplate To fill out a template just provide a context object and doaMustacheTemplate value: aContextObject Nested templates can be used be providing a dictionary with keys as the names used in the master template and values being individual mustache templates!!MustacheTemplate class methodsFor: 'instance creation' stamp: 'NorbertHartl 12/23/2014 14:56'!on: aStringOrStream 	^ self new		compile: aStringOrStream readStream;		yourself! !!MustacheTemplate methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:50'!accept: aVisitor 	aVisitor visitTemplate: self! !!MustacheTemplate methodsFor: 'resolving' stamp: 'NorbertHartl 12/23/2014 15:01'!compile: aStream 	(self parserClass on: aStream)		compileTemplate: self			! !!MustacheTemplate methodsFor: 'accessing' stamp: 'NorbertHartl 12/23/2014 15:01'!parserClass	^ MustacheParser ! !!MustacheTemplate methodsFor: 'resolving' stamp: 'NorbertHartl 10/2/2013 10:19'!value: anObject 	| visitor |	visitor := MustacheWriteVisitor new		context: anObject.	self accept: visitor.	^ visitor string! !!MustacheTemplate methodsFor: 'resolving' stamp: 'NorbertHartl 10/2/2013 10:19'!value: anObject partials: aDictionary	| visitor |	visitor := MustacheWriteVisitor new		partials: aDictionary;		context: anObject.	self accept: visitor.	^ visitor string! !!MustachePart methodsFor: 'resolving' stamp: 'NorbertHartl 9/30/2013 10:41'!lookup: aToken inContext: anObject	^ anObject mustacheLookup: aToken! !!MustachePartial class methodsFor: 'instance creation' stamp: 'NorbertHartl 10/2/2013 10:14'!name: aString 	^ self new		name: aString! !!MustachePartial methodsFor: 'visiting' stamp: 'NorbertHartl 10/2/2013 10:15'!accept: aVisitor 	aVisitor visitPartial: self ! !!MustachePartial methodsFor: 'accessing' stamp: 'NorbertHartl 10/2/2013 10:16'!name	^ name! !!MustachePartial methodsFor: 'accessing' stamp: 'NorbertHartl 10/2/2013 10:14'!name: aString 	name := aString! !!MustacheStringChunk class methodsFor: 'instance creation' stamp: 'NorbertHartl 9/27/2013 22:29'!string: aString 	^ self new		string: aString! !!MustacheStringChunk methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:54'!accept: aVisitor 	aVisitor visitStringChunk: self! !!MustacheStringChunk methodsFor: 'accessing' stamp: 'NorbertHartl 9/29/2013 17:01'!string	^ string! !!MustacheStringChunk methodsFor: 'accessing' stamp: 'NorbertHartl 9/27/2013 22:30'!string: aString 	string := aString! !!MustacheHtmlEscapedToken methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:55'!accept: aVisitor 	aVisitor visitHtmlEscapedToken: self ! !!MustacheHtmlEscapedToken methodsFor: 'resolving' stamp: 'NorbertHartl 9/30/2013 10:38'!valueInContext: anObject	^ (super valueInContext: anObject) asHTMLString ! !!MustacheToken class methodsFor: 'instance creation' stamp: 'NorbertHartl 9/28/2013 22:14'!token: aString 	^ self new		token: aString! !!MustacheToken methodsFor: 'visting' stamp: 'NorbertHartl 9/29/2013 17:31'!accept: aVisitor 	aVisitor visitToken: self! !!MustacheToken methodsFor: 'resolving' stamp: 'NorbertHartl 9/30/2013 10:41'!lookupInContext: anObject	^ self lookup: token inContext: anObject! !!MustacheToken methodsFor: 'accessing' stamp: 'NorbertHartl 9/28/2013 22:03'!token: aString 	token := aString! !!MustacheToken methodsFor: 'resolving' stamp: 'NorbertHartl 9/30/2013 10:46'!valueInContext: anObject	"lookup to token, perfrom value on it in case we have a block and 	finally convert it to string"	^ (self lookupInContext: anObject) 		ifNotNil: [ :object | object value asString ]		ifNil: [ '' ]! !!MustacheVisitor methodsFor: 'accessing' stamp: 'NorbertHartl 10/2/2013 10:38'!partialAt: aString 	| template |	partials ifNil: [ Error signal: 'template has no partials' ].	template := partials at: aString.	template isString ifTrue: [ 		template := MustacheTemplate on: template.		partials at: aString put: template ].	^ template! !!MustacheVisitor methodsFor: 'accessing' stamp: 'NorbertHartl 10/2/2013 10:10'!partials: aDictionary	partials := aDictionary! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:54'!visit: aMustachePart	aMustachePart accept: self! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:52'!visitAll: aCollection 	aCollection do: [ :each |		self visit: each ]! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:51'!visitCompositePart: aCompositePart	self visitAll: aCompositePart parts! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:56'!visitHtmlEscapedToken: aMustacheHTMLEscapedToken 	! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 10/2/2013 10:15'!visitPartial: aMustachePartial 	self visit: (self partialAt: aMustachePartial name)! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:57'!visitSection: aMustacheSection 	self visitCompositePart: aMustacheSection ! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:55'!visitStringChunk: aMustacheStringChunk 	! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:50'!visitTemplate: aMustacheTemplate 	self visitCompositePart: aMustacheTemplate ! !!MustacheVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 16:58'!visitToken: aMustacheToken	self visitHtmlEscapedToken: aMustacheToken  	! !!MustacheWriteVisitor commentStamp: '<historical>' prior: 34365694!A MustacheWriteVisitor is the main visitor produces a final string from a template and a context object. It is used by MustacheTemplate!!MustacheWriteVisitor methodsFor: 'accessing' stamp: 'NorbertHartl 9/29/2013 17:32'!addString: aString	aString ifNotEmpty: [ 		strings add: aString ]! !!MustacheWriteVisitor methodsFor: 'accessing' stamp: 'NorbertHartl 9/29/2013 17:05'!context: anObject	context := anObject! !!MustacheWriteVisitor methodsFor: 'initialize-release' stamp: 'NorbertHartl 9/29/2013 17:36'!initialize 	super initialize.	strings := OrderedCollection new: 50.! !!MustacheWriteVisitor methodsFor: 'rendering' stamp: 'NorbertHartl 4/18/2014 19:24'!renderSection: aSection withBlock: aBlock	"generate a render continuation block and hand it over to block	in the template. Return value will be a string that add as a whole	to the local string stack"	self addString: (aBlock value: [ 		self class new 			context: context;			visitCompositePart: aSection;			string ]) ! !!MustacheWriteVisitor methodsFor: 'rendering' stamp: 'NorbertHartl 4/18/2014 19:26'!renderSection: aSection withObject: anObject	aSection 		mustacheDo: [:item|			"if we are in collection context the lookup context			is shifted to the actual element of the collection"			item notNil ifTrue: [  context := item ].			self visitCompositePart: aSection ]		inContext: anObject! !!MustacheWriteVisitor methodsFor: 'accessing' stamp: 'NorbertHartl 4/18/2014 17:56'!string	^ strings		ifNotEmpty: [   			String 				new: ( strings sum: #size ) 				streamContents: [ :stream|					strings do: [ :string| 					stream nextPutAll: string ] ] ]		ifEmpty: [ '' ]! !!MustacheWriteVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/30/2013 10:37'!visitHtmlEscapedToken: aToken	self addString: (aToken valueInContext: context)! !!MustacheWriteVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 4/18/2014 19:27'!visitSection: aSection 	 | oldContext value |	oldContext := context.	value := aSection valueInContext: context.	[ value isClosure 		ifTrue: [ self renderSection: aSection withBlock: value ]		ifFalse: [ self renderSection: aSection withObject: value ]]			ensure: [ context := oldContext ]! !!MustacheWriteVisitor methodsFor: 'visiting' stamp: 'NorbertHartl 9/29/2013 17:33'!visitStringChunk: aStringChunk	self addString: aStringChunk string! !!Object methodsFor: '*mustache-core' stamp: 'DamienCassou 6/4/2014 16:34'!mustacheDefaultWhenLookupFails	^ nil! !!Object methodsFor: '*mustache-core' stamp: 'NorbertHartl 10/1/2013 14:36'!mustacheDo: aBlock	self mustacheDo: aBlock inverted: false! !!Object methodsFor: '*mustache-core' stamp: 'NorbertHartl 10/1/2013 14:13'!mustacheDo: aBlock inverted: aBoolean	aBoolean ifFalse:  [ aBlock cull: self ]! !!Object methodsFor: '*mustache-core' stamp: 'DamienCassou 6/4/2014 16:28'!mustacheLookup: aString	^ (self respondsTo: aString asSymbol) 		ifTrue: [ self perform: aString asSymbol ]		ifFalse: [  self mustacheLookupComplex: aString ]! !!Object methodsFor: '*mustache-core' stamp: 'NorbertHartl 11/7/2014 10:26'!mustacheLookupComplex: aString	| stream firstPart |	stream := aString readStream.	firstPart := stream upTo: $. .	^ stream atEnd		ifTrue: [ self mustacheDefaultWhenLookupFails ]		ifFalse: [ (self mustacheLookup: firstPart) mustacheLookup: stream upToEnd ]! !!String methodsFor: '*mustache-core' stamp: 'NorbertHartl 10/2/2013 10:44'!asMustacheTemplate	^ MustacheTemplate on: self ! !!AbstractFileReference methodsFor: '*mustache-core' stamp: 'DamienCassou 11/27/2013 18:28'!asMustacheTemplate	^ MustacheTemplate on: self readStream contents asString! !!AbstractFileReference methodsFor: '*mustache-core' stamp: 'DamienCassou 11/27/2013 18:21'!mustacheTemplateDuring: aBlock	^ self		readStreamDo: [ :input | | input2 |			"The following are here because of case #12259: 'FileSystem memory reads/writes using a binary stream by default'."			input2 := input.			(self fileSystem store isKindOf: MemoryStore)				ifTrue: [ input2 := input2 contents asString readStream ].			aBlock value: (MustacheTemplate on: input2) ]! !!HashedCollection methodsFor: '*mustache-core' stamp: 'NorbertHartl 4/18/2014 17:52'!mustacheDo: aBlock	aBlock value: self! !!HashedCollection methodsFor: '*mustache-core' stamp: 'NorbertHartl 4/18/2014 17:52'!mustacheDo: aBlock inverted: aBoolean	aBoolean ifFalse: [ aBlock cull: self ]! !!Collection methodsFor: '*mustache-core' stamp: 'NorbertHartl 9/28/2013 00:40'!mustacheDo: aBlock	self do: aBlock! !!Collection methodsFor: '*mustache-core' stamp: 'NorbertHartl 10/1/2013 14:23'!mustacheDo: aBlock inverted: aBoolean	aBoolean		ifTrue: [ self notEmpty mustacheDo: aBlock inverted: aBoolean ]		ifFalse: [ self do: aBlock ]! !!UndefinedObject methodsFor: '*mustache-core' stamp: 'NorbertHartl 10/1/2013 14:32'!mustacheDo: aBlock inverted: aBoolean 	aBoolean mustacheDo: aBlock! !!True methodsFor: '*mustache-core' stamp: 'NorbertHartl 10/1/2013 14:11'!mustacheDo: aBlock inverted: aBoolean	aBoolean ifFalse:  [ aBlock value: nil ]! !!Dictionary methodsFor: '*mustache-core' stamp: 'DamienCassou 6/4/2014 16:29'!mustacheLookup: aString	^ self at: aString ifAbsent: [ self mustacheLookupComplex: aString ]! !!False methodsFor: '*mustache-core' stamp: 'NorbertHartl 10/1/2013 14:11'!mustacheDo: aBlock inverted: aBoolean	aBoolean ifTrue:  [ aBlock value: nil ]! !"Mustache-Core"!!STON commentStamp: 'SvenVanCaekenberghe 5/3/2012 19:20' prior: 0!STON implements serialization and materialization using the Smalltalk Object Notation format. S y n t a x	value	  primitive-value	  object-value	  reference	  nil	primitive-value	  number	  true	  false	  symbol	  string	object-value	  object	  map	  list	object	  classname map	  classname list	reference	  @ int-index-previous-object-value	map	  {}	  { members }	members	  pair	  pair , members	pair	  string : value	  symbol : value	  number : value	list	  []	  [ elements ]	elements	  value 	  value , elements	string	  ''	  ' chars '	chars	  char	  char chars	char	  any-printable-ASCII-character-	    except-'-"-or-\	  \'	  \"	  \\	  \/	  \b	  \f	  \n	  \r	  \t	  \u four-hex-digits	symbol	  # chars-limited	  # ' chars '	chars-limited	  char-limited	  char-limited chars-limited	char-limited	  a-z A-Z 0-9 - _ . /	classname	  uppercase-alpha-char alphanumeric-char	number	  int	  int frac	  int exp	  int frac exp	int	  digit	  digit1-9 digits 	  - digit	  - digit1-9 digits	frac	  . digits	exp	  e digits	digits	  digit	  digit digits	e	  e	  e+	  e-	  E	  E+	  E-!!STONReader commentStamp: 'SvenVanCaekenberghe 5/29/2012 21:15' prior: 0!STONReader materializes objects using the Smalltalk Object Notation format.This parser is backwards compatible with standard JSON.!!STONReference commentStamp: 'SvenVanCaekenberghe 1/22/2012 20:13' prior: 0!STONReference holds a forward reference to another object during materialization.!!STONStreamWriter commentStamp: '<historical>' prior: 0!STONStreamWriter helps in streaming writing STON representations.This is an abstract class.!!STONListWriter commentStamp: '<historical>' prior: 0!STONArrayWriter helps in writing array based STON representations.!!STONShortListWriter commentStamp: '<historical>' prior: 0!STONShortArrayWriter helps in writing short array based STON representations.!!STONMapWriter commentStamp: '<historical>' prior: 0!STONDictionaryWriter helps in writing dictionary based STON representations.!!STONWriter commentStamp: 'SvenVanCaekenberghe 4/27/2012 14:08' prior: 0!STONWriter serializes objects using the Smalltalk Object Notation format. Customization options are:- prettyPrint <Boolean> default is false	if true, produce pretty printed output- jsonMode <Boolean> default is false	if true, the follow changes occur	- strings are delimited with double quotes	- nil is encoded as null	- symbols are treated as strings	- only STON listClass and STON mapClass instances are allowed as composite objects	it is wise to also use either #error or #ignore as referencePolicy to avoid references- referencePolicy <#normal|#ignore|#error> default is #normal	if #normal, track and count object references and use references to implement sharing and break cycles	if #error, track object references and signal STONWriterError when a shared reference is encountered	if #ignore, don't track object references which might loop forever on cycles !!STONReaderError commentStamp: '<historical>' prior: 0!STONReaderError is the error/exception signalled by STONReader when illegal/incorrect input is seen. !!STONWriterError commentStamp: 'SvenVanCaekenberghe 4/26/2012 17:17' prior: 0!STONWriterError is the error/exception signalled by STONWriter when illegal/incorrect input is seen. !!Character class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 15:17'!fromSton: stonReader	^ stonReader parseListSingleton first! !!Character methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 20:02'!stonOn: stonWriter	stonWriter writeObject: self listSingleton: self asString! !!Date class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 15:17'!fromSton: stonReader	^ self readFrom: stonReader parseListSingleton readStream! !!Date methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:26'!stonContainSubObjects 	^ false! !!Date methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 20:03'!stonOn: stonWriter	"Use an ISO style YYYYMMDD representation"		stonWriter writeObject: self listSingleton: self yyyymmdd! !!Association methodsFor: '*ston-core' stamp: 'ChristopheDemarey 11/6/2014 15:03'!stonOn: stonWriter	stonWriter writeAssociation: self! !!Number methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:26'!stonContainSubObjects 	^ false! !!Number methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/14/2012 17:26'!stonOn: stonWriter	stonWriter writeFloat: self asFloat! !!ByteArray class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 15:16'!fromSton: stonReader	^ self readHexFrom: stonReader parseListSingleton! !!ByteArray methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:25'!stonContainSubObjects 	^ false! !!ByteArray methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 20:02'!stonOn: stonWriter	"Use a hex representation"		stonWriter writeObject: self listSingleton: self hex! !!Dictionary class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 14:59'!fromSton: stonReader	"Instances of STON mapClass will be read directly and won't arrive here.	Other (sub)classes will use this method."		| dictionary |	dictionary := self new.	stonReader parseMapDo: [ :key :value |		dictionary at: key put: value ].	^ dictionary! !!Dictionary methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 14:58'!stonOn: stonWriter	"Instances of STON mapClass will be encoded directly, without a class tag.	Other (sub)classes will be encoded with a class tag and will use a map representation. "		self class == STON mapClass		ifTrue: [ 			stonWriter writeMap: self ]		ifFalse: [ 			stonWriter 				writeObject: self 				do: [ stonWriter encodeMap: self ] ]! !!Text class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 3/23/2014 18:48'!fromSton: stonReader	^ self new		fromSton: stonReader;		yourself! !!Text methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 3/23/2014 18:47'!fromSton: stonReader	stonReader parseMapDo: [ :instVarName :value |		self instVarNamed: instVarName put: value ]! !!Text methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 3/23/2014 18:47'!stonOn: stonWriter	stonWriter writeObject: self! !!UndefinedObject methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:27'!stonContainSubObjects 	^ false! !!UndefinedObject methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/14/2012 15:54'!stonOn: stonWriter	stonWriter writeNull! !!SmallDictionary class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 9/17/2013 19:50'!fromSton: stonReader	"My instances are stored as maps."		| dictionary |	dictionary := self new.	stonReader parseMapDo: [ :key :value |		dictionary at: key put: value ].	^ dictionary! !!SmallDictionary methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 9/17/2013 20:13'!stonOn: stonWriter	"I store my instances as maps"		stonWriter 		writeObject: self 		do: [ stonWriter encodeMap: self ]! !!Point methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 14:30'!fromSton: stonReader	stonReader parseListDo: [ :each :index |		index = 1 ifTrue: [ x := each ].		index = 2 ifTrue: [ y := each ] ]! !!Point methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/24/2012 10:02'!stonOn: stonWriter	stonWriter writeObject: self streamShortList: [ :array |		array add: x; add: y ]! !!TimeStamp class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 13:56'!fromSton: stonReader	"We use a representation from DateAndTime"		^ (super fromSton: stonReader) asTimeStamp! !!DateAndTime class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 19:50'!fromSton: stonReader	^ DateAndTime readFrom: stonReader parseListSingleton readStream! !!DateAndTime methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:25'!stonContainSubObjects 	^ false! !!DateAndTime methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 20:03'!stonOn: stonWriter	"Use an ISO representation with all details"		stonWriter writeObject: self listSingleton: 		(String streamContents: [ :stream |			self printOn: stream withLeadingSpace: false ])! !!Symbol methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/14/2012 16:22'!stonOn: stonWriter	stonWriter writeSymbol: self! !!Time class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 15:17'!fromSton: stonReader	^ self readFrom: stonReader parseListSingleton readStream! !!Time methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:26'!stonContainSubObjects 	^ false! !!Time methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 20:03'!stonOn: stonWriter	"Use an ISO style HH:MM:SS representation"	 	stonWriter writeObject: self listSingleton: 		(String streamContents: [ :stream |			self print24: true on: stream ])! !!Integer methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/14/2012 15:47'!stonOn: stonWriter	stonWriter writeInteger: self! !!SequenceableCollection class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 15:07'!fromSton: stonReader	^ self streamContents: [ :stream |		stonReader parseListDo: [ :each |			stream nextPut: each ] ]! !!SequenceableCollection methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/8/2012 19:22'!stonOn: stonWriter	self class == STON listClass		ifTrue: [ stonWriter writeList: self ]		ifFalse: [ super stonOn: stonWriter ]! !!Boolean methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:24'!stonContainSubObjects 	^ false! !!Boolean methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/14/2012 15:53'!stonOn: stonWriter	stonWriter writeBoolean: self! !!RunArray class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 3/23/2014 18:51'!fromSton: stonReader	^ self new		fromSton: stonReader;		yourself! !!RunArray methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 3/23/2014 18:52'!fromSton: stonReader	stonReader parseMapDo: [ :instVarName :value |		self instVarNamed: instVarName put: value ]! !!RunArray methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 3/23/2014 18:52'!stonOn: stonWriter	stonWriter writeObject: self! !!Object class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 19:58'!fromSton: stonReader	"Create a new instance and delegate decoding to instance side.	Override only when new instance should be created directly (see implementors). "		^ self new		fromSton: stonReader;		yourself! !!Object class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/27/2014 11:08'!stonAllInstVarNames	"Override to encode my instances using a custom set of instance variables or to define their order."		^ self allInstVarNames ! !!Object class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 8/12/2014 13:28'!stonName	"Override to encode my instances using a different class name."		^ self name! !!Object methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 3/23/2014 19:31'!fromSton: stonReader	"Decode non-variable classes from a map of their instance variables and values.	Override to customize and add a matching #toSton: (see implementors)."		self class isVariable 		ifTrue: [			self subclassResponsibility ]		ifFalse: [			stonReader parseMapDo: [ :instVarName :value |				self instVarNamed: instVarName put: value ] ]! !!Object methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/18/2012 20:16'!isStonReference	^ false! !!Object methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:24'!stonContainSubObjects	"Return true if I contain subObjects that should be processed, false otherwise.	Overwrite when necessary. See also #stonProcessSubObjects:"		^ true! !!Object methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/28/2012 14:27'!stonOn: stonWriter	"Encode non-variable classes with a map of their instance variable and values.	Override to customize and add a matching #fromSton: (see implementors)."	self class isVariable 		ifTrue: [			self subclassResponsibility ]		ifFalse: [			stonWriter writeObject: self ]! !!Object methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:22'!stonProcessSubObjects: block	"Execute block to (potentially) change each of my subObjects.	In general, all instance and indexable variables are processed.	Overwrite when necessary. Not used when #stonContainSubObjects returns false."		1 to: self class instSize do: [ :each |		self instVarAt: each put: (block value: (self instVarAt: each)) ].	(self class isVariable and: [ self class isBytes not ])		ifTrue: [			1 to: self basicSize do: [ :each |				self basicAt: each put: (block value: (self basicAt: each)) ] ]! !!Object methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/13/2013 23:43'!stonShouldWriteNilInstVars	"Return true if my instance variables that are nil should be written out, 	false otherwise. Overwrite when necessary. By default, return false."		^ false! !!STON commentStamp: 'SvenVanCaekenberghe 5/3/2012 19:20' prior: 34384616!STON implements serialization and materialization using the Smalltalk Object Notation format. S y n t a x	value	  primitive-value	  object-value	  reference	  nil	primitive-value	  number	  true	  false	  symbol	  string	object-value	  object	  map	  list	object	  classname map	  classname list	reference	  @ int-index-previous-object-value	map	  {}	  { members }	members	  pair	  pair , members	pair	  string : value	  symbol : value	  number : value	list	  []	  [ elements ]	elements	  value 	  value , elements	string	  ''	  ' chars '	chars	  char	  char chars	char	  any-printable-ASCII-character-	    except-'-"-or-\	  \'	  \"	  \\	  \/	  \b	  \f	  \n	  \r	  \t	  \u four-hex-digits	symbol	  # chars-limited	  # ' chars '	chars-limited	  char-limited	  char-limited chars-limited	char-limited	  a-z A-Z 0-9 - _ . /	classname	  uppercase-alpha-char alphanumeric-char	number	  int	  int frac	  int exp	  int frac exp	int	  digit	  digit1-9 digits 	  - digit	  - digit1-9 digits	frac	  . digits	exp	  e digits	digits	  digit	  digit digits	e	  e	  e+	  e-	  E	  E+	  E-!!STON class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 8/12/2014 15:04'!classNameKey	^ #className! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 1/24/2012 09:39'!fromStream: readStream	^ (self reader on: readStream) next! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 1/24/2012 09:40'!fromString: string	^ self fromStream: string readStream! !!STON class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 5/15/2012 09:32'!jsonWriter	^ STONWriter new		  jsonMode: true;		  yourself! !!STON class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/24/2012 09:36'!listClass	^ Array! !!STON class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/24/2012 09:36'!mapClass	^ Dictionary! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 5/30/2012 22:06'!put: object asJsonOnStream: stream	(self jsonWriter on: stream) nextPut: object! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 5/30/2012 22:07'!put: object asJsonOnStreamPretty: stream	(self jsonWriter on: stream)		prettyPrint: true; 		nextPut: object! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 1/24/2012 09:49'!put: object onStream: stream	(self writer on: stream) nextPut: object! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 2/12/2012 19:30'!put: object onStreamPretty: stream	(self writer on: stream)		prettyPrint: true; 		nextPut: object! !!STON class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/24/2012 09:37'!reader	^ STONReader new! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 5/30/2012 22:07'!toJsonString: object	^ String streamContents: [ :stream |		self put: object asJsonOnStream: stream ]! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 5/30/2012 22:07'!toJsonStringPretty: object	^ String streamContents: [ :stream |		self put: object asJsonOnStreamPretty: stream ]! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 1/24/2012 09:49'!toString: object	^ String streamContents: [ :stream |		self put: object onStream: stream ]! !!STON class methodsFor: 'convencience' stamp: 'SvenVanCaekenberghe 2/12/2012 19:30'!toStringPretty: object	^ String streamContents: [ :stream |		self put: object onStreamPretty: stream ]! !!STON class methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/24/2012 09:37'!writer	^ STONWriter new! !!STONReader commentStamp: 'SvenVanCaekenberghe 5/29/2012 21:15' prior: 34385857!STONReader materializes objects using the Smalltalk Object Notation format.This parser is backwards compatible with standard JSON.!!STONReader class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 1/14/2012 20:25'!on: readStream	^ self new		on: readStream;		yourself! !!STONReader methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 8/12/2014 14:39'!acceptUnknownClasses: boolean	acceptUnknownClasses := boolean! !!STONReader methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 10/25/2012 15:24'!allowComplexMapKeys: boolean	allowComplexMapKeys := boolean! !!STONReader methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 5/7/2012 13:49'!atEnd	^ readStream atEnd! !!STONReader methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/14/2012 20:26'!close	readStream ifNotNil: [		readStream close.		readStream := nil ]! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 2/6/2012 20:59'!consumeWhitespace	"Strip whitespaces from the input stream."	[ readStream atEnd not and: [ readStream peek isSeparator ] ]		whileTrue: [ readStream next ]! !!STONReader methodsFor: 'error handling' stamp: 'SvenVanCaekenberghe 12/13/2013 16:13'!error: aString	| streamPosition |	"Remain compatible with streams that don't understand #position"	streamPosition := [ readStream position ]		on: MessageNotUnderstood do: [ nil ].	^ STONReaderError signal: aString streamPosition: streamPosition! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/7/2012 10:33'!expectChar: character	"Expect character and consume input and optional whitespace at the end,	 throw an error otherwise."	(self matchChar: character)		ifFalse: [ self error: character asString, ' expected' ]! !!STONReader methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 8/12/2014 14:39'!initialize	super initialize.	objects := IdentityDictionary new.	classes := IdentityDictionary new.	allowComplexMapKeys := acceptUnknownClasses := false.	stack := Stack new.	unresolvedReferences := 0! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 2/12/2012 19:27'!isClassChar: char	^ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' includes: char! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 2/12/2012 19:27'!isClassStartChar: char	^ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' includes: char! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 2/12/2012 19:28'!isSimpleSymbolChar: char	^ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_./' includes: char! !!STONReader methodsFor: 'testing' stamp: 'ChristopheDemarey 11/7/2014 09:36'!isValidPropertyNameType: associationKey	^ allowComplexMapKeys or: [associationKey isString or: [ associationKey isNumber ] ]! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 8/12/2014 14:41'!lookupClass: name	Smalltalk globals 		at: name 		ifPresent: [ :class | ^ class ].	^ classes 		at: name 		ifAbsentPut: [			Object allSubclasses 				detect: [ :class | class isMeta not and: [ class stonName == name ]  ]				ifNone: [ NotFound signalFor: name ] ]	! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 12/3/2012 10:57'!match: string do: block	"Try to read and consume string and execute block if successful.	Else do nothing (but do not back up)"	(string allSatisfy: [ :each | readStream peekFor: each ])		ifTrue: [ 			self consumeWhitespace.			block value ]! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 12/3/2012 10:54'!matchChar: character	"Tries to match character, consume input and 	answer true if successful and consumes whitespace at the end."	^ (readStream peekFor: character)		ifTrue: [ 			self consumeWhitespace.			true ]		ifFalse: [ false ]! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 1/18/2012 20:54'!newReference	| index reference |	index := objects size + 1.	reference := STONReference index: index.	objects at: index put: reference.	^ reference! !!STONReader methodsFor: 'public' stamp: 'SvenVanCaekenberghe 4/27/2012 16:48'!next	| object |	self consumeWhitespace.	object := self parseValue.	unresolvedReferences > 0		ifTrue: [ self processSubObjectsOf: object ].	^ object! !!STONReader methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/14/2012 20:26'!on: aReadStream	readStream := aReadStream! !!STONReader methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 11/29/2012 15:54'!optimizeForLargeStructures	self class environment		at: #FLLargeIdentityDictionary		ifPresent: [ :identityDictionaryClass | objects := identityDictionaryClass new ].	self class environment 		at: #FLSimpleStackstack 		ifPresent: [ :stackClass | stack := stackClass new ]! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 1/15/2012 21:38'!parseCharacter	| char |	(char := readStream next) = $\ 		ifFalse: [ ^ char ].	(#( $' $" $/ $\) includes: (char := readStream next))		ifTrue: [ ^ char ].	char = $b		ifTrue: [ ^ Character backspace ].	char = $f		ifTrue: [ ^ Character newPage ].	char = $n		ifTrue: [ ^ Character lf ].	char = $r		ifTrue: [ ^ Character cr ].	char = $t		ifTrue: [ ^ Character tab ].	char = $u		ifTrue: [ ^ self parseCharacterHex ].	self error: 'invalid escape character \' , (String with: char)! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 5/29/2012 21:12'!parseCharacterHex	| value |	value := self parseCharacterHexDigit.	3 timesRepeat: [ 		value := (value << 4) + self parseCharacterHexDigit ].	^ Character codePoint: value! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 1/15/2012 11:28'!parseCharacterHexDigit	| digit |	readStream atEnd ifFalse: [ 		digit := readStream next asInteger.		(digit between: "$0" 48 and: "$9" 57)			ifTrue: [ ^ digit - 48 ].		(digit between: "$A" 65 and: "$F" 70)			ifTrue: [ ^ digit - 55 ].		(digit between: "$a" 97 and: "$f" 102)			ifTrue: [ ^ digit - 87 ] ].	self error: 'hex-digit expected'! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 5/29/2012 21:13'!parseClass	| className |	className := self stringStreamContents: [ :stream |		[ readStream atEnd not and: [ self isClassChar: readStream peek ] ] whileTrue: [ 			stream nextPut: readStream next ] ].	self consumeWhitespace.	^ self lookupClass: className asSymbol	! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 5/7/2012 13:16'!parseConstantDo: block	"Parse and consume either true|false|nil|null and execute block 	or else do nothing (but do not back up).	Hand written implementation to avoid the use of #position:"		(readStream peek = $t)		ifTrue: [			^ self match: 'true' do: [ block value: true ] ].	(readStream peek = $f)		ifTrue: [			^ self match: 'false' do: [ block value: false ] ].	(readStream peek = $n)		ifTrue: [			readStream next.			(readStream peek = $i)				ifTrue: [					self match: 'il' do: [ block value: nil ] ].			(readStream peek = $u)				ifTrue: [					self match: 'ull' do: [ block value: nil ] ] ]		! !!STONReader methodsFor: 'parsing' stamp: 'SvenVanCaekenberghe 2/12/2012 15:21'!parseList	| reference array |	reference := self newReference.	array := STON listClass streamContents: [ :stream |		self parseListDo: [ :each | stream nextPut: each ] ].	self setReference: reference to: array.	^ array! !!STONReader methodsFor: 'parsing' stamp: 'SvenVanCaekenberghe 11/27/2014 10:58'!parseListDo: block	| index |	self expectChar: $[.	(self matchChar: $]) ifTrue: [ ^ self ]. "short cut for empty lists"	index := 1.	[ readStream atEnd ] whileFalse: [		block cull: self parseValue cull: index.		(self matchChar: $]) ifTrue: [ ^ self ].		index := index + 1.		self expectChar: $, ].	self error: 'end of list expected'! !!STONReader methodsFor: 'parsing' stamp: 'SvenVanCaekenberghe 2/12/2012 15:55'!parseListSingleton	| value |	value := nil.	self parseListDo: [ :each :index |		index = 1 ifTrue: [ value := each ] ].	^ value! !!STONReader methodsFor: 'parsing' stamp: 'SvenVanCaekenberghe 2/12/2012 15:22'!parseMap	| map |	map := STON mapClass new.	self storeReference: map.	self parseMapDo: [ :key :value |		map at: key put: value ].	^ map! !!STONReader methodsFor: 'parsing' stamp: 'SvenVanCaekenberghe 11/27/2014 12:54'!parseMapDo: block	self expectChar: ${.	(self matchChar: $}) ifTrue: [ ^ self ]. "short cut for empty maps"	[ readStream atEnd ] whileFalse: [ | name value |		name := self parseSimpleValue.		(self isValidPropertyNameType: name)			ifFalse: [ self error: 'unexpected property name type' ].		self expectChar: $:.		value := self parseValue.		block value: name value: value.		"The above is a more efficient way to say 'self parseValue' and using the returned association"		(self matchChar: $}) ifTrue: [ ^ self ].		self expectChar: $, ].	self error: 'end of map expected'! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 12/3/2012 11:08'!parseNumber	| negated number |	negated := readStream peekFor: $-.	number := self parseNumberInteger.	(readStream peekFor: $.)		ifTrue: [ number := number + self parseNumberFraction ].	((readStream peekFor: $e) or: [ readStream peekFor: $E ])		ifTrue: [ number := number * self parseNumberExponent ].	negated		ifTrue: [ number := number negated ].	self consumeWhitespace.	^ number! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 12/3/2012 11:08'!parseNumberExponent	| number negated |	number := 0.	(negated := readStream peekFor: $-)		ifFalse: [ readStream peekFor: $+ ].	[ readStream atEnd not and: [ readStream peek isDigit ] ]		whileTrue: [ number := 10 * number + readStream next digitValue ].	negated		ifTrue: [ number := number negated ].	^ 10 raisedTo: number! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 1/15/2012 10:52'!parseNumberFraction	| number power |	number := 0.	power := 1.0.	[ readStream atEnd not and: [ readStream peek isDigit ] ] whileTrue: [		number := 10 * number + readStream next digitValue.		power := power * 10.0 ].	^ number / power! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 5/29/2012 21:13'!parseNumberInteger	| number |	number := 0.	[ readStream atEnd not and: [ readStream peek isDigit ] ] whileTrue: [ 		number := 10 * number + readStream next digitValue ].	^ number! !!STONReader methodsFor: 'parsing' stamp: 'SvenVanCaekenberghe 8/12/2014 15:04'!parseObject	| targetClass reference object |	[		reference := self newReference.		targetClass := self parseClass.		object := targetClass fromSton: self .		self setReference: reference to: object ]		on: NotFound 		do: [ :notFound |			acceptUnknownClasses 				ifTrue: [ 					object := STON mapClass new.					self storeReference: object.					self parseMapDo: [ :key :value |						object at: key put: value ].					object at: STON classNameKey put: notFound object ]				ifFalse: [ self error: 'Cannot resolve class named ', notFound object printString ] ].	^ object! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 11/29/2012 08:52'!parseReference	| index object |	self expectChar: $@.	index := self parseNumberInteger.	self consumeWhitespace.	unresolvedReferences := unresolvedReferences + 1.	^ STONReference index: index! !!STONReader methodsFor: 'parsing' stamp: 'ChristopheDemarey 11/6/2014 15:28'!parseSimpleValue	| char |	readStream atEnd ifFalse: [ 		(self isClassStartChar: (char := readStream peek)) 			ifTrue: [ ^ self parseObject ].		char = ${			ifTrue: [ ^ self parseMap ].		char = $[			ifTrue: [ ^ self parseList ].		(char = $' or: [ char = $" ])			ifTrue: [ ^ self parseString ].		char = $#			ifTrue: [ ^ self parseSymbol ].		char = $@			ifTrue: [ ^ self parseReference ].		(char = $- or: [ char isDigit ])			ifTrue: [ ^ self parseNumber ].		self parseConstantDo: [ :value | ^ value ] ].	self error: 'invalid input'! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 2/29/2012 21:50'!parseString	^ self parseStringInternal! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 5/29/2012 21:12'!parseStringInternal	| result delimiter |	delimiter := readStream next.	(delimiter = $' or: [ delimiter = $" ]) 		ifFalse: [ self error: ''' or " expected' ].	result := self stringStreamContents: [ :stream |		[ readStream atEnd or: [ readStream peek = delimiter ] ] whileFalse: [ 			stream nextPut: self parseCharacter ] ].	self expectChar: delimiter.	^ result! !!STONReader methodsFor: 'parsing-internal' stamp: 'SvenVanCaekenberghe 5/7/2012 10:42'!parseSymbol	| string |	self expectChar: $#.	readStream peek = $'		ifTrue: [ ^ self parseStringInternal asSymbol ].	string := self stringStreamContents: [ :stream |		[ readStream atEnd not and: [ self isSimpleSymbolChar: readStream peek ] ] whileTrue: [			stream nextPut: readStream next ] ].	string isEmpty		ifFalse: [ 			self consumeWhitespace.			^ string asSymbol ].	self error: 'unexpected input'! !!STONReader methodsFor: 'parsing' stamp: 'SvenVanCaekenberghe 11/27/2014 10:56'!parseValue	| value |	value := self parseSimpleValue.	^ (self matchChar: $:)		ifTrue: [ 			(self isValidPropertyNameType: value)				ifFalse: [ self error: 'unexpected property name type' ].			Association key: value value: self parseValue ]		ifFalse: [ value ]! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 11/29/2012 16:29'!processSubObjectsOf: object	stack push: object.	[ stack isEmpty ]		whileFalse: [ 			stack pop				stonProcessSubObjects: [ :each | 					each isStonReference						ifTrue: [ self resolveReference: each ]						ifFalse: [ 							each stonContainSubObjects								ifTrue: [ stack push: each ]								ifFalse: [ each ] ] ] ]! !!STONReader methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 10/25/2012 17:37'!reset	unresolvedReferences := 0.	objects removeAll! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/27/2012 16:31'!resolveReference: reference	^ self resolveReferenceIndex: reference index! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 1/18/2012 21:03'!resolveReferenceIndex: index	^ objects at: index! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 1/18/2012 21:01'!setReference: reference to: object	objects at: reference index put: object! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 1/16/2012 11:10'!storeReference: object	| index |	index := objects size + 1.	objects at: index put: object.	^ index! !!STONReader methodsFor: 'private' stamp: 'SvenVanCaekenberghe 2/9/2012 17:23'!stringStreamContents: block	stringStream ifNil: [ 		stringStream := (String new: 32) writeStream ].	stringStream reset.	block value: stringStream.	^ stringStream contents! !!STONReference commentStamp: 'SvenVanCaekenberghe 1/22/2012 20:13' prior: 34386068!STONReference holds a forward reference to another object during materialization.!!STONReference class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 1/18/2012 19:37'!index: integer	^ self new		index: integer;		yourself! !!STONReference methodsFor: 'comparing' stamp: 'SvenVanCaekenberghe 1/18/2012 20:23'!= anObject	^ self class == anObject class and: [ self index = anObject index ]! !!STONReference methodsFor: 'comparing' stamp: 'SvenVanCaekenberghe 1/18/2012 20:22'!hash	^ index hash! !!STONReference methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/18/2012 19:35'!index	^ index! !!STONReference methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/18/2012 19:35'!index: integer	index := integer! !!STONReference methodsFor: 'testing' stamp: 'SvenVanCaekenberghe 1/18/2012 20:22'!isStonReference	^ true! !!STONReference methodsFor: 'printing' stamp: 'SvenVanCaekenberghe 11/28/2012 21:06'!printOn: stream	super printOn: stream.	stream nextPut: $(; print: index; nextPut: $)! !!STONStreamWriter commentStamp: '<historical>' prior: 34386209!STONStreamWriter helps in streaming writing STON representations.This is an abstract class.!!STONListWriter commentStamp: '<historical>' prior: 34386358!STONArrayWriter helps in writing array based STON representations.!!STONListWriter methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/24/2012 10:03'!add: anObject	first ifTrue: [ first := false ] ifFalse: [ writer listElementSeparator ].	writer nextPut: anObject! !!STONShortListWriter commentStamp: '<historical>' prior: 34386487!STONShortArrayWriter helps in writing short array based STON representations.!!STONShortListWriter methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/12/2012 15:49'!add: anObject	first ifTrue: [ first := false ] ifFalse: [ writer shortListElementSeparator ].	writer nextPut: anObject! !!STONMapWriter commentStamp: '<historical>' prior: 34386621!STONDictionaryWriter helps in writing dictionary based STON representations.!!STONMapWriter methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/24/2012 10:03'!at: key put: value	first ifTrue: [ first := false ] ifFalse: [ writer mapElementSeparator ].	writer encodeKey: key value: value! !!STONStreamWriter class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 1/24/2012 09:29'!on: stonWriter	^ self new		on: stonWriter;		yourself! !!STONStreamWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/24/2012 09:30'!initialize	super initialize.	first := true! !!STONStreamWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/24/2012 09:29'!on: stonWriter	writer := stonWriter! !!STONWriter commentStamp: 'SvenVanCaekenberghe 4/27/2012 14:08' prior: 34386773!STONWriter serializes objects using the Smalltalk Object Notation format. Customization options are:- prettyPrint <Boolean> default is false	if true, produce pretty printed output- jsonMode <Boolean> default is false	if true, the follow changes occur	- strings are delimited with double quotes	- nil is encoded as null	- symbols are treated as strings	- only STON listClass and STON mapClass instances are allowed as composite objects	it is wise to also use either #error or #ignore as referencePolicy to avoid references- referencePolicy <#normal|#ignore|#error> default is #normal	if #normal, track and count object references and use references to implement sharing and break cycles	if #error, track object references and signal STONWriterError when a shared reference is encountered	if #ignore, don't track object references which might loop forever on cycles !!STONWriter class methodsFor: 'class initialization' stamp: 'SvenVanCaekenberghe 2/9/2012 16:43'!initialize	self initializeSTONCharacters.	self initializeSTONSimpleSymbolCharacters! !!STONWriter class methodsFor: 'class initialization' stamp: 'SvenVanCaekenberghe 1/14/2012 23:20'!initializeSTONCharacters	| escapes |	STONCharacters := Array new: 127.	32 to: 126 do: [ :each | 		STONCharacters at: each + 1 put: #pass ].	escapes := #( 8 '\b' 9 '\t' 10 '\n' 12 '\f' 13 '\r' 34 '\"' 39 '\''' 92 '\\' ).	1 to: escapes size - 1 by: 2 do: [ :index | 		STONCharacters 			at: (escapes at: index) + 1			put: (escapes at: index + 1) ]	! !!STONWriter class methodsFor: 'class initialization' stamp: 'SvenVanCaekenberghe 2/14/2012 17:50'!initializeSTONSimpleSymbolCharacters	"STONSimpleSymbolCharacters asArray collectWithIndex: [ :each :index |		each isZero ifTrue: [ (index - 1) asCharacter ] ]."			STONSimpleSymbolCharacters := ByteArray new: 256 withAll: 1.	1 to: 256 do: [ :each | | char |		char := (each - 1) asCharacter.		(self isSimpleSymbolChar: char)			ifTrue: [ 				STONSimpleSymbolCharacters at: each put: 0 ] ]! !!STONWriter class methodsFor: 'private' stamp: 'SvenVanCaekenberghe 2/14/2012 17:49'!isSimpleSymbolChar: char	^ 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_./' includes: char! !!STONWriter class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 1/14/2012 15:48'!on: writeStream	^ self new		on: writeStream;		yourself! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/14/2012 15:37'!close	writeStream ifNotNil: [		writeStream close.		writeStream := nil ]! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/29/2012 12:23:33'!encodeCharacter: char	| code encoding |	((code := char codePoint) < 127 and: [ (encoding := STONCharacters at: code + 1) notNil ])		ifTrue: [ 			encoding = #pass				ifTrue: [ writeStream nextPut: char ]				ifFalse: [ writeStream nextPutAll: encoding ] ]		ifFalse: [ 			writeStream nextPutAll: '\u'.			code printOn: writeStream base: 16 nDigits: 4 ]! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 1/23/2012 11:32'!encodeKey: key value: value	self nextPut: key.	self prettyPrintSpace.	writeStream nextPut: $:.	self prettyPrintSpace.	self nextPut: value! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 5/5/2012 16:56'!encodeList: elements	writeStream nextPut: $[.	elements isEmpty		ifTrue: [			self prettyPrintSpace ]		ifFalse: [			self indentedDo: [				self newlineIndent.				elements 					do: [ :each | self nextPut: each ]					separatedBy: [ self listElementSeparator ] ].			self newlineIndent ].	writeStream nextPut: $]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 5/5/2012 16:56'!encodeMap: pairs	| first |	first := true.	writeStream nextPut: ${.	pairs isEmpty		ifTrue: [			self prettyPrintSpace ]		ifFalse: [			self indentedDo: [				self newlineIndent.				pairs keysAndValuesDo: [ :key :value |					first 						ifTrue: [ first := false ] 						ifFalse: [ self mapElementSeparator ].					self encodeKey: key value: value ] ].			self newlineIndent ].	writeStream nextPut: $}! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/27/2012 13:49'!encodeString: string	writeStream nextPut: (jsonMode ifTrue: [ $" ] ifFalse: [ $' ]).	string do: [ :each |		self encodeCharacter: each ].	writeStream nextPut: (jsonMode ifTrue: [ $" ] ifFalse: [ $' ]).! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 1/23/2012 11:12'!indentedDo: block	level := level + 1.	block value.	level := level - 1! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 3/7/2013 10:38'!initialize	super initialize.	prettyPrint := false.	newLine := String cr.	level := 0.	referencePolicy := #normal.	jsonMode := false.	objects := IdentityDictionary new! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/15/2014 13:35'!isSimpleSymbol: symbol	symbol isEmpty ifTrue: [ ^ false ].	^ (symbol class 		findFirstInString: symbol 		inSet: STONSimpleSymbolCharacters 		startingAt: 1) = 0! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 4/27/2012 13:53'!jsonMode: boolean	jsonMode := boolean! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/29/2012 12:23:33'!listElementSeparator	writeStream nextPut: $,.	self newlineIndent! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/29/2012 12:23:33'!mapElementSeparator	writeStream nextPut: $,.	self newlineIndent! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 3/7/2013 10:46'!newLine: string	newLine := string! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 3/7/2013 10:39'!newlineIndent	prettyPrint ifTrue: [ 		writeStream nextPutAll: newLine.		level timesRepeat: [ writeStream tab ] ]! !!STONWriter methodsFor: 'public' stamp: 'SvenVanCaekenberghe 1/14/2012 15:47'!nextPut: anObject	anObject stonOn: self! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 4/29/2012 12:23:33'!on: aWriteStream	writeStream := aWriteStream! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 11/29/2012 15:54'!optimizeForLargeStructures	self class environment		at: #FLLargeIdentityDictionary		ifPresent: [ :identityDictionaryClass | objects := identityDictionaryClass new ].! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/14/2012 15:36'!prettyPrint: boolean	prettyPrint := boolean! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 1/23/2012 11:18'!prettyPrintSpace	prettyPrint ifTrue: [ writeStream space ]! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 4/29/2012 12:23:33'!referencePolicy: policy	self assert: ( #(#normal #ignore #error) includes: policy ).	referencePolicy := policy! !!STONWriter methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/14/2012 15:37'!reset	objects removeAll! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/29/2012 12:23:33'!shortListElementSeparator	writeStream nextPut: $,.	self prettyPrintSpace! !!STONWriter methodsFor: 'private' stamp: 'SvenVanCaekenberghe 4/26/2012 17:18'!with: object do: block	| index |	referencePolicy = #ignore 		ifTrue: [ ^ block value ].	(index := objects at: object ifAbsent: [ nil ]) notNil		ifTrue: [			referencePolicy = #error				ifTrue: [ ^ STONWriterError signal: 'Shared reference detected' ].			self writeReference: index ]		ifFalse: [			index := objects size + 1.			objects at: object put: index.			block value ]! !!STONWriter methodsFor: 'writing' stamp: 'ChristopheDemarey 11/6/2014 15:07'!writeAssociation: association	self 		encodeKey: association key		value: association value! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/14/2012 15:51'!writeBoolean: boolean	writeStream print: boolean! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/14/2012 16:05'!writeFloat: float	writeStream print: float! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/14/2012 15:48'!writeInteger: integer	writeStream print: integer! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/24/2012 10:00'!writeList: collection	self with: collection do: [ 		self encodeList: collection ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/24/2012 10:01'!writeMap: hashedCollection	self with: hashedCollection do: [ 		self encodeMap: hashedCollection ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 4/27/2012 13:50'!writeNull	jsonMode		ifTrue: [ writeStream nextPutAll: 'null' ]		ifFalse: [ writeStream print: nil ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 11/27/2014 11:08'!writeObject: anObject	| instanceVariableNames |	(instanceVariableNames := anObject class stonAllInstVarNames) isEmpty		ifTrue: [ 			self writeObject: anObject do: [ self encodeMap: #() ] ]		ifFalse: [ 			self writeObject: anObject streamMap: [ :dictionary | 				instanceVariableNames do: [ :each | 					(anObject instVarNamed: each)						ifNotNil: [ :value | 							dictionary at: each asSymbol put: value ]						ifNil: [ 							anObject stonShouldWriteNilInstVars 								ifTrue: [ dictionary at: each asSymbol put: nil ] ] ] ] ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 4/27/2012 14:01'!writeObject: anObject do: block	(jsonMode and: [ anObject class ~= STON listClass and: [ anObject class ~= STON mapClass ] ])		ifTrue: [ STONWriterError signal: 'Wrong object class for JSON mode' ].	self with: anObject do: [		writeStream nextPutAll: anObject class stonName.		self prettyPrintSpace.		block value ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 2/12/2012 20:02'!writeObject: object listSingleton: element	self writeObject: object do: [		writeStream nextPut: $[.		self 			prettyPrintSpace;			nextPut: element;			prettyPrintSpace.		writeStream nextPut: $] ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/24/2012 10:02'!writeObject: object streamList: block	self writeObject: object do: [ | listWriter |		listWriter := STONListWriter on: self.		writeStream nextPut: $[.		self indentedDo: [			self newlineIndent.			block value: listWriter ].		self newlineIndent.		writeStream nextPut: $] ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/24/2012 10:02'!writeObject: object streamMap: block	self writeObject: object do: [ | mapWriter |		mapWriter := STONMapWriter on: self.		writeStream nextPut: ${.		self indentedDo: [			self newlineIndent.			block value: mapWriter ].		self newlineIndent.		writeStream nextPut: $} ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/24/2012 10:02'!writeObject: object streamShortList: block	self writeObject: object do: [ | listWriter |		listWriter := STONShortListWriter on: self.		writeStream nextPut: $[.		self indentedDo: [			self prettyPrintSpace.			block value: listWriter ].		self prettyPrintSpace.		writeStream nextPut: $] ]! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 1/14/2012 17:29'!writeReference: index	writeStream		nextPut: $@;		print: index! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 2/29/2012 21:49'!writeString: string	self encodeString: string! !!STONWriter methodsFor: 'writing' stamp: 'SvenVanCaekenberghe 4/27/2012 13:52'!writeSymbol: symbol	jsonMode		ifTrue: [			self writeString: symbol ]		ifFalse: [			writeStream nextPut: $#.			(self isSimpleSymbol: symbol)				ifTrue: [					writeStream nextPutAll: symbol ]				ifFalse: [					self encodeString: symbol ] ]! !!STONReaderError commentStamp: '<historical>' prior: 34387712!STONReaderError is the error/exception signalled by STONReader when illegal/incorrect input is seen. !!STONReaderError class methodsFor: 'instance creation' stamp: 'DamienCassou 12/9/2013 10:04'!signal: aString streamPosition: streamPosition 	^ self new		streamPosition: streamPosition;		signal: aString;		yourself! !!STONReaderError methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 12/13/2013 16:12'!messageText	^ streamPosition 		ifNil: [ 			super messageText ] 		ifNotNil: [ :pos | 			'At character {1}: {2}' format: 				(Array with: streamPosition with: super messageText) ]! !!STONReaderError methodsFor: 'accessing' stamp: 'DamienCassou 12/9/2013 10:00'!streamPosition	^ streamPosition! !!STONReaderError methodsFor: 'accessing' stamp: 'DamienCassou 12/9/2013 10:00'!streamPosition: aNumber	streamPosition := aNumber! !!STONWriterError commentStamp: 'SvenVanCaekenberghe 4/26/2012 17:17' prior: 34387895!STONWriterError is the error/exception signalled by STONWriter when illegal/incorrect input is seen. !!String methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:27'!stonContainSubObjects 	^ false! !!String methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/14/2012 16:22'!stonOn: stonWriter	stonWriter writeString: self! !!Collection class methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 13:54'!fromSton: stonReader	| collection |	collection := self new.	stonReader parseListDo: [ :each |		collection add: each ].	^ collection! !!Collection methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 4/29/2012 12:23:33'!stonOn: stonWriter	stonWriter writeObject: self do: [		stonWriter encodeList: self ]! !"STON-Core"!!STONReaderTests commentStamp: 'SvenVanCaekenberghe 1/22/2012 20:14' prior: 0!STONReaderTests test materialization.!!STONTests commentStamp: '<historical>' prior: 0!STONTests tests the API offered by STON.!!STONWriteReadTests commentStamp: '<historical>' prior: 0!STONWriteReadTests test serialization followed by materialization.!!STONLargeWriteReadTests commentStamp: '<historical>' prior: 0!STONLargeWriteReadTests test the optimalizations for large structures.!!STONWritePrettyPrinterReadTests commentStamp: '<historical>' prior: 0!STONWritePrettyPrinterReadTests tests pretty printed serialization followed by materialization.!!STONWriterTests commentStamp: 'SvenVanCaekenberghe 1/22/2012 20:14' prior: 0!STONWriterTests test serialization.!!STONTestDomainObject commentStamp: 'SvenVanCaekenberghe 2/10/2012 20:25' prior: 0!STONTestDomainObject is used to support unit tests.Instance Variables	boolean:		<Boolean>	bytes:			<ByteArray>	color:			<Symbol>	created:		<DateAndTime>	description:	<String>	float:			<Float>	integer:		<Integer>	modified:	<DateAndTime>	tags:			<Array of: Symbol>!!STONTestUser commentStamp: '<historical>' prior: 0!STONTestUser is used to support unit tests.Instance Variables	enabled:		<Boolean>	password:	<String>	username:	<String>!!STONTestUser2 commentStamp: 'SvenVanCaekenberghe 2/10/2012 20:20' prior: 0!STONTestUser2 extends STONTestUser with explicit implementations of #fromSton: and #stonOn:!!STONTestUser3 commentStamp: '<historical>' prior: 0!STONTestUser3 extends STONTestUser but wants nil instance variables to be written!!STONTestMap commentStamp: '<historical>' prior: 0!STONTestMap is used to support unit tests.I am a Dictionary but I don't print my elements during #printOn: to allow safe inspection of structures containing cycles that would otherwise lead to infinite loops.!!STONReaderTests commentStamp: 'SvenVanCaekenberghe 1/22/2012 20:14' prior: 34432818!STONReaderTests test materialization.!!STONReaderTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 20:02'!materialize: string	^ STON reader 		on: string readStream;		next! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 11/27/2014 10:57'!testAssociation	self assert: (self materialize: '''foo'':1') = ('foo' -> 1).	self assert: (self materialize: '#bar:2') = (#bar -> 2).	self assert: (self materialize: '''foo bar'':#ok') = ('foo bar' -> #ok).	self assert: (self materialize: '123:456') = (123 -> 456).		self assert: (self materialize: '''foo'' : 1') = ('foo' -> 1).	self assert: (self materialize: '#bar : 2') = (#bar -> 2).	self assert: (self materialize: '''foo bar'' : #ok') = ('foo bar' -> #ok).	self assert: (self materialize: '123 : -456') = (123 -> -456).		self assert: (self materialize: '#foo : 1 : 2') = (#foo -> (1 -> 2))! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/15/2012 10:46'!testBoolean	self assert: (self materialize: 'true') = true.	self assert: (self materialize: 'false') = false! !!STONReaderTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testByteArray	self assert: (self materialize: 'ByteArray[''010203'']') = #(1 2 3) asByteArray! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/18/2012 20:44'!testCharacter	self assert: (self materialize: 'Character[''A'']') == $A.! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/23/2012 09:37'!testDate	| date |	date := Date year: 2012 month: 1 day: 1.	self assert: (self materialize: 'Date[''2012-01-01'']') = date! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/19/2012 10:01'!testDateAndTime	| dateAndTime |	dateAndTime := DateAndTime year: 2012 month: 1 day: 1 hour: 6 minute: 30 second: 15 offset: 1 hour.	self assert: (self materialize: 'DateAndTime[''2012-01-01T06:30:15+01:00'']') = dateAndTime! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:09'!testDictionary	| collection |	collection := STON mapClass new at: 1 put: 1; at: 2 put: 2; yourself.	self assert: (self materialize: '{1:1,2:2}') = collection.	self assert: (self materialize: '{}') = STON mapClass new.! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 10/25/2012 15:36'!testDictionaryWithComplexKeys	| collection reader |	collection := STON mapClass new at: true put: 1; at: #(foo) put: 2; yourself.	(reader := STONReader on: '{true:1,[#foo]:2}' readStream)		allowComplexMapKeys: true.	self assert: reader next = collection! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/7/2012 13:25'!testError	#( 'foo' '{foo:}' '{foo,}' '[1,]' '+1' ']' '#' '' '  ' '	' 'nul' 'tru' 'fals' ) do: [ :each |		self 			should: [ self materialize: each ] 			raise: STONReaderError ]! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/15/2012 11:05'!testFloat	self assert: (self materialize: '1.5') = 1.5.	self assert: (self materialize: '-1.5') = -1.5.	self assert: (self materialize: '0.0') = 0.0.	self assert: (Float pi closeTo: (self materialize: '3.14149')).	self assert: (1/3 closeTo: (self materialize: '0.333333')).	self assert: (self materialize: '1.0e100') = (10 raisedTo: 100) asFloat.	self assert: (self materialize: '1.0e-100') = (10 raisedTo: -100) asFloat.	self assert: (self materialize: '-1.0e-100') = (10 raisedTo: -100) asFloat negated.! !!STONReaderTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testIdentityDictionary	| collection |	collection := IdentityDictionary new at: 1 put: 1; at: 2 put: 2; yourself.	self assert: (self materialize: 'IdentityDictionary{1:1,2:2}') = collection.	self assert: (self materialize: 'IdentityDictionary{}') = IdentityDictionary new.! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/15/2012 09:21'!testInteger	self assert: (self materialize: '1') = 1.	self assert: (self materialize: '-1') = -1.	self assert: (self materialize: '0') = 0.	self assert: (self materialize: '1234567890') = 1234567890.	self assert: (self materialize: '-1234567890') = -1234567890! !!STONReaderTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testJsonString	"Allow double quotes for backwards JSON compatibility"		| string |	self assert: (self materialize: '"foo"') = 'foo'.	self assert: (self materialize: '"FOO"') = 'FOO'.	self assert: (self materialize: '"\u00E9l\u00E8ve en Fran\u00E7ais"') = 'élève en Français'.	string := String withAll: { 		$". $'. $\. Character tab. Character cr. Character lf.  Character newPage. Character backspace }.	self assert: (self materialize: '"\"\''\\\t\r\n\f\b"') = string.! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:11'!testList	| string |	self assert: STON listClass = Array.	self assert: (self materialize: '[1,2,3]') = (STON listClass with: 1 with: 2 with: 3).	self assert: (self materialize: '[]') = STON listClass new! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:11'!testMap	| string |	self assert: (self materialize: '{#foo:1}') = (STON mapClass new at: #foo put: 1; yourself).	self assert: (self materialize: '{}') = STON mapClass new! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/7/2012 13:53'!testMultiple	| reader |	reader := STON reader 		on: '123 -123 nil #foo true [ 0 ] false { #one : 1 }' readStream.	self deny: reader atEnd.	self assert: reader next equals: 123. 	self assert: reader next equals: -123. 	self assert: reader next equals: nil. 	self assert: reader next equals: #foo. 	self assert: reader next equals: true. 	self assert: reader next equals: { 0 }. 	self assert: reader next equals: false. 	self assert: reader next equals: (Dictionary with: #one -> 1). 	self assert: reader atEnd.! !!STONReaderTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testNewSymbol	| n notASymbol shouldBeSymbol |		"Find a name that has not yet been interned"	n := 0.	[ Symbol hasInterned: (notASymbol := 'notASymbol', n printString) ifTrue: [ :symbol | symbol ] ] 		whileTrue: [ n := n + 1 ].	"Parsing the new, not yet interned name should create a new Symbol"	shouldBeSymbol := self materialize: '#', notASymbol.	self assert: (shouldBeSymbol isSymbol and: [ notASymbol = shouldBeSymbol asString ])! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/15/2012 10:47'!testNil	self assert: (self materialize: 'nil') = nil! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 4/27/2012 13:51'!testNull	self assert: (self materialize: 'null') = nil! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/17/2012 21:45'!testObject	self assert: (self materialize: 'Point[1,2]') = (1@2).	self assert: (self materialize: 'Point[1.5,-0.5]') = (1.5 @ -0.5).! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/23/2012 12:30'!testOrderedCollection	| collection |	collection := OrderedCollection with: 1 with: 2 with: 3.	self assert: (self materialize: 'OrderedCollection[1,2,3]') = collection.	self assert: (self materialize: 'OrderedCollection[]') = OrderedCollection new.! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/7/2012 20:30'!testPoint	self assert: (self materialize: 'Point[1,2]') = (1@2)! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:12'!testReferenceCycle	| array |	array := (self materialize: '[1,@1]').	self assert: array class = STON listClass.	self assert: array size = 2.	self assert: array first = 1.	self assert: array second == array! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:13'!testReferenceSharing	| one array |	one := { #one }.	array := (self materialize: '[[#one],@2,@2]').	self assert: array = (STON listClass with: one with: one with: one).	self assert: array first == array second.	self assert: array first == array third! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/7/2012 13:53'!testStreaming	| reader |	reader := STON reader 		on: '1 2 3 4 5 6 7 8 9 10' readStream.	self 		assert: (Array streamContents: [ :stream |			[ reader atEnd] whileFalse: [ 				stream nextPut: reader next ] ]) sum		equals: #(1 2 3 4 5 6 7 8 9 10) sum! !!STONReaderTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testString	| string |	self assert: (self materialize: '''foo''') = 'foo'.	self assert: (self materialize: '''FOO''') = 'FOO'.	self assert: (self materialize: '''\u00E9l\u00E8ve en Fran\u00E7ais''') = 'élève en Français'.	string := String withAll: { 		$". $'. $\. Character tab. Character cr. Character lf.  Character newPage. Character backspace }.	self assert: (self materialize: '''\"\''\\\t\r\n\f\b''') = string.! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/15/2012 21:38'!testSymbol	| string |	self assert: (self materialize: '#''foo''') = #foo.	self assert: (self materialize: '#foo') = #foo! !!STONReaderTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testTime	| time |	time := Time hour: 6 minute: 30 second: 15.	self assert: (self materialize: 'Time[''06:30:15'']') = time.! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/23/2012 09:51'!testTimeStamp	| timeStamp |	timeStamp := TimeStamp year: 2012 month: 1 day: 1 hour: 6 minute: 30 second: 15 offset: 1 hour.	self assert: (self materialize: 'TimeStamp[''2012-01-01T06:30:15+01:00'']') = timeStamp! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 8/12/2014 15:11'!testUnknownClasses	| input object |	input := 'FooBar { #foo : 1, #bar : true }'.	self should: [ self materialize: input ] raise: STONReaderError.	object := STON reader 		acceptUnknownClasses: true; 		on: input readStream; 		next.	self assert: object class equals: STON mapClass.	self assert: (object at: #foo) equals: 1.	self assert: (object at: #bar).	self assert: (object at: STON classNameKey) equals: #FooBar! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/23/2012 16:13'!testUser	| user |	(user := STONTestUser new)		username: 'john@foo.com';		password: 'secret1'.	self assert: (self materialize: 'STONTestUser{#username:''john@foo.com'',#password:''secret1'',#enabled:true}') = user! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/7/2012 20:48'!testUser2	| user |	(user := STONTestUser2 new)		username: 'john@foo.com';		password: 'secret1'.	self assert: (self materialize: 'STONTestUser2{#username:''john@foo.com'',#password:''secret1'',#enabled:true}') = user! !!STONReaderTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/7/2012 13:39'!testWhitespace	| whitespace |	whitespace := { Character space. Character tab. Character cr. Character lf }.	self assert: (self materialize: whitespace, '123') = 123	! !!STONTests commentStamp: '<historical>' prior: 34432908!STONTests tests the API offered by STON.!!STONTests class methodsFor: 'utilities' stamp: 'SvenVanCaekenberghe 11/30/2012 20:04'!fastReadFromFileNamed: path	^ path asFileReference		readStreamDo: [ :stream | 			STON reader				on: (ZnBufferedReadStream on: stream);				optimizeForLargeStructures;				next ]! !!STONTests class methodsFor: 'utilities' stamp: 'SvenVanCaekenberghe 11/29/2012 22:51'!fastWrite: object toFileNamed: path	^ path asFileReference		writeStreamDo: [ :fileStream | 			ZnBufferedWriteStream				on: fileStream				do: [ :stream | 					STON writer						on: stream;						optimizeForLargeStructures;						nextPut: object ] ]! !!STONTests class methodsFor: 'utilities' stamp: 'SvenVanCaekenberghe 11/29/2012 22:27'!readFromFileNamed: path	^ path asFileReference		readStreamDo: [ :stream | 			STON reader				on: stream;				next ]! !!STONTests class methodsFor: 'utilities' stamp: 'SvenVanCaekenberghe 11/29/2012 22:28'!write: object toFileNamed: path	^ path asFileReference		writeStreamDo: [ :stream | 			STON writer				on: stream;				nextPut: object ]! !!STONTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 09:53'!testFromString	| object |	object := STON listClass withAll: { 1. 0. -1. true. false. nil }.	self assert: (STON fromString: '[1,0,-1,true,false,nil]') = object! !!STONTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/12/2012 20:20'!testPrettyPrinting	| object |	object := STONTestUser dummy.	self assert: (STON fromString: (STON toStringPretty: object)) = object.	object := STONTestDomainObject dummy.	self assert: (STON fromString: (STON toStringPretty: object)) = object! !!STONTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 11/29/2012 10:32'!testRoomExitCycles	| model room1 room2 exit1 exit2 ston object |	(room1 := STONTestMap new) at: #name put: 'Room 1'.	(room2 := STONTestMap new) at: #name put: 'Room 2'.	(exit1 := STONTestMap new)		at: #name put: 'Exit 1';		at: #origin put: room1;		at: #destination put: room2.	(exit2 := STONTestMap new)		at: #name put: 'Exit 2';		at: #origin put: room2;		at: #destination put: room1.	room1 at: #exit put: exit1.	room2 at: #exit put: exit2.	model := Array with: room1 with: room2.	ston := STON toString: model.	object := STON fromString: ston.	"We can't just compare because this is a recursive datastructure"	self assert: (object first at: #name) equals: 'Room 1'.	self assert: (object second at: #name) equals: 'Room 2'.	self assert: ((object first at: #exit) at: #name) equals: 'Exit 1'.	self assert: ((object second at: #exit) at: #name) equals: 'Exit 2'.	self assert: ((object first at: #exit) at: #origin) == object first.	self assert: ((object first at: #exit) at: #destination) == object second.	self assert: ((object second at: #exit) at: #origin) == object second.	self assert: ((object second at: #exit) at: #destination) == object first.	"Try writing again the parse model" 	self assert: (STON toString: object) equals: ston! !!STONTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 09:53'!testToString	| object |	object := STON listClass withAll: { 1. 0. -1. true. false. nil }.	self assert: (STON toString: object) = '[1,0,-1,true,false,nil]'! !!STONWriteReadTests commentStamp: '<historical>' prior: 34433010!STONWriteReadTests test serialization followed by materialization.!!STONLargeWriteReadTests commentStamp: '<historical>' prior: 34433142!STONLargeWriteReadTests test the optimalizations for large structures.!!STONLargeWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 11/29/2012 15:13'!materialize: string	^ STON reader		on: string readStream;		optimizeForLargeStructures;		next! !!STONLargeWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 11/29/2012 15:12'!serialize: anObject	^ String streamContents: [ :stream |		STON writer 			on: stream; 			prettyPrint: true;			optimizeForLargeStructures; 			nextPut: anObject ]! !!STONLargeWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 11/29/2012 15:12'!serializeJson: anObject	^ String streamContents: [ :stream |		STON jsonWriter 			on: stream; 			prettyPrint: true;			optimizeForLargeStructures; 			nextPut: anObject ]! !!STONWritePrettyPrinterReadTests commentStamp: '<historical>' prior: 34433286!STONWritePrettyPrinterReadTests tests pretty printed serialization followed by materialization.!!STONWritePrettyPrinterReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 20:03'!serialize: anObject	^ String streamContents: [ :stream |		STON writer 			on: stream; 			prettyPrint: true;			nextPut: anObject ]! !!STONWritePrettyPrinterReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/15/2012 09:33'!serializeJson: anObject	^ String streamContents: [ :stream |		STON jsonWriter 			on: stream; 			prettyPrint: true;			nextPut: anObject ]! !!STONWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 20:03'!materialize: string	^ STON reader 		on: string readStream;		next! !!STONWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 20:04'!serialize: anObject	^ String streamContents: [ :stream |		STON writer 			on: stream;			nextPut: anObject ]! !!STONWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 19:55'!serializeAndMaterialize: object	| serialization materialization |	serialization := self serialize: object.	materialization := self materialize: serialization.	self assert: object equals: materialization	! !!STONWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 19:55'!serializeAndMaterializeJsonMode: object	| serialization materialization |	serialization := self serializeJson: object.	materialization := self materialize: serialization.	self assert: object equals: materialization! !!STONWriteReadTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/15/2012 09:33'!serializeJson: anObject	^ String streamContents: [ :stream |		STON jsonWriter 			on: stream;			nextPut: anObject ]! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/8/2012 14:23'!testAssociations	| associations |	associations := OrderedCollection new.	1 to: 10 do: [ :each |		associations add: each -> each printString ].	self serializeAndMaterialize: associations! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/8/2012 14:58'!testCharacters	| characters |	characters := STON listClass withAll: ($a to: $z), ($A to: $Z).	self serializeAndMaterialize: characters! !!STONWriteReadTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testCollections	| collections |	collections := STON listClass withAll: {		#(1 2 3).		OrderedCollection withAll: #(1 2 3).		Set withAll: #(1 2 3).		IdentitySet withAll: #(1 2 3).		Bag withAll: #(1 2 2 3).		Dictionary new at: 1 put: 1; at: 2 put: 2; yourself.		IdentityDictionary new at: 1 put: 1; at: 2 put: 2; yourself.		#[1 2 3].		#(1 2 3) asIntegerArray.		#(1 2 3) asFloatArray }.	self serializeAndMaterialize: collections! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:14'!testDatesAndTimes	| datesAndTimes |	datesAndTimes := STON listClass withAll: { 		Time fromSeconds: 		Time now asSeconds. 		Date today. 		DateAndTime now. 		TimeStamp now }.	self serializeAndMaterialize: datesAndTimes! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/10/2012 20:53'!testDomainObject	| object objects |	object := STONTestDomainObject dummy.	self serializeAndMaterialize: object.	objects := STON listClass streamContents: [ :stream |		10 timesRepeat: [ stream nextPut: STONTestDomainObject dummy ] ].	self serializeAndMaterialize: objects.	objects := STON mapClass new.	10 timesRepeat: [ | newObject |		newObject := STONTestDomainObject dummy.		objects at: newObject integer put: newObject ].	self serializeAndMaterialize: objects.! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 10:17'!testEmpty	| empty |	empty := STON listClass new.	self serializeAndMaterialize: empty.	empty := STON mapClass new.	self serializeAndMaterialize: empty.! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 19:58'!testFloats	| floats serialization materialization |	floats := STON listClass withAll: ((-10 to: 10) collect: [ :each | each * Float pi ]).	serialization := self serialize: floats.	materialization := self materialize: serialization.	self assert: floats size = materialization size.	1 to: floats size do: [:index | | float |		float := floats at: index.		"Use #closeTo: instead of #= to increase portability"		self assert: (float closeTo: (materialization at: index)) ]! !!STONWriteReadTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testJsonMode	| object |	object := STON listClass withAll: {		Float pi.		'Hello World'.		true.		nil.		STON listClass withAll: #( 1 2 3) asByteArray.		STON mapClass new 			at: 'x' put: 1; 			at: 'y' put: 2; 			yourself 	}.	self serializeAndMaterializeJsonMode: object! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 4/10/2015 20:22'!testOrderedDictionary	"OrderedDictionary is special because it does not inherit from Dictionary.	It might also not exist in some dialects, where this test could be skipped."		| dictionaries orderedDictionaryClass orderedIdentityDictionaryClass |	orderedDictionaryClass := Smalltalk at: #OrderedDictionary ifAbsent: [ Dictionary ].	orderedIdentityDictionaryClass := Smalltalk at: #OrderedIdentityDictionary ifAbsent: [ IdentityDictionary ].	dictionaries := STON listClass withAll: {		orderedDictionaryClass new at: 1 put: 1; at: 2 put: 2; yourself.		orderedDictionaryClass new at: #a put: 1; at: #b put: -2; at: #c put: 0; yourself.		orderedDictionaryClass new.		orderedIdentityDictionaryClass new at: 1 put: 1; at: 2 put: 2; yourself.		orderedIdentityDictionaryClass new at: #a put: 1; at: #b put: -2; at: #c put: 0; yourself.		orderedIdentityDictionaryClass new }.	self serializeAndMaterialize: dictionaries! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 10:16'!testPrimitives	| primitives |	primitives := STON listClass withAll: { true. false. nil }.	self serializeAndMaterialize: primitives! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 4/10/2015 20:21'!testSmallDictionary	"SmallDictionary is special because it does not inherit from Dictionary.	It might also not exist in some dialects, where this test could be skipped."		| dictionaries smallDictionaryClass |	smallDictionaryClass := Smalltalk at: #SmallDictionary ifAbsent: [ Dictionary ].	dictionaries := STON listClass withAll: {		smallDictionaryClass new at: 1 put: 1; at: 2 put: 2; yourself.		smallDictionaryClass new at: 1 put: 1; at: 2 put: 2; yourself.		smallDictionaryClass new }.	self serializeAndMaterialize: dictionaries! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 10:17'!testSmallIntegers	| integers |	integers := STON listClass withAll: (-10 to: 10).	self serializeAndMaterialize: integers! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/23/2012 12:23'!testStrings	| strings |	strings := Collection allSubclasses collect: [ :each | each name asString ].	self serializeAndMaterialize: strings! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 4/15/2014 13:36'!testSymbols	| symbols |	self serializeAndMaterialize: #( #bytes #'' ).	symbols := Collection allSubclasses collect: [ :each | each name ].	self serializeAndMaterialize: symbols! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 3/24/2014 13:23'!testTextAndRunArray	| texts |	texts := { 		'Text!!' asText. 		(Text string: 'I am bold' attribute: TextEmphasis bold), ' and I am normal text'.		Text new }.	self serializeAndMaterialize: texts! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 10:17'!testUser	| user users |	user := STONTestUser dummy.	self serializeAndMaterialize: user.	users := STON listClass streamContents: [ :stream |		10 timesRepeat: [ stream nextPut: STONTestUser dummy ] ].	self serializeAndMaterialize: users.	users := STON mapClass new.	10 timesRepeat: [ | newUser |		newUser := STONTestUser dummy.		users at: newUser username put: newUser ].	self serializeAndMaterialize: users.! !!STONWriteReadTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/7/2012 20:48'!testUser2	| user users |	user := STONTestUser2 dummy.	self serializeAndMaterialize: user.	users := STON listClass streamContents: [ :stream |		10 timesRepeat: [ stream nextPut: STONTestUser2 dummy ] ].	self serializeAndMaterialize: users.	users := STON mapClass new.	10 timesRepeat: [ | newUser |		newUser := STONTestUser2 dummy.		users at: newUser username put: newUser ].	self serializeAndMaterialize: users.! !!STONWriterTests commentStamp: 'SvenVanCaekenberghe 1/22/2012 20:14' prior: 34433462!STONWriterTests test serialization.!!STONWriterTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 20:06'!serialize: anObject	^ String streamContents: [ :stream |		STON writer 			on: stream;			nextPut: anObject ]! !!STONWriterTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/15/2012 09:33'!serializeJson: anObject	^ String streamContents: [ :stream |		STON jsonWriter 			on: stream; 			nextPut: anObject ]! !!STONWriterTests methodsFor: 'private' stamp: 'SvenVanCaekenberghe 5/5/2012 20:05'!serializePretty: anObject	^ String streamContents: [ :stream |		STON writer 			on: stream; 			prettyPrint: true;			nextPut: anObject ]! !!STONWriterTests methodsFor: 'tests' stamp: 'ChristopheDemarey 11/6/2014 15:14'!testAssociation	self assert: (self serialize: 'foo' -> 1) =  '''foo'':1'.	self assert: (self serialize: #bar -> 2) =  '#bar:2'.	self assert: (self serialize: 'foo bar' -> #ok) =  '''foo bar'':#ok'.	self assert: (self serialize: 123 -> 456) =  '123:456'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/14/2012 15:50'!testBoolean	self assert: (self serialize: true) = 'true'.	self assert: (self serialize: false) = 'false'! !!STONWriterTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testByteArray	self assert: (self serialize: #(1 2 3) asByteArray) = 'ByteArray[''010203'']' ! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 3/7/2013 10:52'!testCustomNewline	| output |	output := String streamContents: [ :out |		(STON writer on: out)			newLine: String lf;			prettyPrint: true;			nextPut: #( 1 ) ].	self 		assert: output 		equals: ('[\	1\]' withCRs replaceAll: Character cr with: Character lf)! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/23/2012 09:33'!testDate	| date |	date := Date year: 2012 month: 1 day: 1.	self assert: (self serialize: date) = 'Date[''2012-01-01'']'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/19/2012 10:00'!testDateAndTime	| dateAndTime |	dateAndTime := DateAndTime year: 2012 month: 1 day: 1 hour: 6 minute: 30 second: 15 offset: 1 hour.	self assert: (self serialize: dateAndTime) = 'DateAndTime[''2012-01-01T06:30:15+01:00'']'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:15'!testDictionary	| collection |	collection := STON mapClass new at: 1 put: 1; at: 2 put: 2; yourself.	self assert: (self serialize: collection) = '{1:1,2:2}'.	self assert: (self serialize: STON mapClass new) = '{}'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 10/25/2012 15:37'!testDictionaryWithComplexKeys	| collection |	collection := STON mapClass new at: true put: 1; at: #(foo) put: 2; yourself.	self assert: (self serialize: collection) = '{true:1,[#foo]:2}'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 19:10'!testDoubleQuotedString	| string |	self assert: (self serializeJson: 'foo') = '"foo"'.	self assert: (self serializeJson: 'FOO') = '"FOO"'.	self assert: (self serializeJson: 'élève en Français') = '"\u00E9l\u00E8ve en Fran\u00E7ais"'.	string := String withAll: { 		$". $'. $\. Character tab. Character cr. Character lf.  Character newPage. Character backspace }.	self assert: (self serializeJson: string) = '"\"\''\\\t\r\n\f\b"'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 19:09'!testEmptyArrayPretty	self assert: (self serializePretty: STON listClass new) equals: '[ ]' ! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 19:09'!testEmptyDictionaryPretty	self assert: (self serializePretty: STON mapClass new) equals: '{ }' ! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/3/2012 20:56'!testFloat	self assert: (self serialize: 1.5) = '1.5'.	self assert: (self serialize: 0.0) = '0.0'.	self assert: (self serialize: -1.5) = '-1.5'.	self assert: ((self serialize: Float pi) beginsWith:  '3.14159').	self assert: ((self serialize: 1/3) beginsWith:  '0.333').	self assert: (self serialize: (10 raisedTo: 100) asFloat) = '1.0e100'.	self assert: (self serialize: (10 raisedTo: -50) asFloat) = '1.0e-50'.	self assert: (self serialize: (10 raisedTo: -50) asFloat negated) = '-1.0e-50'.! !!STONWriterTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testIdentityDictionary	| collection |	collection := IdentityDictionary new at: 1 put: 1; at: 2 put: 2; yourself.	self assert: (self serialize: collection) = 'IdentityDictionary{1:1,2:2}'.	self assert: (self serialize: IdentityDictionary new) = 'IdentityDictionary{}'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/14/2012 15:50'!testInteger	self assert: (self serialize: 1) = '1'.	self assert: (self serialize: 0) = '0'.	self assert: (self serialize: -1) = '-1'.	self assert: (self serialize: 1234567890) = '1234567890'.	self assert: (self serialize: -1234567890) = '-1234567890'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:06'!testIsSimpleSymbol	self assert: (STON writer isSimpleSymbol: #foo).	self assert: (STON writer isSimpleSymbol: #az).	self assert: (STON writer isSimpleSymbol: #AZ).	self assert: (STON writer isSimpleSymbol: #N0123456789).	self assert: (STON writer isSimpleSymbol: #foo123).	self assert: (STON writer isSimpleSymbol: #'Foo/Bar').	self assert: (STON writer isSimpleSymbol: #'Foo.Bar').	self assert: (STON writer isSimpleSymbol: #'Foo-Bar').	self assert: (STON writer isSimpleSymbol: #'Foo_Bar').	self assert: (STON writer isSimpleSymbol: #foo).	self deny: (STON writer isSimpleSymbol: #'#^&$%')! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 10:21'!testList	self assert: (self serialize: (STON listClass withAll: #(1 2 3))) = '[1,2,3]'.	self assert: (self serialize: STON listClass new) = '[]'.	self assert: (self serialize: (STON listClass withAll: { 1. -1. 0. #foo. 'a b c'. true. false. nil })) = '[1,-1,0,#foo,''a b c'',true,false,nil]'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 10:20'!testMap	| map |	(map := STON mapClass new)		at: #foo put: 1;		at: #bar put: 2.	self assert: (self serialize: map) = '{#foo:1,#bar:2}'.	self assert: (self serialize: STON mapClass new) = '{}'.	map removeAll.	map at: 'foo bar' put: #ok.	self assert: (self serialize: map) = '{''foo bar'':#ok}'.	map removeAll.	map at: 123 put: 456.	self assert: (self serialize: map) = '{123:456}'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/14/2012 20:20'!testNil	self assert: (self serialize: nil) = 'nil'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 19:10'!testNull	self assert: (self serializeJson: nil) equals: 'null'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/23/2012 12:28'!testOrderedCollection	| collection |	collection := OrderedCollection with: 1 with: 2 with: 3.	self assert: (self serialize: collection) = 'OrderedCollection[1,2,3]'.	self assert: (self serialize: OrderedCollection new) = 'OrderedCollection[]'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/14/2012 20:35'!testPoint	self assert: (self serialize: 1@2) = 'Point[1,2]'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/24/2012 10:22'!testReferenceCycle	| array |	array := STON listClass with: 1 with: nil.	array at: 2 put: array.	self assert: (self serialize: array) = '[1,@1]'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/29/2012 21:53'!testReferenceSharing	| array one |	one := { #one }.	array := STON listClass with: one with: one with: one.	self assert: (self serialize: array) = '[[#one],@2,@2]'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:07'!testReferenceSharingError	| serializer array one |	serializer := [ :object | 		String streamContents: [ :stream |			STON writer 				on: stream;				referencePolicy: #error; 				nextPut: object ] ].	one := { #one }.	array := STON listClass with: one with: one with: one.	self 		should: [ (serializer value: array) = '[[#one],[#one],[#one]]' ] 		raise: STONWriterError! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 20:07'!testReferenceSharingIgnore	| serializer array one |	serializer := [ :object | 		String streamContents: [ :stream |			STON writer 				on: stream;				referencePolicy: #ignore; 				nextPut: object ] ].	one := { #one }.	array := STON listClass with: one with: one with: one.	self assert: (serializer value: array) = '[[#one],[#one],[#one]]'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 19:11'!testRestrictedClassesInJsonMode	self should: [ self serializeJson: 1@2 ] raise: STONWriterError.	self should: [ self serializeJson: STONTestUser dummy ] raise: STONWriterError.! !!STONWriterTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testString	| string |	self assert: (self serialize: 'foo') = '''foo'''.	self assert: (self serialize: 'FOO') = '''FOO'''.	self assert: (self serialize: 'élève en Français') = '''\u00E9l\u00E8ve en Fran\u00E7ais'''.	string := String withAll: { 		$". $'. $\. Character tab. Character cr. Character lf.  Character newPage. Character backspace }.	self assert: (self serialize: string) = '''\"\''\\\t\r\n\f\b'''.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 2/14/2012 17:07'!testSymbol	self assert: (self serialize: #foo) = '#foo'.	self assert: (self serialize: #FOO) = '#FOO'.	self assert: (self serialize: #bytes) = '#bytes'.	self assert: (self serialize: #'foo.bar') = '#foo.bar'.	self assert: (self serialize: #'foo-bar') = '#foo-bar'.	self assert: (self serialize: #'foo_bar') = '#foo_bar'.	self assert: (self serialize: #'foo/bar') = '#foo/bar'.	self assert: (self serialize: #'foo bar') = '#''foo bar'''.	self assert: (self serialize: #foo123) = '#foo123'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 5/5/2012 19:12'!testSymbolAsString	self assert: (self serializeJson: #foo) = '"foo"'.	self assert: (self serializeJson: #'FOO') = '"FOO"'.! !!STONWriterTests methodsFor: 'tests' stamp: 'dkh 4/29/2012 08:48:15'!testTime	| time |	time := Time hour: 6 minute: 30 second: 15.	self assert: (self serialize: time) = 'Time[''06:30:15'']'.! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 1/19/2012 10:02'!testTimeStamp	| timeStamp |	timeStamp := TimeStamp year: 2012 month: 1 day: 1 hour: 6 minute: 30 second: 15 offset: 1 hour.	self assert: (self serialize: timeStamp) = 'TimeStamp[''2012-01-01T06:30:15+01:00'']'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 11/13/2013 23:58'!testUser	| user |	(user := STONTestUser new)		username: 'john@foo.com';		password: 'secret1'.	self 		assert: (self serialize: user)		equals: 'TestUser{#username:''john@foo.com'',#password:''secret1'',#enabled:true}'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 11/13/2013 23:58'!testUser2	| user |	(user := STONTestUser2 new)		username: 'john@foo.com';		password: 'secret1'.	self 		assert: (self serialize: user)		equals: 'TestUser2{#username:''john@foo.com'',#password:''secret1'',#enabled:true}'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 11/13/2013 23:56'!testUser3Nil	| user |	user := STONTestUser3 new.	self 		assert: (self serialize: user) 		equals: 'TestUser3{#username:nil,#password:nil,#enabled:true}'! !!STONWriterTests methodsFor: 'tests' stamp: 'SvenVanCaekenberghe 11/13/2013 23:56'!testUserNil	| user |	user := STONTestUser new.	self assert: (self serialize: user) equals: 'TestUser{#enabled:true}'! !!STONTestDomainObject commentStamp: 'SvenVanCaekenberghe 2/10/2012 20:25' prior: 34433583!STONTestDomainObject is used to support unit tests.Instance Variables	boolean:		<Boolean>	bytes:			<ByteArray>	color:			<Symbol>	created:		<DateAndTime>	description:	<String>	float:			<Float>	integer:		<Integer>	modified:	<DateAndTime>	tags:			<Array of: Symbol>!!STONTestDomainObject class methodsFor: 'instance creation' stamp: 'dkh 4/29/2012 08:48:15'!dummy	^ self new		integer: 999999 atRandom;		float: 999 atRandom / Float pi;		boolean: #(true false) atRandom;		bytes: (ByteArray streamContents: [ :out | 32 timesRepeat: [ out nextPut: 255 atRandom ] ]);		description: (String streamContents: [ :out | 16 atRandom timesRepeat: [ out nextPutAll: 'Blah' ] ]);		color: #(#red #green #blue) atRandom;		tags: (Array 			with: #(#one #two #three) atRandom 			with: #(#alpha #beta #gamma) atRandom 			with: #(#low #medium #high) atRandom);		yourself! !!STONTestDomainObject class methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 2/11/2012 13:15'!stonName	^ #TestDomainObject! !!STONTestDomainObject methodsFor: 'comparing' stamp: 'SvenVanCaekenberghe 5/5/2012 20:00'!= anObject	"Answer whether the receiver and anObject represent the same object."	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ color = anObject color		and: [ 			modified = anObject modified				and: [ 					created = anObject created						and: [ 							description = anObject description								and: [ 									boolean = anObject boolean										and: [ 											(float closeTo: anObject float) 		"Use #closeTo: instead of #= to increase portability"												and: [ 													bytes = anObject bytes 														and: [ 															integer = anObject integer 																and: [ tags = anObject tags ] ] ] ] ] ] ] ]! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!boolean	^ boolean! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!boolean: anObject	boolean := anObject! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!bytes	^ bytes! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!bytes: anObject	bytes := anObject! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!color	^ color! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!color: anObject	color := anObject! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!created	^ created! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!created: anObject	created := anObject! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!description	^ description! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!description: anObject	description := anObject! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!float	^ float! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!float: anObject	float := anObject! !!STONTestDomainObject methodsFor: 'comparing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!hash	"Answer an integer value that is related to the identity of the receiver."	^ color hash		bitXor:			(modified hash				bitXor:					(created hash						bitXor:							(description hash								bitXor: (boolean hash bitXor: (float hash bitXor: (bytes hash bitXor: (integer hash bitXor: tags hash)))))))! !!STONTestDomainObject methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 2/10/2012 20:45'!initialize	created := modified := DateAndTime now.! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!integer	^ integer! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!integer: anObject	integer := anObject! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!modified	^ modified! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!modified: anObject	modified := anObject! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!tags	^ tags! !!STONTestDomainObject methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 2/10/2012 20:44'!tags: anObject	tags := anObject! !!STONTestUser commentStamp: '<historical>' prior: 34433911!STONTestUser is used to support unit tests.Instance Variables	enabled:		<Boolean>	password:	<String>	username:	<String>!!STONTestUser class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 1/23/2012 10:10'!dummy	"self dummy"		| username password |	username := String streamContents: [ :stream |		stream << 'user'; print: 999 atRandom; << '@company'; print: 99 atRandom; << '.com' ].	password := String streamContents: [ :stream |		stream << 'secret'; print: 999 atRandom ].	^ self new		username: username;		password: password;		yourself! !!STONTestUser class methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 2/11/2012 12:45'!stonName	^ #TestUser! !!STONTestUser methodsFor: 'comparing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:14'!= anObject	"Answer whether the receiver and anObject represent the same object."	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ username = anObject username and: [ password = anObject password and: [ enabled = anObject enabled ] ]! !!STONTestUser methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:03'!enabled	^ enabled! !!STONTestUser methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:03'!enabled: anObject	enabled := anObject! !!STONTestUser methodsFor: 'comparing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:14'!hash	"Answer an integer value that is related to the identity of the receiver."	^ username hash bitXor: (password hash bitXor: enabled hash)! !!STONTestUser methodsFor: 'initialize-release' stamp: 'SvenVanCaekenberghe 1/23/2012 10:03'!initialize 	super initialize.	enabled := true! !!STONTestUser methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:03'!password	^ password! !!STONTestUser methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:03'!password: anObject	password := anObject! !!STONTestUser methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:03'!username	^ username! !!STONTestUser methodsFor: 'accessing' stamp: 'SvenVanCaekenberghe 1/23/2012 10:03'!username: anObject	username := anObject! !!STONTestUser2 commentStamp: 'SvenVanCaekenberghe 2/10/2012 20:20' prior: 34434115!STONTestUser2 extends STONTestUser with explicit implementations of #fromSton: and #stonOn:!!STONTestUser2 class methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 2/11/2012 13:15'!stonName	^ #TestUser2! !!STONTestUser2 methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 2/12/2012 14:32'!fromSton: stonReader	stonReader parseMapDo: [ :key :value |		key = #username ifTrue: [ username := value ].		key = #password ifTrue: [ password := value ].		key = #enabled ifTrue: [ enabled := value ] ]	! !!STONTestUser2 methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 2/7/2012 20:49'!stonOn: stonWriter		stonWriter writeObject: self streamMap: [ :dictionary |		dictionary			at: #username put: username;			at: #password put: password;			at: #enabled put: enabled ]! !!STONTestUser3 commentStamp: '<historical>' prior: 34434262!STONTestUser3 extends STONTestUser but wants nil instance variables to be written!!STONTestUser3 class methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 11/27/2014 11:10'!stonAllInstVarNames	^ #(username password enabled)! !!STONTestUser3 class methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 11/13/2013 23:57'!stonName	^ #TestUser3! !!STONTestUser3 methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 11/13/2013 23:54'!stonShouldWriteNilInstVars	^ true! !!STONTestMap commentStamp: '<historical>' prior: 34434397!STONTestMap is used to support unit tests.I am a Dictionary but I don't print my elements during #printOn: to allow safe inspection of structures containing cycles that would otherwise lead to infinite loops.!!STONTestMap class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 11/29/2012 22:34'!classTree	^ self classTree: Object! !!STONTestMap class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 11/29/2012 22:35'!classTree: topClass	| map |	map := IdentityDictionary new.	topClass withAllSubclasses do: [ :eachClass | | info |		(info := self new)			at: #name put: eachClass name asString;			at: #comment put: eachClass comment;			at: #isMeta put: eachClass isMeta;			at: #methods put: eachClass selectors.				map at: eachClass put: info ].	map keysAndValuesDo: [ :eachClass :eachInfo |		eachClass == topClass			ifFalse: [ eachInfo at: #superclass put: (map at: eachClass superclass) ].		eachInfo at: #subclasses put: (eachClass subclasses collect: [ :subClass | map at: subClass ]) ].	^ map at: topClass! !!STONTestMap class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 11/29/2012 22:34'!classTreeExtended	^ self classTreeExtended: Object! !!STONTestMap class methodsFor: 'instance creation' stamp: 'SvenVanCaekenberghe 11/30/2012 08:55'!classTreeExtended: topClass	| map |	map := IdentityDictionary new.	topClass withAllSubclasses do: [ :eachClass | | info methodsInfo |		(info := self new)			at: #name put: eachClass name asString;			at: #comment put: eachClass comment;			at: #isMeta put: eachClass isMeta;			at: #methods put: (methodsInfo := self new).		eachClass methods do: [ :eachMethod | | methodInfo |			(methodInfo := self new)				at: #name put: eachMethod selector;				at: #numArgs put: eachMethod numArgs;				at: #class put: info.			methodsInfo at: eachMethod selector put: methodInfo ].		map at: eachClass put: info ].	map keysAndValuesDo: [ :eachClass :eachInfo |		eachClass == topClass 			ifFalse: [ eachInfo at: #superclass put: (map at: eachClass superclass) ].		eachInfo at: #subclasses put: (eachClass subclasses collect: [ :subClass | map at: subClass ]) ].	^ map at: topClass! !!STONTestMap class methodsFor: 'ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 21:18'!stonName	^ #TestMap! !!STONTestMap methodsFor: 'printing' stamp: 'SvenVanCaekenberghe 11/29/2012 21:32'!printElementsOn: stream	stream		nextPut: $(;		nextPut: $#;		print: self size;		nextPut: $)! !"STON-Tests"!!CCConfigurationError commentStamp: 'StephaneDucasse 3/31/2015 10:26' prior: 0!I manage error related to configuration.!!PropertyError commentStamp: 'StephaneDucasse 3/31/2015 10:23' prior: 0!An error related to the property access.!!CCConfiguration commentStamp: 'CyrilFerlicot 4/2/2015 16:36' prior: 0!I am a class managing configuration used  by an application.In fact I managed a set of properties. I am implementing a composite pattern since a configuration can contain other sub-configurations.Information not found in a configuration is looked up in its parent (and it's done recursively).I have a Dictionnary call 'properties' which contains the properties of the configuration. On CCConfiguration I contains the 'baseDirectory' where to search the config and a collection of configurations call 'configurations'. Part of the property management has been copied from PRBasicObject and it may be nice to turn it into a trait in the future. For create a new Configuration you need to extands CCConfiguration. In your XXCocoonConfiguration's class you'll need to define new properties. For example if you need some input files you can create this method : inputFiles		<cocoonParameter: 'List the files that I need to use.'>	^ self propertyAt: 'inputFiles' default: [ self defaultInputFiles ]with a default value.defaultInputFiles	<cocoonDefaultParameter:'None'>		^ Array newThen you create a new Configuration Interpreter by extending the CCSTONConfigurationInterpreter class.On a method call "configuration" you need to create a new XXCocoonConfiguration's class and then you need to overwrite the "initializeInterpretationBlocks" to get your configuration.!!CCDocumentationGeneration commentStamp: 'CyrilFerlicot 4/2/2015 16:37' prior: 0!I generate a documentation of the parameters of a CCConfiguration.To use it it's simple. On a property's method add this pragma: 	<cocoonParameter: 'The documentation of my property'>The default value's property need to be named like this: if your property is 'author' so the default value's method will be named 'defaultAuthor'.Inside the default method add this pragma: 	<cocoonDefaultParameter: 'The description of the default value.'>If the default value is a litteral you can also write 	<cocoonDefaultParameter: ''>This will print the litteral value.Now you can generate your documentation like this.Create a stream and use this simple command:	stream := String new writeStream.	CCDocumentationGeneration of: myClassWhoExtendsCCConfiguration on: stream.!!CCSTONConfigurationInterpreter commentStamp: 'CyrilFerlicot 4/1/2015 10:15' prior: 0!I am an interpreter used to convert data from STON into  objects in configurations.!!CCConfigurationError commentStamp: 'StephaneDucasse 3/31/2015 10:26' prior: 34481522!I manage error related to configuration.!!PropertyError commentStamp: 'StephaneDucasse 3/31/2015 10:23' prior: 34481637!An error related to the property access.!!CCConfiguration commentStamp: 'CyrilFerlicot 4/2/2015 16:36' prior: 34481751!I am a class managing configuration used  by an application.In fact I managed a set of properties. I am implementing a composite pattern since a configuration can contain other sub-configurations.Information not found in a configuration is looked up in its parent (and it's done recursively).I have a Dictionnary call 'properties' which contains the properties of the configuration. On CCConfiguration I contains the 'baseDirectory' where to search the config and a collection of configurations call 'configurations'. Part of the property management has been copied from PRBasicObject and it may be nice to turn it into a trait in the future. For create a new Configuration you need to extands CCConfiguration. In your XXCocoonConfiguration's class you'll need to define new properties. For example if you need some input files you can create this method : inputFiles		<cocoonParameter: 'List the files that I need to use.'>	^ self propertyAt: 'inputFiles' default: [ self defaultInputFiles ]with a default value.defaultInputFiles	<cocoonDefaultParameter:'None'>		^ Array newThen you create a new Configuration Interpreter by extending the CCSTONConfigurationInterpreter class.On a method call "configuration" you need to create a new XXCocoonConfiguration's class and then you need to overwrite the "initializeInterpretationBlocks" to get your configuration.!!CCConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 12:37'!baseDirectory	<cocoonParameter:'Indicate where to look for files with a non-absolute path.'>		^ self propertyAt: 'baseDirectory' default: [ self defaultBaseDirectory ]! !!CCConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 15:06'!baseDirectory: aDirectory	"Set the directory where to look for the file with non-absolute path."		self propertyAt: 'baseDirectory' put: aDirectory! !!CCConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 12:37'!configurations	<cocoonParameter:'Each configuration can define several sub configurations, each of which inherits the properties of its parent.'>		^ self propertyAt: 'configurations' ifAbsent: [ self defaultConfigurations ] "don't use #propertyAt:default: here to avoid asking the parent for its own configurations"! !!CCConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 14:34'!configurations: aCollection	"set the configurations in our dictionnary"	^ self propertyAt: 'configurations' put: aCollection! !!CCConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 12:37'!defaultBaseDirectory	<cocoonDefaultParameter: 'The current working directory'>		^ FileSystem workingDirectory! !!CCConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 12:38'!defaultConfigurationName		^ 'Default Configuration'! !!CCConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 12:38'!defaultConfigurations	<cocoonDefaultParameter: 'A dictionary of default configurations from the exporters.'>		^ Dictionary new		at: self defaultConfigurationName			put:				(CCConfiguration new						configurations: Dictionary new; "we specify an empty collection of sub configurations to avoid infinite recursion : a default configuration would otherwise contain a collection of default configurations, each containing a collection of default configurations..."						yourself);		yourself		! !!CCConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:03'!error: aString	^ CCConfigurationError signal: aString! !!CCConfiguration methodsFor: 'private' stamp: 'CyrilFerlicot 3/31/2015 15:15'!errorPropertyNotFound: aSelector	"Error on a property"		PropertyError signal: 'Property ' , aSelector , ' not found.'! !!CCConfiguration methodsFor: 'testing' stamp: 'StephaneDucasse 3/29/2015 20:52'!hasParent	^ parent notNil! !!CCConfiguration methodsFor: 'testing' stamp: 'StephaneDucasse 3/31/2015 10:16'!hasProperty: aKey	"Test if the property ==aKey== is defined within the receiver."	^ self properties includesKey: aKey! !!CCConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/29/2015 20:52'!log: aString	self verbose		ifTrue: [ 			FileStream stderr				<< aString;				cr ]! !!CCConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 15:16'!parent	"A parent is a Configuration I extends"		^ parent! !!CCConfiguration methodsFor: 'accessing' stamp: 'StephaneDucasse 3/29/2015 20:52'!parent: aConfiguration	parent := aConfiguration! !!CCConfiguration methodsFor: 'copying' stamp: 'CyrilFerlicot 3/31/2015 15:18'!postCopy	"I'm a hook method in the sense of Design Patterns TemplateHook/Methods. I'm called by copy. self is a shallow copy, subclasses should copy fields as necessary to complete the full copy"	super postCopy.	properties := properties copy! !!CCConfiguration methodsFor: 'printing' stamp: 'StephaneDucasse 3/31/2015 10:16'!printOn: aStream	<ignoreForCoverage>	super printOn: aStream.	aStream nextPut: $[; print: self identityHash; nextPut: $]! !!CCConfiguration methodsFor: 'accessing - properties' stamp: 'StephaneDucasse 3/31/2015 10:15'!properties	"Answer the property dictionary of the receiver."	^ properties ifNil: [ properties := Dictionary new ]! !!CCConfiguration methodsFor: 'accessing - properties' stamp: 'StephaneDucasse 3/31/2015 10:15'!propertyAt: aKey	"Answer the value of the property ==aKey==, raises an error if the property doesn't exist."	^ self propertyAt: aKey ifAbsent: [ self errorPropertyNotFound: aKey ]! !!CCConfiguration methodsFor: 'accessing - properties' stamp: 'CyrilFerlicot 3/31/2015 15:23'!propertyAt: aKey default: aBlock	"Answer the value of ==aKey==. If the key have no entry I look on the parent or execute a block if i'm an orphan."	^ self		propertyAt: aKey		ifAbsent: [ 			self hasParent				ifTrue: [ self parent propertyAt: aKey default: aBlock ]				ifFalse: aBlock ]! !!CCConfiguration methodsFor: 'accessing - properties' stamp: 'CyrilFerlicot 3/31/2015 13:46'!propertyAt: aKey ifAbsent: aBlock	"Answer the value of the property ==aKey==, or the result of ==aBlock== if the property doesn't exist."	^ self properties at: aKey ifAbsent: aBlock! !!CCConfiguration methodsFor: 'accessing - properties' stamp: 'StephaneDucasse 3/31/2015 10:15'!propertyAt: aKey ifAbsentPut: aBlock	"Answer the value of the property ==aKey==, or if the property doesn't exist adds and answers the result of evaluating ==aBlock==."	^ self properties at: aKey ifAbsentPut: aBlock! !!CCConfiguration methodsFor: 'accessing - properties' stamp: 'StephaneDucasse 3/31/2015 10:15'!propertyAt: aKey put: aValue	"Adds or replaces the property ==aKey== with ==aValue==."	^ self properties at: aKey put: aValue! !!CCConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 15:25'!subConfigurationNamed: aString	"I return a configuration of the name 'aString'. If this configuration doesn't exist i raise an error."		^ self configurations		at: aString		ifAbsent: [ 			self configurations do: [ :conf | (conf subConfigurationNamed: aString) ifNotNil: [ :subsub | ^ subsub ] ].			self error: 'No configuration named "' , aString , '"' ]! !!CCDocumentationGeneration commentStamp: 'CyrilFerlicot 4/2/2015 16:37' prior: 34483223!I generate a documentation of the parameters of a CCConfiguration.To use it it's simple. On a property's method add this pragma: 	<cocoonParameter: 'The documentation of my property'>The default value's property need to be named like this: if your property is 'author' so the default value's method will be named 'defaultAuthor'.Inside the default method add this pragma: 	<cocoonDefaultParameter: 'The description of the default value.'>If the default value is a litteral you can also write 	<cocoonDefaultParameter: ''>This will print the litteral value.Now you can generate your documentation like this.Create a stream and use this simple command:	stream := String new writeStream.	CCDocumentationGeneration of: myClassWhoExtendsCCConfiguration on: stream.!!CCDocumentationGeneration class methodsFor: 'class initialization' stamp: 'CyrilFerlicot 4/1/2015 16:03'!of: aClassConfiguration on: aStream 		"I generate the documentation of the parameters of a configuration on a Stream."		^self new 		stream: aStream;		generateDocOf: aClassConfiguration;		stream! !!CCDocumentationGeneration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 16:46'!allPragmasInClass: aClass	"I return the list of the pragmas 'cocoonParameter:' of a class of configuration."	^ Pragma allNamed: #cocoonParameter: in: aClass sortedUsing: [ :p1 :p2 | p1 selector < p2 selector ]! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/2/2015 14:43'!commentIfEmptyPragma: aMethod	"I check if a method return a litteral. If it's a litteral I return the code of the litteral, else i return 'uncommented'."	^ aMethod isQuick		ifTrue: [ '==' , aMethod ast statements first value formattedCode , '==' ]		ifFalse: [ 'uncommented' ]! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/2/2015 14:37'!commentOfDefaultMethod: aMethod	"I take a parameter's method, search for his default value method and return the documentation."	^ self pragmaDefaultParameterComment: (self defaultParameterPragmaOfMethod: aMethod)! !!CCDocumentationGeneration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 16:52'!defaultParameterPragmaOfMethod: aMethod	"I return the cocoonDefaultParameter:'s pragma of a default method."	^ (aMethod pragmas select: [ :each | each keyword = #cocoonDefaultParameter: ]) first! !!CCDocumentationGeneration methodsFor: 'action' stamp: 'CyrilFerlicot 4/2/2015 14:31'!generateDocAsStringOf: aClassConfiguration	"I return a String with the documentation of the properties of aClassConfiguration."	^ (self generateDocOf: aClassConfiguration) contents! !!CCDocumentationGeneration methodsFor: 'action' stamp: 'CyrilFerlicot 4/2/2015 14:35'!generateDocOf: aClassConfiguration	"I return a Stream with the documentation of the properties of Cocoon."	(self allPragmasInClass: aClassConfiguration) do: [ :pragma | self writeConfigurationParameter: pragma ].	^ self stream! !!CCDocumentationGeneration methodsFor: 'action' stamp: 'CyrilFerlicot 4/2/2015 14:35'!generateDocOf: aClassConfiguration inFile: aPath	"Generate the documentation of the properties of a Class Configuration into a File."	| streamUse |	streamUse := FileStream forceNewFileNamed: aPath.	streamUse nextPutAll: (self generateDocAsStringOf: aClassConfiguration).	streamUse close! !!CCDocumentationGeneration methodsFor: 'initialization' stamp: 'CyrilFerlicot 4/2/2015 14:35'!initialize	super initialize.	self stream: String new writeStream! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/2/2015 14:31'!methodDefaultComment: aPragma	"I return the comment of the default value of a property concern by a pragma."		^ self commentOfDefaultMethod: (self methodDefaultValue: aPragma).! !!CCDocumentationGeneration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 14:31'!methodDefaultValue: aPragma	"I return the method of the default value of the property concerned by a Pragma."	^ aPragma methodClass >> (#default , aPragma selector capitalized) asSymbol! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/2/2015 14:39'!pragmaComment: aPragma	"Return the comment of a pragma."	^ aPragma argumentAt: 1! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/2/2015 14:43'!pragmaDefaultParameterComment: aPragma	"I write the comment of a cocoonDefaultParameter:'s pragma."	| commentPrag |	commentPrag := self pragmaComment: aPragma.	^ commentPrag = ''		ifTrue: [ self commentIfEmptyPragma: aPragma method ]		ifFalse: [ commentPrag ]! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/2/2015 14:44'!pragmaParameterComment: aPragma	"Return the comment of a pragma. If no comment, return 'uncommented'."	| commentPrag |	commentPrag := self pragmaComment: aPragma.	^ commentPrag = ''		ifTrue: [ 'uncommented' ]		ifFalse: [ commentPrag ]! !!CCDocumentationGeneration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 15:32'!stream	^ stream! !!CCDocumentationGeneration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 15:32'!stream: anObject	stream := anObject! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/1/2015 15:42'!writeConfigurationParameter: aPragma	"I write into a Stream the details of a Pragma."	self stream		nextPutAll: '!!!!!!!! ' , aPragma selector;		lf.	self writeParameter: aPragma.	self writeDefaultParameter: aPragma! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/1/2015 17:01'!writeDefaultParameter: aPragma	"I write the details of a the default value of a parameter."	self writeDefaultParameter: aPragma onStream: self stream! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/1/2015 17:01'!writeDefaultParameter: aPragma onStream: aStream	"I write the details of a the default value of a parameter on a Stream."	aStream		nextPutAll: ';Default value';		lf;		nextPutAll: ':';		nextPutAll: (self methodDefaultComment: aPragma);		lf;		lf! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/1/2015 17:06'!writeParameter: aPragma	"I write the details of a configuration parameter."	self writeParameter: aPragma onStream: self stream! !!CCDocumentationGeneration methodsFor: 'printing' stamp: 'CyrilFerlicot 4/2/2015 13:42'!writeParameter: aPragma onStream: aStream	"I write the details of a configuration parameter on a stream."	aStream		nextPutAll: '@sec:confParam:';		nextPutAll: aPragma selector;		lf;		nextPutAll: (self pragmaParameterComment: aPragma);		lf;		lf! !!CCSTONConfigurationInterpreter commentStamp: 'CyrilFerlicot 4/1/2015 10:15' prior: 34484095!I am an interpreter used to convert data from STON into  objects in configurations.!!CCSTONConfigurationInterpreter class methodsFor: 'instance creation' stamp: 'StephaneDucasse 3/29/2015 20:52'!baseDirectory: aDirectory	^ self new		setBaseDirectory: aDirectory;		yourself! !!CCSTONConfigurationInterpreter methodsFor: 'public' stamp: 'StephaneDucasse 3/29/2015 20:52'!buildFromDictionary: aDictionary 	^ self interpret: aDictionary! !!CCSTONConfigurationInterpreter methodsFor: 'public' stamp: 'StephaneDucasse 3/29/2015 20:52'!buildFromFile: aFile	^ aFile		readStreamDo: [ :input | 			| input2 |			self flag: #todo. "Remove that as soon as Pharo 3.0 is the lowest supported Pharo"			"The following is here because of case #12259: 'FileSystem memory reads/writes using a binary stream by default'."			input2 := input.			(aFile fileSystem store isKindOf: MemoryStore)				ifTrue: [ input2 := input2 contents asString readStream ].			self buildFromStream: input2 ]! !!CCSTONConfigurationInterpreter methodsFor: 'public' stamp: 'StephaneDucasse 3/29/2015 20:52'!buildFromStream: aStream	^ self buildFromDictionary: (STON fromStream: aStream)! !!CCSTONConfigurationInterpreter methodsFor: 'public' stamp: 'StephaneDucasse 3/29/2015 20:52'!buildFromString: aString	^ self buildFromDictionary: (STON fromString: aString)! !!CCSTONConfigurationInterpreter methodsFor: 'initialize' stamp: 'CyrilFerlicot 4/16/2015 11:12'!configuration	^ configuration! !!CCSTONConfigurationInterpreter methodsFor: 'private-interpreting' stamp: 'StephaneDucasse 3/29/2015 20:52'!configurations: subConfigurations	^ subConfigurations		collect: [ :config | 			| newInterpreter |			newInterpreter := self class baseDirectory: configuration baseDirectory.			(newInterpreter interpret: config)				parent: configuration;				yourself ]! !!CCSTONConfigurationInterpreter methodsFor: 'private' stamp: 'StephaneDucasse 3/29/2015 20:52'!defaultInterpretationBlock	^ [ :value | value ]! !!CCSTONConfigurationInterpreter methodsFor: 'initialize' stamp: 'StephaneDucasse 3/31/2015 10:18'!initialize	super initialize.	self initializeInterpretationBlocks! !!CCSTONConfigurationInterpreter methodsFor: 'initialize' stamp: 'StephaneDucasse 3/31/2015 10:20'!initializeInterpretationBlocks	interpretationBlocks := Dictionary new		at: 'configurations' put: [ :value | self configurations: value ];		yourself! !!CCSTONConfigurationInterpreter methodsFor: 'protocol' stamp: 'StephaneDucasse 3/29/2015 20:52'!interpret: aSTONDictionary	aSTONDictionary		keysAndValuesDo: [ :key :value | configuration propertyAt: key put: ((self interpretationBlockFor: key) value: value) ].	^ configuration! !!CCSTONConfigurationInterpreter methodsFor: 'private' stamp: 'StephaneDucasse 3/29/2015 20:52'!interpretLoopFor: key with: value	^ configuration propertyAt: key put: ((self interpretationBlockFor: key) value: value)! !!CCSTONConfigurationInterpreter methodsFor: 'private' stamp: 'StephaneDucasse 3/29/2015 20:52'!interpretationBlockFor: aKey	^ interpretationBlocks		at: aKey		ifAbsent: [ self defaultInterpretationBlock ]! !!CCSTONConfigurationInterpreter methodsFor: 'initialize' stamp: 'CyrilFerlicot 4/16/2015 11:11'!newConfiguration	"I need to be override in my subclasses."	^ CCConfiguration new! !!CCSTONConfigurationInterpreter methodsFor: 'private' stamp: 'StephaneDucasse 3/29/2015 20:52'!resolvePath: aPath	^ configuration baseDirectory resolve: aPath asFileReference! !!CCSTONConfigurationInterpreter methodsFor: 'initialize' stamp: 'CyrilFerlicot 4/16/2015 11:12'!setBaseDirectory: aDirectory	configuration := self newConfiguration		baseDirectory: aDirectory;		yourself! !"Cocoon-Core"!!CCMockConfigurationInterpreter commentStamp: 'CyrilFerlicot 4/1/2015 10:56' prior: 0!I'm a Mock interpreter for tests.!!CCMockConfiguration commentStamp: 'CyrilFerlicot 4/2/2015 12:39' prior: 0!Hi !! I'm a Mock for the Cocoon tests !!(CCMockConfiguration >> #mockPropertyBis) basicInspect!!CCMockConfigurationInterpreter commentStamp: 'CyrilFerlicot 4/1/2015 10:56' prior: 34502393!I'm a Mock interpreter for tests.!!CCMockConfigurationInterpreter methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 11:07'!initializeInterpretationBlocks	super initializeInterpretationBlocks.	interpretationBlocks		at: 'mockProperty' put: [ :value | self mockProperty: value ];		at: 'mockPropertyBis' put: [ :value | self mockPropertyBis: value ];		yourself! !!CCMockConfigurationInterpreter methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 11:00'!mockProperty: aString	^ aString ! !!CCMockConfigurationInterpreter methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 11:07'!mockPropertyBis: aString	^ aString ! !!CCMockConfigurationInterpreter methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 13:13'!newConfiguration	^ CCMockConfiguration new! !!CCMockConfiguration commentStamp: 'CyrilFerlicot 4/2/2015 12:39' prior: 34502504!Hi !! I'm a Mock for the Cocoon tests !!(CCMockConfiguration >> #mockPropertyBis) basicInspect!!CCMockConfiguration methodsFor: 'accessing-defaults' stamp: 'CyrilFerlicot 4/2/2015 15:08'!defaultMockProperty	<cocoonDefaultParameter: ''>	^ 'Mock'! !!CCMockConfiguration methodsFor: 'accessing-defaults' stamp: 'CyrilFerlicot 4/2/2015 12:35'!defaultMockPropertyBis	<cocoonDefaultParameter: ''>	^ 0! !!CCMockConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:08'!mockProperty	<cocoonParameter: ''>	^ self propertyAt: 'mockProperty' default: [ self defaultMockProperty ]! !!CCMockConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 14:57'!mockProperty: aString	self propertyAt: 'mockProperty' put: aString! !!CCMockConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 14:57'!mockPropertyBis	<cocoonParameter: 'Test'>	^ self propertyAt: 'mockPropertyBis' default: [ self defaultMockPropertyBis ]! !!CCMockConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 11:06'!mockPropertyBis: aString	self propertyAt: 'mockPropertyBis' put: aString! !!CCConfigurationTest methodsFor: 'tests-copying' stamp: 'CyrilFerlicot 3/31/2015 15:50'!testCopyProperties	"I'm here to test if postCopy is right."	|config|	config := CCConfiguration new.	self deny: config properties == config copy properties.! !!CCConfigurationTest methodsFor: 'tests-testing' stamp: 'CyrilFerlicot 4/1/2015 09:36'!testHasParent	|config configChild|	config := CCConfiguration new.	configChild := CCConfiguration new.	configChild parent: config.	self deny: config hasParent.	self assert: configChild hasParent ! !!CCConfigurationTest methodsFor: 'tests-properties' stamp: 'CyrilFerlicot 3/31/2015 15:33'!testProperties		|config|	config := CCConfiguration new.	self assert: config properties notNil.	config instVarNamed: 'properties' put: nil.	config propertyAt: #foo put: #bar.	config instVarNamed: 'properties' put: nil.	config propertyAt: #foo ifAbsent: [ nil ].	config instVarNamed: 'properties' put: nil.	config propertyAt: #foo ifAbsentPut: [ #bar ].	config instVarNamed: 'properties' put: nil.	config hasProperty: #foo.	config instVarNamed: 'properties' put: nil		! !!CCConfigurationTest methodsFor: 'tests-properties' stamp: 'CyrilFerlicot 3/31/2015 16:22'!testPropertiesAt	|config|	config := CCConfiguration new.	self assert: (config propertyAt: #foo put: 'bar') = 'bar'.	self assert: (config propertyAt: #foo) = 'bar'.	self should: [ config propertyAt: #bar ] raise: PropertyError  ! !!CCConfigurationTest methodsFor: 'tests-properties' stamp: 'CyrilFerlicot 3/31/2015 15:40'!testPropertiesAtIfAbsent	|config|	config := CCConfiguration new.	self assert: (config propertyAt: #foo put: 'bar' ) = 'bar'.	self assert: (config propertyAt: #foo ifAbsent: [ 'baz' ]) = 'bar'.	self assert: (config propertyAt: #bar ifAbsent: [ 'baz' ]) = 'baz'! !!CCConfigurationTest methodsFor: 'tests-properties' stamp: 'CyrilFerlicot 3/31/2015 15:44'!testPropertiesAtIfAbsentPut	|config|	config := CCConfiguration new.	self assert: (config propertyAt: #foo put: 'bar' ) = 'bar'.	self assert: (config propertyAt: #foo ifAbsentPut: [ 'baz' ]) = 'bar'.	self assert: (config propertyAt: #foo ) = 'bar'.	self assert: (config propertyAt: #bar ifAbsentPut: [ 'baz']) = 'baz'.	self assert: (config propertyAt: #bar) = 'baz'! !!CCConfigurationTest methodsFor: 'tests-properties' stamp: 'CyrilFerlicot 3/31/2015 15:46'!testPropertiesAtPut	|config|	config := CCConfiguration new.	config propertyAt:  #foo put: 'bar'.	self assert: (config propertyAt: #foo) = 'bar'.	config propertyAt: #foo put: 'baz'.	self assert: (config propertyAt: #foo) = 'baz'! !!CCConfigurationTest methodsFor: 'tests-properties' stamp: 'CyrilFerlicot 3/31/2015 15:48'!testPropertiesHas	|config|	config := CCConfiguration new.	self deny: (config hasProperty: #foo).	config propertyAt: #foo put: 'bar'.	self assert: (config hasProperty: #foo).	self deny: (config hasProperty: #bar)! !!CCDocumentationGenerationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/1/2015 16:22'!firstPragmaMock	"I return the first pragma of the CCMockConfiguration class."		^ self pragmasMock first! !!CCDocumentationGenerationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/2/2015 14:52'!pragmasMock	"I return the first pragma of the CCMockConfiguration class."		| generator |	generator := CCDocumentationGeneration new.	^ generator allPragmasInClass: CCMockConfiguration ! !!CCDocumentationGenerationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/1/2015 16:30'!secondPragmaMock	"I return the first pragma of the CCMockConfiguration class."		^ self pragmasMock second! !!CCDocumentationGenerationTest methodsFor: 'running' stamp: 'CyrilFerlicot 4/2/2015 16:57'!setUp	stream := String new writeStream.	generator := CCDocumentationGeneration new.	! !!CCDocumentationGenerationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/2/2015 16:57'!testMethodComment	self assert: (generator pragmaParameterComment: self firstPragmaMock) equals: 'uncommented'.	self assert: (generator pragmaParameterComment: self secondPragmaMock) equals: 'Test'! !!CCDocumentationGenerationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/2/2015 16:57'!testMethodDefaultComment	self assert: (generator methodDefaultComment: self firstPragmaMock) equals: 'uncommented'.	self assert: (generator methodDefaultComment: self secondPragmaMock) equals: '==0=='! !!CCDocumentationGenerationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/2/2015 16:58'!testMethodDefaultValue	self		assert: (generator methodDefaultValue: self firstPragmaMock)		equals: self firstPragmaMock methodClass >> (#default , self firstPragmaMock selector capitalized) asSymbol! !!CCDocumentationGenerationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/2/2015 16:58'!testPragmaComment	self assert: (generator pragmaComment: self firstPragmaMock) equals: ''.	self assert: (generator pragmaComment: self secondPragmaMock) equals: 'Test'! !!CCDocumentationGenerationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/2/2015 16:58'!testWriteDefaultParameter	| expected |	expected := String new writeStream.	expected		nextPutAll: ';Default value';		lf;		nextPutAll: ':uncommented';		lf;		lf.	generator writeDefaultParameter: self firstPragmaMock onStream: stream.	self assert: stream contents equals: expected contents! !!CCDocumentationGenerationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/2/2015 16:58'!testWriteParameter	| expected |	expected := String new writeStream.	expected		nextPutAll: '@sec:confParam:mockProperty';		lf;		nextPutAll: 'uncommented';		lf;		lf.	generator writeParameter: self firstPragmaMock onStream: stream.	self assert: stream contents equals: expected contents! !!CCSTONConfigurationInterpreterTest methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/16/2015 10:18'!baseDirectory	^ baseDirectory! !!CCSTONConfigurationInterpreterTest methodsFor: 'helper' stamp: 'CyrilFerlicot 4/1/2015 11:03'!fromString: aString 	^ (CCMockConfigurationInterpreter baseDirectory: baseDirectory) buildFromString: aString! !!CCSTONConfigurationInterpreterTest methodsFor: 'running' stamp: 'CyrilFerlicot 4/1/2015 10:12'!setUp	super setUp.	baseDirectory := FileSystem memory root! !!CCSTONConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/16/2015 13:12'!testEmptyConfiguration	| ston configuration |	ston := '{  }'.	configuration :=	self fromString: ston.	self assert: configuration mockProperty equals: 'Mock' "the default"! !!CCSTONConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/1/2015 11:04'!testMockProperty	| ston configuration |	ston := '{ #mockProperty : ''test'' }'.	configuration := self fromString: ston.	self assert: configuration mockProperty equals: 'test'.		ston := '{ #mockProperty : ''mock'' }'.	configuration := self fromString: ston.	self assert: configuration mockProperty equals: 'mock'.	configuration mockProperty: 'another'.	self assert: configuration mockProperty equals: 'another'! !!CCSTONConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/1/2015 11:09'!testPropagateToSubConfiguration	| ston configuration subConfiguration |	ston := '{ #mockProperty : "something", #configurations : { "Foo" : { #mockPropertyBis : "anOtherThing" } } }'.	configuration :=self fromString: ston.	self assert: configuration mockProperty equals: 'something'. 	self assert: configuration configurations size equals: 1.	subConfiguration := configuration configurations anyOne.	self assert: subConfiguration mockProperty equals: 'something'.	self assert: subConfiguration mockPropertyBis equals: 'anOtherThing'! !!CCSTONConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/10/2015 11:30'!testRelativePathFromFile	| confFile configuration |		(baseDirectory / 'foo.pier') writeStreamDo: [ :stream | stream nextPutAll: 'foo' ].		confFile := baseDirectory / 'pillar-conf.ston'.	confFile writeStreamDo: [ :stream | stream nextPutAll: '{ #inputFiles : [ "foo.pier" ] }' ].	configuration := (PRCocoonConfigurationInterpreter baseDirectory: baseDirectory) buildFromFile: confFile.		self assert: configuration inputFiles first exists.! !!CCSTONConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/1/2015 11:10'!testSubConfigurationNamed	| ston configuration subConfiguration |	ston := '{ #configurations : { "Foo" : { #mockProperty: ''something'' } } }'.	configuration :=self fromString: ston.	subConfiguration := configuration subConfigurationNamed: 'Foo'.	self assert: subConfiguration mockProperty equals: 'something'! !!CCSTONConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/10/2015 11:31'!testWithSubConfiguration	| ston configuration subConfiguration |	ston := '{ #configurations : { "Foo" : { #mockProperty : #bar } } }'.	configuration :=self fromString: ston.	self assert: configuration configurations size equals: 1.	subConfiguration := configuration configurations anyOne.	self assert: subConfiguration mockProperty equals: 'bar'! !"Cocoon-Tests-Core"!!PRTParametrizable commentStamp: 'DamienCassou 4/3/2015 14:12' prior: 0!I'm a trait that proposes parameter-related methods.!!PRError commentStamp: 'TorstenBergmann 3/5/2015 22:09' prior: 0!General Pillar error!!PRInputFileError commentStamp: 'CyrilFerlicot 4/9/2015 13:11' prior: 0!An inclusion error during an inclusion of file.!!PRPropertyError commentStamp: 'TorstenBergmann 3/5/2015 22:09' prior: 0!A Pillar property error!!PRBasicObject commentStamp: 'DamienCassou 2/28/2014 09:39' prior: 0!I provide nothing but I'm here to (hopefully) facilitate portability with multiple Smalltalks.!!PRDocumentParser commentStamp: 'TorstenBergmann 3/5/2015 22:07' prior: 0!A document parser for Pillar documents	PRDocumentParser parse: '!!Hello'!!PRMatcherManager commentStamp: 'TorstenBergmann 3/5/2015 22:08' prior: 0!Manager for text matching!!PRObject commentStamp: 'jf 9/18/2009 15:47' prior: 0!I am a superclass of most objects within Pier. I hold a dictionary of properties, so that users can easily annotate me with new values. I am visitable.!!PRAbstractScriptLanguage commentStamp: 'DamienCassou 2/28/2014 09:41' prior: 0!I represent a programming language that can be referenced from a PRScript to get syntax highlighting.!!PRNoScriptLanguage commentStamp: 'DamienCassou 2/28/2014 09:41' prior: 0!I'm here for authors to specify they don't want syntax highlighting in their scripts.!!PRRealScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 0!Superclass for existing real scripting languages!!PRBashScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 0!Bash scripting language!!PRCSSScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 0!Cascading stylesheet language!!PRHTMLScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 0!Hypertext markup language!!PRHTTPScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 0!General HTTP script language!!PRJSONScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 0!JSON!!PRJavaScriptScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 0!JavaScript language!!PRSQLScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 0!SQL!!PRSTONScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 0!STON (Smalltalk Object Notation)!!PRShellCommandsScriptLanguage commentStamp: '' prior: 0!A PRBashScriptLanguage is xxxxxxxxx.!!PRSmalltalkScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 0!Smalltalk !!PRUnspecifiedScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:05' prior: 0!An unspecified script language!!PRUnsupportedScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:05' prior: 0!An unsupported script language!!PRDocumentItem commentStamp: 'lr 5/28/2006 20:30' prior: 0!I am an abstract superclass for the document hierarchy. My subclasses include all the basic elements to represent a document.!!PRAbstractAnnotation commentStamp: 'DamienCassou 4/3/2015 16:54' prior: 0!I represent an open-ended syntax for special text such as:- ${todo} to represent a position in the text where things must be changed- ${note:value=some text}$ (equivalent to previous one) (the default value= works the same as for Java annotations);- ${index:AClass}$ to add AClass to the document index;- ${cite:Duca99b}$ to reference a particular item of a bibliography;- ${cite:value=Duca99b|page=90}$ (equivalent to previous one but additionaly specifies a page number;- ${background:file://foobar.png}$ to specify the background of the current section;- ${toc:maxLevel=2}$ to show a table of content with only level 1 and 2 section headings.- ${note:some text with a curly brace \} inside}$ (shows how to escape a curly brace).The name at the begining of each annote is called the tag (e.g., 'index', 'note', 'cite'). The tag is followed by a series of associations (key/value pairs).!!PRIndexAnnotation commentStamp: 'DamienCassou 4/3/2015 17:25' prior: 0!Add a word to the document index.!!PRInputFileAnnotation commentStamp: 'CyrilFerlicot 4/8/2015 13:22' prior: 0!Include a reference to a pillar file. With me we can add a transformation to remplace an annotation to a pillar file by his tree.${inputFile:myFile.pillar}$!!PRAnchor commentStamp: 'lr 5/29/2006 09:30' prior: 0!I am an anchor within a document. I am used as a reference point within a large document.!!PRDocumentGroup commentStamp: 'lr 5/28/2006 20:33' prior: 0!I am an abstract group of document items.!!PRDocument commentStamp: 'lr 5/28/2006 21:06' prior: 0!I am the root of a document composite.!!PRFormat commentStamp: 'TorstenBergmann 3/5/2015 21:59' prior: 0!A styling format !!PRBoldFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 0!Bold styling format!!PRItalicFormat commentStamp: 'TorstenBergmann 3/5/2015 21:59' prior: 0!Italic styling format!!PRMonospaceFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 0!Monospace styling!!PRStrikethroughFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 0!Strikethrough format!!PRSubscriptFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 0!Style as subscript!!PRSuperscriptFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 0!Style as superscript!!PRUnderlineFormat commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 0!Style as underline formatted!!PRHeader commentStamp: 'lr 5/28/2006 20:34' prior: 0!I represent a header within a document. My level is a natural number.!!PRLink commentStamp: 'lr 5/28/2006 21:02' prior: 0!I am an abstract link built from an alias and a reference. The alias is the string representation that will be displayed to the user, whereas the reference is a string identifying the target. If there is no alias, the reference itself is displayed. Links can try to embed the referenced target into the containing document.!!Examples=*Reference*=+Alias>Embedded Reference*!!PRExternalLink commentStamp: 'lr 5/28/2006 20:41' prior: 0!I am an abstract external link with an URL (Uniform Resource Locator) as reference.!!PRMailLink commentStamp: 'lr 6/2/2006 11:29' prior: 0!I am an external link pointing to a mail address. I encode my URL to prevent spam bots collecting the address.!!PRInternalLink commentStamp: 'lr 4/10/2007 21:12' prior: 0!I am an internal link pointing to a structure within the current kernel. I reference my owning structure to be able to lookup the referenced structure. The referenced structure is cached in the instance variable ==target==.!!PRList commentStamp: 'lr 5/28/2006 20:55' prior: 0!I am an abstract list. My children are instances of *PRListItem*.!!PRDefinitionList commentStamp: 'lr 12/30/2007 19:44' prior: 0!I am an definition list. I am typically used for a keyword and a longer definition string.!!PROrderedList commentStamp: 'lr 5/28/2006 20:53' prior: 0!I am an ordered list. I am typically used for numbered items.!!PRUnorderedList commentStamp: 'lr 5/28/2006 20:53' prior: 0!I am an unordered list. I am typically used for unnumbered lists!!PRListItem commentStamp: 'lr 6/2/2006 11:26' prior: 0!I am a item within a *PRList*.!!PRDataItem commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 0!Data in a list!!PRTermItem commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 0!A term!!PRParagraph commentStamp: 'lr 5/28/2006 20:54' prior: 0!I am a paragraph of text.!!PRAnnotatedParagraph commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 0!An annotated paragraph!!PREmptyParagraph commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 0!An empty paragraph!!PRPreformatted commentStamp: 'lr 5/28/2006 20:56' prior: 0!I am preformatted text or source code. My children are instances of *PRText*.!!PRTable commentStamp: 'lr 5/28/2006 20:56' prior: 0!I am a table. My children are instances of *PRTableRow*.!!PRTableCell commentStamp: 'lr 5/28/2006 20:57' prior: 0!I am a cell of a table.!!PRTableRow commentStamp: 'lr 5/28/2006 20:56' prior: 0!I am a row of a table. My children are instances of *PRTableCell*.!!PRHorizontalRule commentStamp: 'lr 5/28/2006 20:57' prior: 0!I am a horizontal rule.!!PRLineBreak commentStamp: 'lr 9/14/2009 08:31' prior: 0!I am a line break. I only show up in the wiki format.!!PRText commentStamp: 'lr 5/28/2006 20:58' prior: 0!I am a plain text. I am the most important leaf node of the document composite.!!PRCommentedLine commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 0!A commented line!!PRRaw commentStamp: '<historical>' prior: 0!I represent a text that is not parsed/analyzed at all. I can have a type to limit the kind of output with which I'm associated. For example, an instance of me with type 'html' will only be written to HTML documents.I'm particularly useful when the rest of Pillar can't represent something you *really* want in your output: for example, an equation. In this case, you can describe your equation in latex using an instance of me of type latex and a picture everywhere else.!!PRScript commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 0!An embedded script!!PRVisitor commentStamp: 'lr 6/2/2006 11:55' prior: 0!I am an abstract visitor. I provide a default implementation of all visit messages that does not descend automatically into children of the visited graph. Subclasses should override all my messages in appropriate ways to visit the nodes they need.!!PRTransformer commentStamp: 'CyrilFerlicot 4/9/2015 10:49' prior: 0!I'm an abstract class. I allows the transformation of a tree. I'll visit a tree and if a node need to be transform i'll replace the node by his transformation.The top node is the root of the tree i need to transform.The replacement is a Stack with all the nodes of the branch of the node I'm visiting.!!PRTransformerWithoutUselessParagraph commentStamp: 'CyrilFerlicot 4/15/2015 10:29' prior: 0!I'm an abstract transformer. I assure that the transformation I do don't contains useless paragraph node.!!PRFileInclusion commentStamp: 'CyrilFerlicot 4/9/2015 11:37' prior: 0!I transform an InputFileAnnotation node into a tree which represente what's inside the file.!!PRParameterParser commentStamp: 'DamienCassou 4/3/2015 14:25' prior: 0!I'm parsing strings that contain sequences of key/value pairs such as: key1=value1|key2=value2!!PRTextParser commentStamp: 'TorstenBergmann 3/5/2015 22:08' prior: 0!A text parserInstance Variables	alreadySeenString:		<Object>	currentMarkup:		<Object>	currentStart:		<Object>	currentStop:		<Object>	documentParser:		<Object>	itemParser:		<Object>	stream:		<Object>alreadySeenString	- xxxxxcurrentMarkup	- xxxxxcurrentStart	- xxxxxcurrentStop	- xxxxxdocumentParser	- xxxxxitemParser	- xxxxxstream	- xxxxx!!PRScriptEvaluationEnvironment commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 0!A script evaluator!!PRTParametrizable commentStamp: 'DamienCassou 4/3/2015 14:12' prior: 34513862!I'm a trait that proposes parameter-related methods.!!PRTParametrizable classTrait methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 17:47'!markupParameter	^ PRParameterParser defaultMarkupParameter! !!PRTParametrizable classTrait methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 17:47'!markupParameterValue	^ PRParameterParser defaultMarkupParameterValue! !!PRTParametrizable methodsFor: 'accessing-parameters' stamp: 'CyrilFerlicot 4/13/2015 23:23'!hasParameter: aKey	self		parameters at: aKey		ifAbsent: [ ^ false ].	^ true! !!PRTParametrizable methodsFor: 'accessing-parameters' stamp: 'DamienCassou 4/3/2015 17:40'!hasParameters	^ self parameters isEmpty not! !!PRTParametrizable methodsFor: 'accessing-parameters' stamp: 'CyrilFerlicot 4/13/2015 22:33'!parameterAt: aKey put: aValue	^ self parameters at: aKey put: aValue! !!PRTParametrizable methodsFor: 'accessing-parameters' stamp: 'DamienCassou 4/3/2015 14:20'!parameters	^ self explicitRequirement! !!PRError commentStamp: 'TorstenBergmann 3/5/2015 22:09' prior: 34513982!General Pillar error!!PRInputFileError commentStamp: 'CyrilFerlicot 4/9/2015 13:11' prior: 34514077!An inclusion error during an inclusion of file.!!PRPropertyError commentStamp: 'TorstenBergmann 3/5/2015 22:09' prior: 34514200!A Pillar property error!!PRBasicObject commentStamp: 'DamienCassou 2/28/2014 09:39' prior: 34514295!I provide nothing but I'm here to (hopefully) facilitate portability with multiple Smalltalks.!!PRBasicObject class methodsFor: 'error handling' stamp: 'jf 9/18/2009 15:40'!defaultErrorClass	^ PRError! !!PRBasicObject class methodsFor: 'license' stamp: 'DamienCassou 2/5/2014 12:42'!pierLicense	<ignoreForCoverage>	"Return a string with the license of the package. This string shall not be removed or altered in any case."	^ 'The MIT LicenseCopyright (c) 2003-' , Date today year printString , ' Lukas Renggli, renggli at gmail.comCopyright (c) 2003-' , Date today year printString , ' ContributorsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'! !!PRDocumentParser commentStamp: 'TorstenBergmann 3/5/2015 22:07' prior: 34514466!A document parser for Pillar documents	PRDocumentParser parse: '!!Hello'!!PRDocumentParser class methodsFor: 'accessing' stamp: 'DamienCassou 3/20/2014 18:10'!lineMatcher	^ PRMatcherManager lineMatcher! !!PRDocumentParser class methodsFor: 'parsing' stamp: 'lr 4/4/2007 14:59'!on: aStream	^ self basicNew initializeOn: aStream! !!PRDocumentParser class methodsFor: 'parsing' stamp: 'DamienCassou 6/1/2014 11:38'!parse: aStringOrStream	^ self parseStream: aStringOrStream readStream! !!PRDocumentParser class methodsFor: 'parsing' stamp: 'lr 4/4/2007 14:58'!parseStream: aStream	^ (self on: aStream) parse! !!PRDocumentParser class methodsFor: 'accessing' stamp: 'DamienCassou 12/4/2013 17:47'!propertiesKeywordValueSeparator	^ ':'! !!PRDocumentParser class methodsFor: 'accessing' stamp: 'DamienCassou 12/4/2013 17:42'!propertiesMarkupBegin	^ '{{'! !!PRDocumentParser class methodsFor: 'accessing' stamp: 'DamienCassou 12/4/2013 17:42'!propertiesMarkupEnd	^ '}}'! !!PRDocumentParser methodsFor: 'adding' stamp: 'DamienCassou 2/10/2014 17:46'!add: anObject	self document add: anObject! !!PRDocumentParser methodsFor: 'adding' stamp: 'BenComan 5/27/2014 20:31'!addNested: anObject	self addNested: anObject to: self document! !!PRDocumentParser methodsFor: 'adding' stamp: 'BenComan 5/28/2014 22:31'!addNested: anObject to: aGroup 	aGroup children isEmpty 		ifTrue: [  ^ aGroup add: anObject ].	aGroup children last isGroup 		ifTrue: [ ^ self addNested: anObject to: aGroup children last ] .	^ aGroup add: anObject.! !!PRDocumentParser methodsFor: 'adding' stamp: 'lr 1/28/2009 10:09'!addParagraph: aParagraph	aParagraph children isEmpty		ifTrue: [ self add: PREmptyParagraph new ]		ifFalse: [			self lastDocumentItem class = aParagraph class				ifFalse: [ self add: aParagraph ]				ifTrue: [					self lastDocumentItem						add: PRLineBreak new;						addAll: aParagraph children ] ].	^ self lastDocumentItem! !!PRDocumentParser methodsFor: 'adding' stamp: 'lr 1/28/2009 10:09'!combine: aClass with: aDocumentItem	^ self lastDocumentItem class = aClass		ifTrue: [ self lastDocumentItem add: aDocumentItem ]		ifFalse: [ self add: (aClass with: aDocumentItem) ]! !!PRDocumentParser methodsFor: 'accessing' stamp: 'lr 1/28/2009 10:07'!document	^ document! !!PRDocumentParser methodsFor: 'initialization' stamp: 'lr 9/4/2009 17:18'!initializeOn: aStream	self initialize.	stream := aStream! !!PRDocumentParser methodsFor: 'accessing' stamp: 'lr 1/28/2009 10:30'!lastDocumentItem	^ document children isEmpty ifFalse: [ document children last ]! !!PRDocumentParser methodsFor: 'parsing' stamp: 'DamienCassou 3/20/2014 17:59'!nextLine	^ self stream nextLine! !!PRDocumentParser methodsFor: 'parsing' stamp: 'DamienCassou 3/20/2014 17:59'!parse	"Parse the input from the given stream and answer a *PRDocument*."	document := PRDocument new.	self parseProperties.	[ self stream atEnd ]		whileFalse: [ self parseLine: self stream nextLine ].	^ document! !!PRDocumentParser methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 13:50'!parseLine: aString	"Parses ==aString==, that represents a single line of input, to a *PRDocumentItem* and add it to the ==items== collection."	PRMatcherManager default withItemParserForLine: aString do: [ :itemParser | itemParser parse: aString with: self ]! !!PRDocumentParser methodsFor: 'parsing' stamp: 'DamienCassou 3/20/2014 17:59'!parseProperties	| oldPosition |		[ oldPosition := self stream position.	self stream atEnd not and: [ self parseProperties: self stream nextLine ] ] whileTrue.	self stream position: oldPosition.! !!PRDocumentParser methodsFor: 'parsing' stamp: 'DamienCassou 12/4/2013 18:01'!parseProperties: line	| markupBegin markupEnd input keyword rest separator |	markupBegin := self class propertiesMarkupBegin.	markupEnd := self class propertiesMarkupEnd.	separator := self class propertiesKeywordValueSeparator.	input := line readStream.	(input next: markupBegin size) = markupBegin ifFalse: [ ^ false ].	keyword := input upToAll: separator.	keyword := keyword trimBoth.	keyword isAllAlphaNumerics ifFalse: [ ^ false ].	rest := input upToEnd.	(rest endsWith: markupEnd) ifFalse: [ ^ false ].	rest := rest allButLast: markupEnd size.	rest := rest trimLeft.	document propertyAt: keyword put: rest.	^ true! !!PRDocumentParser methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 16:32'!parseText: aString	"Parses ==aString== and answer a collection of *PRText*, *PRFormat* and *PRLink* instances. Take care not to take into account any markup item that is escaped. This implementation is a bit slow, but who cares, it happens only once."	| markup class start stop result |	markup := PRMatcherManager findFirstOf: PRMatcherManager default textMatcher at: 1 in: aString.	markup isNil ifFalse: [		class := PRMatcherManager textMatcher at: markup.		start := PRMatcherManager findFirst: markup at: 1 in: aString.		stop := PRMatcherManager findFirst: (class markupEnd: markup) at: start + markup size in: aString.		start < stop ifTrue: [			result := WriteStream on: Array new.			result nextPutAll: (PRTextParser parseString: (aString first: start - 1)).			result nextPut: (class				parse: (aString copyFrom: start to: stop + markup size - 1)				with: self).			result nextPutAll: (self parseText: (aString allButFirst: stop + markup size - 1)).			^ result contents ] ].	^ PRTextParser parseString: aString! !!PRDocumentParser methodsFor: 'parsing' stamp: 'DamienCassou 3/20/2014 17:59'!parseTopText: aString 	^ PRTextParser new		documentParser: self;		setStream: self stream;		parse: aString! !!PRDocumentParser methodsFor: 'accessing' stamp: 'DamienCassou 2/10/2014 11:46'!stream	^ stream! !!PRMatcherManager commentStamp: 'TorstenBergmann 3/5/2015 22:08' prior: 34514617!Manager for text matching!!PRMatcherManager class methodsFor: 'private' stamp: 'DamienCassou 2/10/2014 11:54'!buildLineMatcher	<ignoreForCoverage>	| result |	result := Dictionary new.	result		at: PRAnchor markup put: PRAnchor;		at: PRHorizontalRule markup put: PRHorizontalRule;		at: PRHeader markup put: PRHeader;		at: PRDataItem markup put: PRList;		at: PRTermItem markup put: PRList;		at: PRUnorderedList markup put: PRList;		at: PROrderedList markup put: PRList;		at: PRTableCell markup put: PRTable;		at: PRPreformatted markup put: PRPreformatted;		at: PRAnnotatedParagraph markup put: PRAnnotatedParagraph;		at: PRCommentedLine markup put: PRCommentedLine.	^ result! !!PRMatcherManager class methodsFor: 'private' stamp: 'DamienCassou 4/6/2015 11:47'!buildTextMatcher	<ignoreForCoverage>	| result |	result := Dictionary new.	result		at: '*' put: PRLink;		at: '+' put: PRLink;		at: PRRaw markupBegin put: PRRaw;		at: PRScript markupBegin put: PRScript;		at: PRAbstractAnnotation markupBegin put: PRAbstractAnnotation.	PRFormat allSubclassesDo: [ :each |		result			at: each markup			put: each ].	^ result! !!PRMatcherManager class methodsFor: 'instance creation' stamp: 'DamienCassou 2/10/2014 13:18'!default	^ Default ifNil: [ Default := self new ]! !!PRMatcherManager class methodsFor: 'utilities' stamp: 'DamienCassou 2/10/2014 16:26'!findFirst: aSearchString at: anInteger in: aString	"Find the first non-escaped occurence of aSearchString starting at anInteger in aString."	| index |	index := aString findString: aSearchString startingAt: anInteger.	[ anInteger < index and: [ (aString at: index - 1 ifAbsent: nil) = $\ ] ]		whileTrue: [ index := aString findString: aSearchString startingAt: index + 1 ].	^ index! !!PRMatcherManager class methodsFor: 'utilities' stamp: 'DamienCassou 2/10/2014 16:26'!findFirstMarkup: markup in: aString	^ self findFirst: markup at: 1 in: aString! !!PRMatcherManager class methodsFor: 'utilities' stamp: 'DamienCassou 4/3/2015 15:59'!findFirstOf: anArray at: anInteger in: aString	"Find the first non-escaped occurence of any of the search strings in anArray starting at anInteger in aString. Answer the search string or nil if not found."	^ (self findPairFirstOf: anArray at: anInteger in: aString) value! !!PRMatcherManager class methodsFor: 'utilities' stamp: 'DamienCassou 4/3/2015 15:59'!findPairFirstOf: anArray at: anInteger in: aString	"Find the first non-escaped occurence of any of the search strings in anArray starting at anInteger in aString. Answer a key/value pair with index/search string or nil if not found."	| index minIndex minMarkup |	minIndex := aString size. minMarkup := nil.	anArray do: [ :each |		index := self findFirst: each at: anInteger in: aString.		(0 < index and: [ index < minIndex ])			ifTrue: [ minIndex := index. minMarkup := each ] ].	^ minIndex -> minMarkup ! !!PRMatcherManager class methodsFor: 'initialization' stamp: 'DamienPollet 2/20/2014 18:34'!initialize	" self initialize "	<ignoreForCoverage>	Default := LineMatcher := LineMatcherDefault := TextMatcher := nil! !!PRMatcherManager class methodsFor: 'as yet unclassified ' stamp: 'DamienCassou 2/10/2014 14:00'!itemParserForTextMarkup: aString 	^ self class textMatcher at: aString! !!PRMatcherManager class methodsFor: 'accessing' stamp: 'DamienCassou 2/10/2014 11:54'!lineMatcher	^ LineMatcher ifNil: [ LineMatcher := self buildLineMatcher ]! !!PRMatcherManager class methodsFor: 'accessing' stamp: 'DamienCassou 2/10/2014 11:54'!lineMatcherDefault	^ LineMatcherDefault ifNil: [ LineMatcherDefault := PRParagraph ]! !!PRMatcherManager class methodsFor: 'private' stamp: 'DamienCassou 2/10/2014 11:55'!resetLineMatcher	<ignoreForCoverage>	LineMatcher := nil! !!PRMatcherManager class methodsFor: 'private' stamp: 'DamienCassou 2/10/2014 11:55'!resetTextMatcher	<ignoreForCoverage>	TextMatcher := nil! !!PRMatcherManager class methodsFor: 'accessing' stamp: 'DamienCassou 2/10/2014 11:54'!textMatcher	^ TextMatcher ifNil: [ TextMatcher := self buildTextMatcher ]! !!PRMatcherManager methodsFor: 'initialization' stamp: 'DamienCassou 2/10/2014 13:16'!initialize	super initialize.	textMarkups := self class textMatcher keys asArray		sort: [ :a :b | a size > b size ];		yourself.	lineMarkups := self class lineMatcher keys asArray		sort: [ :a :b | a size > b size ];		yourself.! !!PRMatcherManager methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 14:01'!itemParserForTextMarkup: aString 	^ self class textMatcher at: aString! !!PRMatcherManager methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 16:26'!markupForFirstItemParserIn: aString 			^ self class 				findFirstOf: self textMatcher				at: 1				in: aString! !!PRMatcherManager methodsFor: 'accessing' stamp: 'DamienCassou 2/10/2014 13:34'!textMatcher	^ textMarkups! !!PRMatcherManager methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 13:54'!withItemParserForLine: aLine do: aBlock	"Find an item parser that accepts the beginning of aString. When found, pass it to aBlock. If not found, use a default item parser."	lineMarkups		do: [ :markup | 			(aLine beginsWithSubCollection: markup)				ifTrue: [ ^ aBlock value: (self class lineMatcher at: markup) ] ].	^ aBlock value: self class lineMatcherDefault! !!PRObject commentStamp: 'jf 9/18/2009 15:47' prior: 34514699!I am a superclass of most objects within Pier. I hold a dictionary of properties, so that users can easily annotate me with new values. I am visitable.!!PRAbstractScriptLanguage commentStamp: 'DamienCassou 2/28/2014 09:41' prior: 34514933!I represent a programming language that can be referenced from a PRScript to get syntax highlighting.!!PRAbstractScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 1/10/2014 15:47'!acceptLanguage: aLanguageName	^ aLanguageName matchesRegexIgnoringCase: self acceptedLanguagesRegex ! !!PRAbstractScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/10/2014 16:27'!acceptedLanguagesRegex 	^ self standardName! !!PRAbstractScriptLanguage class methodsFor: 'private' stamp: 'DamienCassou 1/10/2014 17:50'!concreteClassFor: aLanguageName	aLanguageName isNil ifTrue: [ ^ PRUnspecifiedScriptLanguage ].	^ (self withAllConcreteClasses copyWithout: PRUnsupportedScriptLanguage)		detect: [ :cl | cl acceptLanguage: aLanguageName ]		ifNone: [ PRUnsupportedScriptLanguage ]! !!PRAbstractScriptLanguage class methodsFor: 'instance creation' stamp: 'DamienCassou 1/10/2014 16:25'!default	^ self new		originalName: self standardName;		yourself! !!PRAbstractScriptLanguage class methodsFor: 'instance creation' stamp: 'DamienCassou 1/10/2014 16:21'!for: aLanguageName	^ (self concreteClassFor: aLanguageName) new		originalName: aLanguageName;		yourself! !!PRAbstractScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 1/10/2014 16:27'!standardName	^ self subclassResponsibility! !!PRAbstractScriptLanguage methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/8/2015 10:45'!= anObject	^ self originalName = anObject originalName! !!PRAbstractScriptLanguage methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/8/2015 10:46'!hash	^ self originalName hash! !!PRAbstractScriptLanguage methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 16:02'!isSpecified	^ self subclassResponsibility! !!PRAbstractScriptLanguage methodsFor: 'accessing' stamp: 'DamienCassou 1/10/2014 16:22'!originalName	^ originalName! !!PRAbstractScriptLanguage methodsFor: 'accessing' stamp: 'DamienCassou 1/10/2014 16:22'!originalName: aLanguageName	originalName := aLanguageName! !!PRAbstractScriptLanguage methodsFor: 'printing' stamp: 'DamienCassou 1/10/2014 16:22'!printOn: aStream	aStream nextPutAll: self originalName! !!PRNoScriptLanguage commentStamp: 'DamienCassou 2/28/2014 09:41' prior: 34515111!I'm here for authors to specify they don't want syntax highlighting in their scripts.!!PRNoScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/10/2014 16:27'!acceptedLanguagesRegex	^ '^$|', self standardName! !!PRNoScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 15:39'!isAbstract	^ false! !!PRNoScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 1/10/2014 16:28'!standardName	^ 'no language'! !!PRNoScriptLanguage methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 16:02'!isSpecified	^ true! !!PRRealScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 34515277!Superclass for existing real scripting languages!!PRBashScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 34515406!Bash scripting language!!PRBashScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/14/2014 15:03'!isAbstract	^ false! !!PRBashScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/14/2014 15:03'!standardName	^ 'bash'! !!PRCSSScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 34515509!Cascading stylesheet language!!PRCSSScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 9/17/2014 15:11'!isAbstract	^ false! !!PRCSSScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 9/17/2014 15:11'!standardName	^ 'css'! !!PRHTMLScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 34515619!Hypertext markup language!!PRHTMLScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 15:39'!isAbstract	^ false! !!PRHTMLScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/10/2014 16:28'!standardName	^ 'html'! !!PRHTTPScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 34515725!General HTTP script language!!PRHTTPScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 15:39'!isAbstract	^ false! !!PRHTTPScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/10/2014 16:29'!standardName	^ 'HTTP'! !!PRJSONScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:03' prior: 34515834!JSON!!PRJSONScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/14/2014 15:42'!isAbstract	^ false! !!PRJSONScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/14/2014 15:42'!standardName	^ 'json'! !!PRJavaScriptScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 34515925!JavaScript language!!PRJavaScriptScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 9/17/2014 15:07'!isAbstract	^ false! !!PRJavaScriptScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 9/17/2014 15:09'!standardName	^ 'javascript'! !!PRRealScriptLanguage methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 16:08'!isSpecified	^ true! !!PRSQLScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 34516024!SQL!!PRSQLScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 16:57'!isAbstract	^ false! !!PRSQLScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 1/10/2014 16:57'!standardName	^ 'SQL'! !!PRSTONScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 34516108!STON (Smalltalk Object Notation)!!PRSTONScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/14/2014 15:41'!isAbstract	^ false! !!PRSTONScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/14/2014 15:42'!standardName	^ 'ston'! !!PRShellCommandsScriptLanguage commentStamp: '' prior: 34516200!A PRBashScriptLanguage is xxxxxxxxx.!!PRShellCommandsScriptLanguage class methodsFor: 'testing' stamp: 'DamienPollet 2/20/2014 23:27'!isAbstract	^ false! !!PRShellCommandsScriptLanguage class methodsFor: 'requirement' stamp: 'DamienPollet 2/20/2014 23:27'!standardName	^ 'shellcommands'! !!PRSmalltalkScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:04' prior: 34516323!Smalltalk !!PRSmalltalkScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 15:39'!isAbstract	^ false! !!PRSmalltalkScriptLanguage class methodsFor: 'requirement' stamp: 'DamienCassou 1/10/2014 16:29'!standardName	^ 'smalltalk'! !!PRUnspecifiedScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:05' prior: 34516421!An unspecified script language!!PRUnspecifiedScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 1/10/2014 16:31'!acceptLanguage: aLanguageName	^ aLanguageName isNil or: [ super acceptLanguage: aLanguageName ]! !!PRUnspecifiedScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 15:39'!isAbstract	^ false! !!PRUnspecifiedScriptLanguage class methodsFor: 'protected' stamp: 'DamienCassou 1/10/2014 16:29'!standardName	^ 'unspecified language'! !!PRUnspecifiedScriptLanguage methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 15:59'!isSpecified	^ false! !!PRUnspecifiedScriptLanguage methodsFor: 'accessing' stamp: 'DamienCassou 1/10/2014 16:56'!originalName	^ ''! !!PRUnsupportedScriptLanguage commentStamp: 'TorstenBergmann 3/5/2015 22:05' prior: 34516539!An unsupported script language!!PRUnsupportedScriptLanguage class methodsFor: 'instance creation' stamp: 'DamienCassou 2/5/2014 12:44'!default	<ignoreForCoverage>	^ self shouldNotImplement! !!PRUnsupportedScriptLanguage class methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 15:39'!isAbstract	^ false! !!PRUnsupportedScriptLanguage methodsFor: 'testing' stamp: 'DamienCassou 1/10/2014 16:55'!isSpecified	^ false! !!PRDocumentItem commentStamp: 'lr 5/28/2006 20:30' prior: 34516632!I am an abstract superclass for the document hierarchy. My subclasses include all the basic elements to represent a document.!!PRAbstractAnnotation commentStamp: 'DamienCassou 4/3/2015 16:54' prior: 34516835!I represent an open-ended syntax for special text such as:- ${todo} to represent a position in the text where things must be changed- ${note:value=some text}$ (equivalent to previous one) (the default value= works the same as for Java annotations);- ${index:AClass}$ to add AClass to the document index;- ${cite:Duca99b}$ to reference a particular item of a bibliography;- ${cite:value=Duca99b|page=90}$ (equivalent to previous one but additionaly specifies a page number;- ${background:file://foobar.png}$ to specify the background of the current section;- ${toc:maxLevel=2}$ to show a table of content with only level 1 and 2 section headings.- ${note:some text with a curly brace \} inside}$ (shows how to escape a curly brace).The name at the begining of each annote is called the tag (e.g., 'index', 'note', 'cite'). The tag is followed by a series of associations (key/value pairs).!!PRAbstractAnnotation class methodsFor: 'protected' stamp: 'CyrilFerlicot 4/10/2015 10:53'!acceptName: aTag 	^ aTag asSymbol = self tag! !!PRAbstractAnnotation class methodsFor: 'protected' stamp: 'CyrilFerlicot 4/14/2015 14:03'!adaptParameters: someParameters	"I adapt the parameters and raise some error if needed."	^ self shouldBeImplemented! !!PRAbstractAnnotation class methodsFor: 'instance creation' stamp: 'DamienCassou 4/3/2015 17:58'!copyWithoutMarkup: aString	^ aString copyFrom: self markup size + 1 to: aString size - self markupEnd size! !!PRAbstractAnnotation class methodsFor: 'protected' stamp: 'DamienCassou 4/3/2015 16:55'!findClassAcceptingTag: aTag	^ self withAllConcreteClasses detect: [ :class | class acceptName: aTag ]! !!PRAbstractAnnotation class methodsFor: 'testing' stamp: 'DamienCassou 4/3/2015 17:54'!isAbstract	^ self = PRAbstractAnnotation! !!PRAbstractAnnotation class methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 15:40'!markup	^ '${'! !!PRAbstractAnnotation class methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 16:04'!markupEnd	^ '}$'! !!PRAbstractAnnotation class methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 16:19'!markupEnd: aString	^ self markupEnd! !!PRAbstractAnnotation class methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 16:55'!markupParameterSeparator	^ $:! !!PRAbstractAnnotation class methodsFor: 'instance creation' stamp: 'DamienCassou 4/3/2015 17:05'!parameters: aCollection 	^ self new		parameters: aCollection;		yourself! !!PRAbstractAnnotation class methodsFor: 'instance creation' stamp: 'CyrilFerlicot 4/14/2015 13:58'!parse: aString with: aParser	| stream tag |	stream := (self copyWithoutMarkup: aString) readStream.	tag := stream upTo: self markupParameterSeparator.	^ (self findClassAcceptingTag: tag)		parameters: ((self findClassAcceptingTag: tag) adaptParameters: (self parseParameters: stream upToEnd))! !!PRAbstractAnnotation class methodsFor: 'protected' stamp: 'CyrilFerlicot 4/14/2015 13:58'!parseParameters: aString	^ PRParameterParser parse: aString! !!PRAbstractAnnotation class methodsFor: 'protected' stamp: 'DamienCassou 4/3/2015 16:55'!tag	^ self subclassResponsibility! !!PRAbstractAnnotation methodsFor: 'comparing' stamp: 'DamienCassou 4/3/2015 17:25'!= anObject	^ super = anObject and: [ self parameters = anObject parameters ]! !!PRAbstractAnnotation methodsFor: 'visiting' stamp: 'DamienCassou 4/3/2015 17:56'!accept: aVisitor	aVisitor visitAnnotation: self! !!PRAbstractAnnotation methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/9/2015 12:47'!hash	^ super hash bitXor: self parameters hash! !!PRAbstractAnnotation methodsFor: 'initialization' stamp: 'CyrilFerlicot 4/13/2015 22:44'!initialize	super initialize.	parameters := Dictionary new.! !!PRAbstractAnnotation methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 17:27'!parameters	^ parameters! !!PRAbstractAnnotation methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/13/2015 22:44'!parameters: aCollection	parameters := aCollection asDictionary.! !!PRIndexAnnotation commentStamp: 'DamienCassou 4/3/2015 17:25' prior: 34517809!Add a word to the document index.!!PRIndexAnnotation class methodsFor: 'protected' stamp: 'DamienCassou 4/3/2015 16:55'!tag	^ #index! !!PRInputFileAnnotation commentStamp: 'CyrilFerlicot 4/8/2015 13:22' prior: 34517922!Include a reference to a pillar file. With me we can add a transformation to remplace an annotation to a pillar file by his tree.${inputFile:myFile.pillar}$!!PRInputFileAnnotation class methodsFor: 'protected' stamp: 'CyrilFerlicot 4/14/2015 14:16'!adaptParameters: someParameters	| aKey |	someParameters size = 1		ifFalse: [ PRPropertyError signal: 'Too many parameters on the inputFile annotation.' ].	someParameters associations do: [ :assoc | aKey := assoc key ].	^ self checkParameterAt: aKey into: someParameters ! !!PRInputFileAnnotation class methodsFor: 'protected' stamp: 'CyrilFerlicot 4/14/2015 14:16'!checkParameterAt: aKey into: someParameters	aKey = 'value'		ifTrue: [ ^ someParameters ]		ifFalse: [ 			(someParameters at: aKey) ifNil: [ ^ Dictionary with: 'value' -> aKey ].			^ PRPropertyError signal: 'Wrong parameters on the inputFile annotation. Expected value, receive ' , aKey ]! !!PRInputFileAnnotation class methodsFor: 'protected' stamp: 'CyrilFerlicot 4/8/2015 13:23'!tag	^ #inputFile! !!PRInputFileAnnotation methodsFor: 'visiting' stamp: 'CyrilFerlicot 4/9/2015 12:48'!accept: aVisitor	aVisitor visitInputFileAnnotation: self! !!PRInputFileAnnotation methodsFor: 'private' stamp: 'CyrilFerlicot 4/9/2015 13:16'!errorFileNotFound: aFile	PRInputFileError signal: 'File at: ' , aFile fullName , ' not found.'! !!PRInputFileAnnotation methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 13:17'!fileWithConfiguration: aConfiguration	"I search my file inside my baseDirectory."	^ aConfiguration baseDirectory / (self parameters at: 'value')! !!PRInputFileAnnotation methodsFor: 'parsing' stamp: 'CyrilFerlicot 4/10/2015 10:48'!parseFile: aFile withConfiguration: aConfiguration	"I parse a file and i return a PRDocument of the file."		| stream |	stream := FileStream readOnlyFileNamed: aFile.	^ aConfiguration transform: (PRDocumentParser parse: stream).! !!PRAnchor commentStamp: 'lr 5/29/2006 09:30' prior: 34518136!I am an anchor within a document. I am used as a reference point within a large document.!!PRAnchor class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRAnchor class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:10'!markup	^ '@'! !!PRAnchor class methodsFor: 'instance creation' stamp: 'lr 4/5/2007 13:08'!named: aString	^ self new name: aString! !!PRAnchor class methodsFor: 'instance creation' stamp: 'lr 4/24/2007 20:45'!parse: aString with: aParser	^ aParser add: (self named: (aString allButFirst: self markup size))! !!PRAnchor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ super = anObject		and: [ self name = anObject name ]! !!PRAnchor methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitAnchor: self! !!PRAnchor methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self name hash! !!PRAnchor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!name	^ name! !!PRAnchor methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!name: aString	name := aString! !!PRDocumentGroup commentStamp: 'lr 5/28/2006 20:33' prior: 34518289!I am an abstract group of document items.!!PRDocument commentStamp: 'lr 5/28/2006 21:06' prior: 34518389!I am the root of a document composite.!!PRDocument class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRDocument methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitDocument: self! !!PRDocument methodsFor: 'common-properties' stamp: 'DamienCassou 6/4/2014 15:50'!authors	^ self propertyAt: 'authors' ifAbsent: [ self defaultAuthors ]! !!PRDocument methodsFor: 'common-properties' stamp: 'DamienCassou 6/4/2014 15:51'!date	^ self propertyAt: 'date' ifAbsent: [ self defaultDate ]! !!PRDocument methodsFor: 'common-defaults' stamp: 'DamienCassou 6/4/2014 15:50'!defaultAuthors	^ ''! !!PRDocument methodsFor: 'common-defaults' stamp: 'DamienCassou 6/4/2014 17:58'!defaultDate	^ Date today! !!PRDocument methodsFor: 'common-defaults' stamp: 'DamienCassou 6/4/2014 17:58'!defaultNext	^ nil! !!PRDocument methodsFor: 'common-properties' stamp: 'DamienCassou 6/4/2014 15:51'!next	^ self propertyAt: 'next' ifAbsent: [ self defaultNext ]! !!PRDocument methodsFor: 'common-properties' stamp: 'DamienCassou 6/4/2014 17:58'!next: aDocument	^ self propertyAt: 'next' put: aDocument! !!PRDocumentGroup class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:30'!with: aDocumentItem	^ self new		add: aDocumentItem;		yourself! !!PRDocumentGroup class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:30'!withAll: aCollection	^ self new		addAll: aCollection;		yourself! !!PRDocumentGroup methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/9/2015 17:12'!= anObject	^ super = anObject		and: [ self children = anObject children. ]! !!PRDocumentGroup methodsFor: 'visiting' stamp: 'DamienCassou 3/20/2014 18:08'!accept: aVisitor	<ignoreForCoverage "This method is ignored for test coverage because it is overriden in all subclasses and these subclasses don't need to do a super-send.">	aVisitor visitDocumentGroup: self! !!PRDocumentGroup methodsFor: 'adding' stamp: 'lr 3/20/2006 19:06'!add: aDocumentItem	self setChildren: (self children copyWith: aDocumentItem)! !!PRDocumentGroup methodsFor: 'adding' stamp: 'lr 7/31/2007 21:22'!addAll: aCollection	self setChildren: self children , aCollection! !!PRDocumentGroup methodsFor: 'accessing' stamp: 'lr 5/28/2006 20:32'!children	"Answer the children of the receiver."	^ children! !!PRDocumentGroup methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasChildren	^ self children notEmpty! !!PRDocumentGroup methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self children hash! !!PRDocumentGroup methodsFor: 'initialization' stamp: 'lr 4/4/2007 15:05'!initialize	super initialize.	self setChildren: #()! !!PRDocumentGroup methodsFor: 'testing' stamp: 'BenComan 5/28/2014 22:30'!isGroup	^true! !!PRDocumentGroup methodsFor: 'copying' stamp: 'lr 2/12/2007 19:07'!postCopy	super postCopy.	self setChildren: (self children		collect: [ :each | each copy ])! !!PRDocumentGroup methodsFor: 'initialization' stamp: 'lr 3/20/2006 19:06'!setChildren: aCollection	children := aCollection! !!PRDocumentGroup methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!size	^ self children size! !!PRDocumentGroup methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!text	^ String streamContents: [ :stream |		self children do: [ :each |			stream nextPutAll: each text ] ]! !!PRFormat commentStamp: 'TorstenBergmann 3/5/2015 21:59' prior: 34518496!A styling format !!PRBoldFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 34518586!Bold styling format!!PRBoldFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRBoldFormat class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:36'!markup	^ '""'! !!PRBoldFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitBoldFormat: self! !!PRFormat class methodsFor: 'accessing' stamp: 'lr 9/27/2007 10:32'!markup	self subclassResponsibility! !!PRFormat class methodsFor: 'instance creation' stamp: 'lr 4/24/2007 21:10'!parse: aString with: aParser	^ self withAll: (aParser parseText: (aString copyFrom: self markup size + 1 to: aString size - self markup size))! !!PRFormat methodsFor: 'visiting' stamp: 'DamienCassou 3/20/2014 18:08'!accept: aVisitor	<ignoreForCoverage "This method is ignored for test coverage because it is overriden in all subclasses and these subclasses don't need to do a super-send.">	aVisitor visitFormat: self! !!PRItalicFormat commentStamp: 'TorstenBergmann 3/5/2015 21:59' prior: 34518680!Italic styling format!!PRItalicFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRItalicFormat class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:36'!markup	^ ''''''! !!PRItalicFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitItalicFormat: self! !!PRMonospaceFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 34518779!Monospace styling!!PRMonospaceFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRMonospaceFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 20:40'!markup	^ '=='! !!PRMonospaceFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitMonospaceFormat: self! !!PRStrikethroughFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 34518878!Strikethrough format!!PRStrikethroughFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRStrikethroughFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:44'!markup	^ '--'! !!PRStrikethroughFormat methodsFor: 'visiting' stamp: 'lr 5/31/2007 07:46'!accept: aVisitor	aVisitor visitStrikethroughFormat: self! !!PRSubscriptFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 34518976!Style as subscript!!PRSubscriptFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRSubscriptFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:46'!markup	^ '@@'! !!PRSubscriptFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitSubscriptFormat: self! !!PRSuperscriptFormat commentStamp: 'TorstenBergmann 3/5/2015 22:00' prior: 34519074!Style as superscript!!PRSuperscriptFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:40'!isAbstract	^ false! !!PRSuperscriptFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:45'!markup	^ '^^'! !!PRSuperscriptFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitSuperscriptFormat: self! !!PRUnderlineFormat commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 34519172!Style as underline formatted!!PRUnderlineFormat class methodsFor: 'testing' stamp: 'lr 3/30/2007 19:43'!isAbstract	^ false! !!PRUnderlineFormat class methodsFor: 'accessing' stamp: 'lr 3/30/2007 19:43'!markup	^ '__'! !!PRUnderlineFormat methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitUnderlineFormat: self! !!PRHeader commentStamp: 'lr 5/28/2006 20:34' prior: 34519257!I represent a header within a document. My level is a natural number.!!PRHeader class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRHeader class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:10'!markup	^ '!!'! !!PRHeader class methodsFor: 'instance creation' stamp: 'lr 7/10/2011 17:11'!parse: aString with: aParser	| index string |	index := 0. string := aString.	[ string beginsWithSubCollection: self markup ] whileTrue: [		index := index + 1.		string := string allButFirst: self markup size ].	^ aParser add: (self withAll: (aParser parseTopText: string) level: index)! !!PRHeader class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:30'!withAll: aCollection level: anInteger	^ (self withAll: aCollection)		level: anInteger;		yourself! !!PRHeader methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ super = anObject		and: [ self level = anObject level ]! !!PRHeader methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitHeader: self! !!PRHeader methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self level hash! !!PRHeader methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!level	^ level! !!PRHeader methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!level: anInteger	level := anInteger! !!PRLink commentStamp: 'lr 5/28/2006 21:02' prior: 34519381!I am an abstract link built from an alias and a reference. The alias is the string representation that will be displayed to the user, whereas the reference is a string identifying the target. If there is no alias, the reference itself is displayed. Links can try to embed the referenced target into the containing document.!!Examples=*Reference*=+Alias>Embedded Reference*!!PRExternalLink commentStamp: 'lr 5/28/2006 20:41' prior: 34519820!I am an abstract external link with an URL (Uniform Resource Locator) as reference.!!PRExternalLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRExternalLink class methodsFor: 'testing' stamp: 'DamienCassou 10/8/2013 08:40'!isValidReference: aString	^ aString includesSubstring: '://' caseSensitive: true! !!PRExternalLink methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitExternalLink: self! !!PRExternalLink methodsFor: 'testing' stamp: 'DamienCassou 11/18/2013 15:56'!extensionIsOneOf: extensions 	| extension |	extension := (self reference splitOn: $.) last asLowercase.	^ extensions includes: extension! !!PRExternalLink methodsFor: 'testing' stamp: 'lr 4/1/2009 22:19'!isExternal	^ true! !!PRExternalLink methodsFor: 'testing' stamp: 'DamienCassou 11/18/2013 15:56'!isPicture	^ self isEmbedded and: [ self extensionIsOneOf: self pictureExtensions]! !!PRExternalLink methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/13/2015 23:04'!label	^ self parameters at: 'label' ifAbsent: [ nil ]! !!PRExternalLink methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/13/2015 23:04'!label: aString 	self parameters at: 'label' put: aString! !!PRExternalLink methodsFor: 'private' stamp: 'DamienCassou 11/18/2013 15:57'!pictureExtensions	^ #('png' 'jpg' 'jpeg' 'pdf')! !!PRExternalLink methodsFor: 'accessing' stamp: 'lr 9/8/2008 21:30'!url	"Answer the URL the receiver is pointing to."	^ self urlPrefix , self urlEntry , self urlPostfix! !!PRExternalLink methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!urlEntry	^ self reference! !!PRExternalLink methodsFor: 'accessing-dynamic' stamp: 'lr 10/20/2006 11:43'!urlPostfix	^ ''! !!PRExternalLink methodsFor: 'accessing-dynamic' stamp: 'lr 10/20/2006 11:43'!urlPrefix	^ ''! !!PRMailLink commentStamp: 'lr 6/2/2006 11:29' prior: 34519961!I am an external link pointing to a mail address. I encode my URL to prevent spam bots collecting the address.!!PRMailLink class methodsFor: 'testing' stamp: 'lr 9/22/2008 08:28'!isValidReference: aString	| index |	index := aString indexOf: $@ ifAbsent: [ ^ false ].	index := aString indexOf: $. startingAt: index ifAbsent: [ ^ false ].	^ aString allSatisfy: [ :each | each isAlphaNumeric or: [ '@-.' includes: each ] ]! !!PRMailLink class methodsFor: 'accessing' stamp: 'lr 1/9/2009 19:20'!priority	^ 50! !!PRMailLink methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitMailLink: self! !!PRMailLink methodsFor: 'accessing-dynamic' stamp: 'DamienCassou 4/26/2014 18:04'!scrambledUrl	^ self url! !!PRMailLink methodsFor: 'accessing-dynamic' stamp: 'DamienCassou 4/26/2014 18:04'!unscrambledUrl	^ self urlPrefix, super urlEntry, self urlPostfix! !!PRMailLink methodsFor: 'accessing-dynamic' stamp: 'jf 11/2/2009 11:06'!urlEntry	^ String streamContents: [ :stream |		super urlEntry do: [ :each |			(1 to: 2) atRandom = 1				ifTrue: [ stream nextPut: each ]				ifFalse: [ stream nextPut: $%; nextPutAll: ((each codePoint printStringBase: 16)		padded: #left to: 2 with: $0) ] ] ]! !!PRMailLink methodsFor: 'accessing-dynamic' stamp: 'lr 3/9/2006 11:29'!urlPrefix	^ 'mailto:'! !!PRInternalLink commentStamp: 'lr 4/10/2007 21:12' prior: 34520134!I am an internal link pointing to a structure within the current kernel. I reference my owning structure to be able to lookup the referenced structure. The referenced structure is cached in the instance variable ==target==.!!PRInternalLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRInternalLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isValidReference: aString	^ true! !!PRInternalLink class methodsFor: 'accessing' stamp: 'lr 1/9/2009 19:20'!priority	^ 100! !!PRInternalLink class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:30'!reference: aString	| index |	^ (index := aString indexOf: $@) isZero		ifTrue: [ super reference: aString ]		ifFalse: [			self new				reference: (aString copyFrom: 1 to: index - 1);				anchor: (aString copyFrom: index + 1 to: aString size);				yourself ]! !!PRInternalLink methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ super = anObject		and: [ self anchor = anObject anchor ]! !!PRInternalLink methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitInternalLink: self! !!PRInternalLink methodsFor: 'accessing' stamp: 'lr 5/28/2006 20:48'!anchor	"Answer an anchor string the receiver is pointing to."	^ anchor! !!PRInternalLink methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!anchor: aString	anchor := aString! !!PRInternalLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasAnchor	^ self anchor notNil! !!PRInternalLink methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: self anchor hash! !!PRInternalLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isInternal	^ true! !!PRLink class methodsFor: 'instance creation' stamp: 'DamienCassou 2/10/2014 16:40'!escape: aString	^ PRTextParser escape: aString all: (Array with: self markup with: self markupAlias with: self markupAnchor with: self markupEmbedded with: self markupParameter with: self markupParameterValue)! !!PRLink class methodsFor: 'instance creation' stamp: 'lr 4/5/2007 15:16'!fromString: aString	| classes |	classes := self withAllConcreteClasses		select: [ :each | each isValidReference: aString ].	classes sort: [ :a :b | a priority < b priority ].	^ classes first reference: aString! !!PRLink class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isValidReference: aString	self subclassResponsibility! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:13'!markup	^ '*'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:12'!markupAlias	^ '>'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:12'!markupAnchor	^ '@'! !!PRLink class methodsFor: 'accessing' stamp: 'lr 4/5/2007 15:12'!markupEmbedded	^ '+'! !!PRLink class methodsFor: 'instance creation' stamp: 'DamienCassou 4/3/2015 14:35'!parse: aString with: aParser	| string aliasIndex embedded alias params |	string := aString copyFrom: self markup size + 1 to: aString size - self markup size.	string isEmpty ifTrue: [ ^ (PRTextParser parseString: aString) first  ].	embedded := aString beginsWithSubCollection: self markupEmbedded.	aliasIndex := PRMatcherManager findFirst: self markupAlias at: 1 in: string.	aliasIndex isZero		ifTrue: [ alias := #() ]		ifFalse: [			alias := aParser parseText: (string copyFrom: 1 to: aliasIndex - 1).			alias isEmpty ifTrue: [ alias := alias copyWith: (PRText content: '') ].			string := string copyFrom: aliasIndex + 1 to: string size ].	aliasIndex := PRMatcherManager findFirst: self markupParameter at: 1 in: string.	aliasIndex isZero		ifTrue: [ params := #() ]		ifFalse: [			params := self parseParameters: (string copyFrom: aliasIndex + 1 to: string size).			string := string copyFrom: 1 to: aliasIndex - 1 ].	^ (self fromString: (PRTextParser unescape: string))		parameters: params;		embedded: embedded;		addAll: alias;		yourself! !!PRLink class methodsFor: 'instance creation' stamp: 'DamienCassou 4/3/2015 14:30'!parseParameters: aString	^ PRParameterParser parse: aString! !!PRLink class methodsFor: 'accessing' stamp: 'lr 1/9/2009 19:18'!priority	^ 0! !!PRLink class methodsFor: 'instance creation' stamp: 'lr 3/9/2006 11:30'!reference: aString	^ self new		reference: aString;		yourself! !!PRLink methodsFor: 'comparing' stamp: 'lr 8/27/2007 10:28'!= anObject	^ super = anObject		and: [ self reference = anObject reference		and: [ self embedded = anObject embedded		and: [ self parameters = anObject parameters ] ] ]! !!PRLink methodsFor: 'visiting' stamp: 'DamienCassou 3/20/2014 18:07'!accept: aVisitor	<ignoreForCoverage "This method is ignored for test coverage because it is overriden in all subclasses and these subclasses don't need to do a super-send.">	aVisitor visitLink: self! !!PRLink methodsFor: 'accessing-dynamic' stamp: 'lr 5/28/2006 20:39'!alias	"Answer the alias of the receiver or an empty string if none."	^ self text! !!PRLink methodsFor: 'accessing' stamp: 'lr 4/10/2007 21:49'!embedded	"Answer ==true== if the reference should be embedded."	^ embedded! !!PRLink methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!embedded: aBoolean	embedded := aBoolean! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasAlias	^ self hasChildren! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasAnchor	^ false! !!PRLink methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ super hash bitXor: (self reference hash bitXor: self embedded hash)! !!PRLink methodsFor: 'initialization' stamp: 'CyrilFerlicot 4/13/2015 22:53'!initialize	super initialize.	self embedded: false.	self parameters: Dictionary new.! !!PRLink methodsFor: 'testing' stamp: 'lr 4/10/2007 21:49'!isBroken	"Answer ==true== if the receiver is broken."	^ false! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isEmbedded	^ self embedded! !!PRLink methodsFor: 'testing' stamp: 'lr 4/1/2009 22:18'!isExternal	^ false! !!PRLink methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!isInternal	^ false! !!PRLink methodsFor: 'testing' stamp: 'lr 4/16/2007 12:00'!isLink	^ true! !!PRLink methodsFor: 'accessing' stamp: 'lr 5/20/2008 08:20'!parameters	"Answer an array of parameters."	^ parameters! !!PRLink methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/13/2015 22:50'!parameters: aCollection	parameters := aCollection asDictionary! !!PRLink methodsFor: 'copying' stamp: 'lr 4/4/2009 11:50'!postCopy	super postCopy.	self parameters: (self parameters		collect: [ :each | each copy ])! !!PRLink methodsFor: 'accessing' stamp: 'lr 5/28/2006 20:39'!reference	"Answer the reference of the receiver."	^ reference! !!PRLink methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:29'!reference: aString	reference := aString! !!PRLink methodsFor: 'accessing-dynamic' stamp: 'lr 1/9/2009 19:26'!text	| text |	^ (text := super text) isEmpty 		ifTrue: [ self reference ]		ifFalse: [ text ]! !!PRLink methodsFor: 'accessing-dynamic' stamp: 'lr 10/20/2006 11:40'!title	"Answer a title of the link, this is should never be nil."	^ self reference! !!PRList commentStamp: 'lr 5/28/2006 20:55' prior: 34520412!I am an abstract list. My children are instances of *PRListItem*.!!PRDefinitionList commentStamp: 'lr 12/30/2007 19:44' prior: 34520543!I am an definition list. I am typically used for a keyword and a longer definition string.!!PRDefinitionList class methodsFor: 'testing' stamp: 'lr 12/30/2007 17:23'!isAbstract	^ false! !!PRDefinitionList methodsFor: 'visiting' stamp: 'lr 12/30/2007 17:23'!accept: aVisitor	aVisitor visitDefinitionList: self! !!PRList class methodsFor: 'private' stamp: 'lr 2/2/2010 17:10'!parse: aString to: aGroup with: aParser	| specification remainder |	(specification := self specificationFor: aString) isNil		ifTrue: [ ^ aGroup addAll: (aParser parseTopText: aString) ].	(aGroup children isEmpty or: [ aGroup children last class ~= specification second ])		ifTrue: [ aGroup add: specification second new ].	remainder := aString allButFirst: specification first size.	(aGroup children last children isEmpty or: [ (self specificationFor: remainder) isNil ])		ifTrue: [ aGroup children last add: specification third new ].	^ self parse: remainder to: aGroup children last children last with: aParser! !!PRList class methodsFor: 'instance creation' stamp: 'lr 1/28/2009 15:46'!parse: aString with: aParser	^ self parse: aString to: aParser document with: aParser! !!PRList class methodsFor: 'private' stamp: 'lr 7/10/2011 17:11'!specificationFor: aString	(aString beginsWithSubCollection: PROrderedList markup)		ifTrue: [ ^ Array with: PROrderedList markup with: PROrderedList with: PRListItem ].	(aString beginsWithSubCollection: PRUnorderedList markup)		ifTrue: [ ^ Array with: PRUnorderedList markup with: PRUnorderedList with: PRListItem ].	(aString beginsWithSubCollection: PRTermItem markup)		ifTrue: [ ^ Array with: PRTermItem markup with: PRDefinitionList with: PRTermItem ].	(aString beginsWithSubCollection: PRDataItem markup)		ifTrue: [ ^ Array with: PRDataItem markup with: PRDefinitionList with: PRDataItem ].	^ nil! !!PRList methodsFor: 'visiting' stamp: 'DamienCassou 3/20/2014 18:07'!accept: aVisitor	<ignoreForCoverage "This method is ignored for test coverage because it is overriden in all subclasses and these subclasses don't need to do a super-send.">	aVisitor visitList: self! !!PROrderedList commentStamp: 'lr 5/28/2006 20:53' prior: 34520695!I am an ordered list. I am typically used for numbered items.!!PROrderedList class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PROrderedList class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:12'!markup	^ '#'! !!PROrderedList methodsFor: 'visiting' stamp: 'lr 12/30/2007 19:31'!accept: aVisitor	aVisitor visitOrderedList: self! !!PRUnorderedList commentStamp: 'lr 5/28/2006 20:53' prior: 34520820!I am an unordered list. I am typically used for unnumbered lists!!PRUnorderedList class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRUnorderedList class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:12'!markup	^ '-'! !!PRUnorderedList methodsFor: 'visiting' stamp: 'lr 12/30/2007 19:31'!accept: aVisitor	aVisitor visitUnorderedList: self! !!PRListItem commentStamp: 'lr 6/2/2006 11:26' prior: 34520942!I am a item within a *PRList*.!!PRDataItem commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 34521043!Data in a list!!PRDataItem class methodsFor: 'accessing' stamp: 'lr 12/30/2007 21:59'!markup	^ ':'! !!PRDataItem methodsFor: 'visiting' stamp: 'lr 12/30/2007 21:50'!accept: aVisitor	aVisitor visitDataItem: self! !!PRListItem class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRListItem methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitListItem: self! !!PRTermItem commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 34521128!A term!!PRTermItem class methodsFor: 'accessing' stamp: 'lr 12/30/2007 22:00'!markup	^ ';'! !!PRTermItem methodsFor: 'visiting' stamp: 'lr 12/30/2007 21:51'!accept: aVisitor	aVisitor visitTermItem: self! !!PRParagraph commentStamp: 'lr 5/28/2006 20:54' prior: 34521194!I am a paragraph of text.!!PRAnnotatedParagraph commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 34521300!An annotated paragraph!!PRAnnotatedParagraph class methodsFor: 'accessing' stamp: 'lr 5/26/2009 21:59'!markup	^ '@@'! !!PRAnnotatedParagraph class methodsFor: 'instance creation' stamp: 'lr 2/2/2010 17:11'!parse: aString with: aParser	| string annotation |	string := aString allButFirst: self markup size.	annotation := string copyUpTo: Character space.	string := string copyAfter: Character space.	^ aParser add: (self withAll: (aParser parseTopText: string) annotation: annotation)! !!PRAnnotatedParagraph class methodsFor: 'instance creation' stamp: 'lr 5/26/2009 22:04'!withAll: aCollection annotation: aString	^ (self withAll: aCollection)		annotation: aString;		yourself! !!PRAnnotatedParagraph methodsFor: 'comparing' stamp: 'lr 5/26/2009 22:07'!= anObject	^ super = anObject and: [ self annotation = anObject annotation ]! !!PRAnnotatedParagraph methodsFor: 'visiting' stamp: 'lr 5/26/2009 21:59'!accept: aVisitor	aVisitor visitAnnotatedParagraph: self! !!PRAnnotatedParagraph methodsFor: 'accessing' stamp: 'lr 5/26/2009 21:59'!annotation	^ annotation! !!PRAnnotatedParagraph methodsFor: 'accessing' stamp: 'lr 5/26/2009 21:59'!annotation: aString	annotation := aString! !!PRAnnotatedParagraph methodsFor: 'comparing' stamp: 'lr 5/26/2009 22:07'!hash	^ super hash bitXor: self annotation hash! !!PREmptyParagraph commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 34521399!An empty paragraph!!PREmptyParagraph methodsFor: 'visiting' stamp: 'lr 12/20/2007 12:12'!accept: aVisitor	aVisitor visitEmptyParagraph: self! !!PRParagraph class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRParagraph class methodsFor: 'instance creation' stamp: 'lr 2/2/2010 17:10'!parse: aString with: aParser	^ aParser addParagraph: (self withAll: (aParser parseTopText: aString))! !!PRParagraph methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitParagraph: self! !!PRPreformatted commentStamp: 'lr 5/28/2006 20:56' prior: 34521480!I am preformatted text or source code. My children are instances of *PRText*.!!PRPreformatted class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRPreformatted class methodsFor: 'accessing' stamp: 'DamienCassou 2/26/2014 14:04'!markup	^ '= '! !!PRPreformatted class methodsFor: 'instance creation' stamp: 'lr 4/24/2007 20:55'!parse: aString with: aParser	^ aParser combine: self with: (PRText content: (aString allButFirst: self markup size))! !!PRPreformatted methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitPreformatted: self! !!PRTable commentStamp: 'lr 5/28/2006 20:56' prior: 34521613!I am a table. My children are instances of *PRTableRow*.!!PRTable class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTable class methodsFor: 'instance creation' stamp: 'DamienCassou 2/10/2014 16:41'!parse: aString with: aParser	| line row cell markup index changed |	line := aString.	row := PRTableRow new.	[ line isEmpty ] whileFalse: [		cell := PRTableCell new.		line := line allButFirst: cell class markup size.		[	changed := false.				#(markupLeft markupCenter markupRight markupHeading) 				with: #(beAlignedLeft beAlignedCenter beAlignedRight beHeading) 				do: [ :selector :align |					markup := cell class perform: selector.					(line beginsWithSubCollection: markup) ifTrue: [						line := line allButFirst: markup size.						cell perform: align.						changed := true ] ].			changed ] whileTrue.		index := (PRMatcherManager findFirst: cell class markup at: 1 in: line) - 1.		index < 1 ifTrue: [ index := line size ].		row add: (cell addAll: (aParser parseText: (line first: index))).		line := line allButFirst: index ].	^ aParser combine: self with: row! !!PRTable methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitTable: self! !!PRTable methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!columnCount	^ self children inject: 0 into: [ :max :row | max max: row columnCount ]! !!PRTable methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!rowCount	^ self children size! !!PRTableCell commentStamp: 'lr 5/28/2006 20:57' prior: 34521729!I am a cell of a table.!!PRTableCell class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:13'!markup	^ '|'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:11'!markupCenter	^ '|'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 8/14/2008 08:53'!markupHeading	^ '!!'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:11'!markupLeft	^ '{'! !!PRTableCell class methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:11'!markupRight	^ '}'! !!PRTableCell methodsFor: 'comparing' stamp: 'lr 8/14/2008 08:52'!= anObject	^ super = anObject		and: [ self align = anObject align		and: [ self heading = anObject heading ] ]! !!PRTableCell methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitTableCell: self! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!align	^ align! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!align: aSymbol	align := aSymbol! !!PRTableCell methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!beAlignedCenter	self align: #center! !!PRTableCell methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!beAlignedLeft	self align: #left! !!PRTableCell methodsFor: 'actions' stamp: 'lr 3/9/2006 11:30'!beAlignedRight	self align: #right! !!PRTableCell methodsFor: 'actions' stamp: 'lr 8/14/2008 08:52'!beHeading	self heading: true! !!PRTableCell methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:30'!hash	^ super hash bitXor: self align hash! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 8/14/2008 08:52'!heading	^ heading! !!PRTableCell methodsFor: 'accessing' stamp: 'lr 8/14/2008 08:52'!heading: aBoolean	heading := aBoolean! !!PRTableCell methodsFor: 'initialization' stamp: 'lr 8/14/2008 09:01'!initialize	super initialize.	heading := false! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAligned	^ self align notNil! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAlignedCenter	^ self align = #center! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAlignedLeft	^ self align = #left! !!PRTableCell methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAlignedRight	^ self align = #right! !!PRTableCell methodsFor: 'testing' stamp: 'lr 8/14/2008 09:00'!isHeading	^ self heading! !!PRTableRow commentStamp: 'lr 5/28/2006 20:56' prior: 34521811!I am a row of a table. My children are instances of *PRTableCell*.!!PRTableRow class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRTableRow methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitTableRow: self! !!PRTableRow methodsFor: 'accessing' stamp: 'lr 3/9/2006 11:30'!columnCount	^ self children size! !!PRTableRow methodsFor: 'testing' stamp: 'DamienCassou 6/3/2014 10:42'!isHeading	"For a row to be considered a heading row, all cells must be either heading or empty. A totally empty row is not considered a heading row."	^ (self children anySatisfy: [ :cell | cell hasChildren ])		and: [ self children allSatisfy: [ :cell | cell isHeading or: [ cell hasChildren not ] ] ]! !!PRDocumentItem class methodsFor: 'accessing' stamp: 'lr 2/2/2010 15:47'!markup	^ nil! !!PRDocumentItem class methodsFor: 'accessing' stamp: 'lr 2/2/2010 15:47'!markupBegin	^ self markup! !!PRDocumentItem class methodsFor: 'accessing' stamp: 'lr 2/2/2010 15:58'!markupEnd: aString	^ aString! !!PRDocumentItem class methodsFor: 'instance creation' stamp: 'DamienCassou 2/5/2014 12:43'!parse: aStream with: aParser	<ignoreForCoverage>	self error: self name , ' is not supposed to be parsed by ' , aParser printString! !!PRDocumentItem methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!= anObject	^ self species = anObject species! !!PRDocumentItem methodsFor: 'visiting' stamp: 'DamienCassou 3/20/2014 18:08'!accept: aVisitor	<ignoreForCoverage "This method is ignored for test coverage because it is overriden in all subclasses and these subclasses don't need to do a super-send.">	aVisitor visitDocumentItem: self! !!PRDocumentItem methodsFor: 'testing' stamp: 'lr 3/9/2006 11:29'!hasChildren	^ false! !!PRDocumentItem methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:29'!hash	^ self species hash! !!PRDocumentItem methodsFor: 'testing' stamp: 'BenComan 5/28/2014 22:29'!isGroup	^false! !!PRDocumentItem methodsFor: 'testing' stamp: 'lr 4/16/2007 12:00'!isLink	^ false! !!PRDocumentItem methodsFor: 'testing' stamp: 'BenjaminVanRyseghem 1/15/2014 12:05'!isText	^ false! !!PRDocumentItem methodsFor: 'accessing-dynamic' stamp: 'lr 5/28/2006 20:31'!text	"Answer a string representation of the receiver."	^ String new! !!PRHorizontalRule commentStamp: 'lr 5/28/2006 20:57' prior: 34521942!I am a horizontal rule.!!PRHorizontalRule class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRHorizontalRule class methodsFor: 'accessing' stamp: 'lr 4/5/2007 13:13'!markup	^ '_'! !!PRHorizontalRule class methodsFor: 'instance creation' stamp: 'DamienCassou 2/10/2014 13:41'!parse: aString with: aParser	| index |	index := aString findLast: [ :char | char isSeparator not ].	^ self markup size < index		ifFalse: [ aParser add: self new ]		ifTrue: [ PRMatcherManager lineMatcherDefault parse: aString with: aParser ]! !!PRHorizontalRule methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitHorizontalRule: self! !!PRLineBreak commentStamp: 'lr 9/14/2009 08:31' prior: 34522025!I am a line break. I only show up in the wiki format.!!PRLineBreak class methodsFor: 'testing' stamp: 'lr 12/9/2007 09:19'!isAbstract	^ false! !!PRLineBreak methodsFor: 'visiting' stamp: 'lr 12/9/2007 09:05'!accept: aVisitor	aVisitor visitLineBreak: self! !!PRText commentStamp: 'lr 5/28/2006 20:58' prior: 34522133!I am a plain text. I am the most important leaf node of the document composite.!!PRCommentedLine commentStamp: 'TorstenBergmann 3/5/2015 22:01' prior: 34522288!A commented line!!PRCommentedLine class methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 15:49'!markup	^ '%'! !!PRCommentedLine class methodsFor: 'instance creation' stamp: 'BenComan 5/28/2014 23:52'!parse: aString with: aParser	| stream content |	stream := aString readStream.	stream next: self markup size.	content := stream upToEnd.	^ aParser addNested: (self content: content)! !!PRCommentedLine methodsFor: 'visiting' stamp: 'DamienCassou 11/18/2013 15:49'!accept: aVisitor	aVisitor visitCommentedLine: self! !!PRRaw commentStamp: '<historical>' prior: 34522352!I represent a text that is not parsed/analyzed at all. I can have a type to limit the kind of output with which I'm associated. For example, an instance of me with type 'html' will only be written to HTML documents.I'm particularly useful when the rest of Pillar can't represent something you *really* want in your output: for example, an equation. In this case, you can describe your equation in latex using an instance of me of type latex and a picture everywhere else.!!PRRaw class methodsFor: 'instance creation' stamp: 'lr 9/25/2011 13:38'!content: aString type: aTypeString	^ (self content: aString)		type: aTypeString;		yourself! !!PRRaw class methodsFor: 'accessing' stamp: 'lr 2/2/2010 15:33'!markup	^ self markupBegin! !!PRRaw class methodsFor: 'accessing' stamp: 'lr 2/2/2010 15:33'!markupBegin	^ '{{{'! !!PRRaw class methodsFor: 'accessing' stamp: 'lr 2/2/2010 16:00'!markupEnd: aString	^ '}}}'! !!PRRaw class methodsFor: 'instance creation' stamp: 'DamienCassou 2/10/2014 16:40'!parse: aString with: aParser	| string index type |	string := aString		copyFrom: self markupBegin size + 1		to: aString size - (self markupEnd: self markupBegin) size.	index := PRMatcherManager		findFirst: self verbatimTypeSeparator		at: 1 in: string.	index isZero ifFalse: [		type := string copyFrom: 1 to: index - 1.		(self verbatimTypes includes: type)			ifTrue: [ string := string copyFrom: index + self verbatimTypeSeparator size to: string size ]			ifFalse: [ type := nil ] ].	^ self content: string type: type! !!PRRaw class methodsFor: 'accessing' stamp: 'lr 9/25/2011 13:48'!verbatimTypeSeparator	^ ':'! !!PRRaw class methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/20/2013 00:24'!verbatimTypes	"The verbatim types to be recognized, for now this is hardcoded."		^ #('text' 'html' 'latex' 'markdown')! !!PRRaw methodsFor: 'comparing' stamp: 'lr 2/2/2010 15:17'!= anObject	^ super = anObject and: [ self type = anObject type ]! !!PRRaw methodsFor: 'visiting' stamp: 'DamienCassou 11/20/2013 17:22'!accept: aVisitor	aVisitor visitRaw: self! !!PRRaw methodsFor: 'comparing' stamp: 'lr 2/2/2010 15:16'!hash	^ super hash bitXor: self type hash! !!PRRaw methodsFor: 'testing' stamp: 'DamienCassou 11/20/2013 17:45'!isForType: aSymbol	^ self type isNil or: [ self type = aSymbol ]! !!PRRaw methodsFor: 'accessing' stamp: 'lr 2/2/2010 15:16'!type	^ type! !!PRRaw methodsFor: 'accessing' stamp: 'lr 2/2/2010 15:16'!type: aString	type := aString! !!PRScript commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 34522894!An embedded script!!PRScript class methodsFor: 'instance creation' stamp: 'DamienCassou 4/3/2015 14:41'!content: aString parameters: parameters 	^ (self content: aString)			parameters: parameters;			yourself! !!PRScript class methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 15:55'!markup	^ self markupBegin! !!PRScript class methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 15:55'!markupBegin	^ '[[['! !!PRScript class methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 15:55'!markupEnd	^ ']]]'! !!PRScript class methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 15:55'!markupEnd: aString	^ ']]]'! !!PRScript class methodsFor: 'instance creation' stamp: 'DamienCassou 4/3/2015 14:41'!parse: aString with: aParser	| stream configuration content endOfContentIndex |	stream := aString readStream.	stream skip: self markupBegin size.	configuration := stream nextLine.	stream atEnd		ifTrue: [ 			"We are *not* in a script after all (because the markupEnd should be on its own line."			^ (PRTextParser parseString: aString) first ].	endOfContentIndex := aString size - self markupEnd size.	content := stream next: endOfContentIndex - stream position.	^ self content: content parameters: (self parseParameters: configuration)! !!PRScript class methodsFor: 'parsing' stamp: 'DamienCassou 4/3/2015 14:42'!parseParameters: aString 	^ PRParameterParser parse: aString! !!PRScript methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/10/2015 10:55'!= anObject	"We use the method language to be sure that the language is a PRAbstractScriptLanguage and not a string."	^ super = anObject		and: [	 self language. anObject language. self parameters = anObject parameters		and: [ self children = anObject children ] ]! !!PRScript methodsFor: 'visiting' stamp: 'DamienCassou 11/18/2013 15:53'!accept: aVisitor	aVisitor visitScript: self! !!PRScript methodsFor: 'accessing-delegated' stamp: 'CyrilFerlicot 4/13/2015 23:01'!caption	^ caption		ifNil: [ 			caption := self				parameters at: 'caption'				ifPresent: [ :string | (PRDocumentParser parse: string) children first ]				ifAbsent: [ PRText content: '' ] ]! !!PRScript methodsFor: 'accessing-delegated' stamp: 'DamienCassou 1/8/2014 18:14'!caption: aString	parameters := parameters copyWith: 'caption' -> aString! !!PRScript methodsFor: 'accessing' stamp: 'DamienCassou 1/14/2014 14:01'!children	^ children		ifNil: [ 			children := self isEvaluated				ifTrue: [ self evaluate ]				ifFalse: [ Array new ] ]! !!PRScript methodsFor: 'accessing-delegated' stamp: 'DamienCassou 1/14/2014 13:38'!eval: aString	parameters := parameters copyWith: 'eval' -> aString! !!PRScript methodsFor: 'public access' stamp: 'DamienCassou 1/14/2014 14:05'!evaluate	| content |	content := self evaluationString.	^ [ (PRDocumentParser parse: content) children ]		on: Error		do: [ :e | PRBoldFormat content: e messageText ]! !!PRScript methodsFor: 'private' stamp: 'DamienCassou 4/4/2015 22:17'!evaluationString	^ String		streamContents: [ :stream | 			| evaluator |			evaluator := PRScriptEvaluationEnvironment new				setStream: stream;				yourself.			[ Compiler evaluate: self text for: evaluator logged: false ]				on: Error				do: [ :e | stream nextPutAll: '= ',e description] ]! !!PRScript methodsFor: 'testing' stamp: 'CyrilFerlicot 4/13/2015 23:01'!hasCaption	^ self parameters at: 'caption' ifPresent: [ :param | param isEmptyOrNil not ] ifAbsent: [ false ]! !!PRScript methodsFor: 'testing' stamp: 'DamienCassou 1/14/2014 13:59'!hasChildren	^ self children notEmpty! !!PRScript methodsFor: 'testing' stamp: 'CyrilFerlicot 4/13/2015 23:01'!hasLabel	| label |	label := self parameters at: 'label' ifAbsent: [ ^ false ].	^ label isEmptyOrNil not! !!PRScript methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/10/2015 10:54'!hash	^ super hash 		bitXor: (self properties hash 		bitXor: self children hash)! !!PRScript methodsFor: 'initialization' stamp: 'CyrilFerlicot 4/13/2015 22:34'!initialize	super initialize.	parameters := Dictionary new! !!PRScript methodsFor: 'testing' stamp: 'CyrilFerlicot 4/13/2015 23:01'!isEvaluated	^ self parameters at: 'eval' ifPresent: [ :eval | eval = 'true' or: [ eval = true ] ] ifAbsent: [ false ]! !!PRScript methodsFor: 'accessing-delegated' stamp: 'CyrilFerlicot 4/13/2015 23:01'!label	^ self parameters at: 'label' ifAbsent: ['']! !!PRScript methodsFor: 'accessing-delegated' stamp: 'DamienCassou 1/9/2014 15:42'!label: aString	parameters := parameters copyWith: 'label' -> aString! !!PRScript methodsFor: 'accessing-delegated' stamp: 'CyrilFerlicot 4/13/2015 23:01'!language	^ self		parameters at: 'language'		ifPresent: [ :language | 			language isString				ifTrue: [ 					| realObject |					realObject := PRAbstractScriptLanguage for: language.					self language: realObject.					realObject ]				ifFalse: [ language ] ]		ifAbsent: [ PRUnspecifiedScriptLanguage default ]! !!PRScript methodsFor: 'accessing-delegated' stamp: 'CyrilFerlicot 4/13/2015 23:02'!language: aLanguage	self parameters at: 'language' put: aLanguage! !!PRScript methodsFor: 'accessing-parameters' stamp: 'DamienCassou 4/3/2015 14:21'!parameters	^ parameters! !!PRScript methodsFor: 'accessing-parameters' stamp: 'CyrilFerlicot 4/13/2015 22:35'!parameters: aCollection	parameters := aCollection asDictionary! !!PRScript methodsFor: 'accessing' stamp: 'DamienCassou 1/8/2014 18:06'!text: aString	super text: aString withoutTrailingNewlines! !!PRText class methodsFor: 'instance creation' stamp: 'lr 4/5/2007 14:41'!content: aString	^ self new text: aString! !!PRText class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ false! !!PRText methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:30'!= anObject	^ super = anObject		and: [ self text = anObject text ]! !!PRText methodsFor: 'visiting' stamp: 'lr 3/30/2007 20:01'!accept: aVisitor	aVisitor visitText: self! !!PRText methodsFor: 'comparing' stamp: 'lr 3/9/2006 11:30'!hash	^ super hash bitXor: self text hash! !!PRText methodsFor: 'testing' stamp: 'BenjaminVanRyseghem 1/15/2014 15:45'!isText	^ self class name = #PRText! !!PRText methodsFor: 'printing' stamp: 'lr 3/9/2006 11:30'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' text: '; print: self text! !!PRText methodsFor: 'accessing' stamp: 'lr 4/5/2007 14:40'!text	"Answer the string the receiver is representing."	^ text! !!PRText methodsFor: 'accessing' stamp: 'lr 4/5/2007 14:40'!text: aString	text := aString! !!PRObject class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:30'!isAbstract	^ true! !!PRObject class methodsFor: 'instance creation' stamp: 'jf 9/18/2009 15:41'!new	"Create a new instance of this class and checks if it isn't abstract."	self isAbstract		ifTrue: [ self error: self name , ' is abstract.' ].	^ super new! !!PRObject class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:30'!withAllConcreteClasses	^ Array streamContents: [ :stream |		self withAllConcreteClassesDo: [ :each |			stream nextPut: each ] ]! !!PRObject class methodsFor: 'reflection' stamp: 'lr 3/9/2006 11:30'!withAllConcreteClassesDo: aBlock	self withAllSubclassesDo: [ :each |		each isAbstract ifFalse: [			aBlock value: each ] ]! !!PRObject methodsFor: 'visiting' stamp: 'DamienCassou 2/5/2014 12:45'!accept: aVisitor	<ignoreForCoverage>	"Dispatch to ==aVisitor== depending on the receiver."! !!PRObject methodsFor: 'private' stamp: 'DamienCassou 10/28/2013 16:47'!errorPropertyNotFound: aSelector	PRPropertyError signal: 'Property ' , aSelector , ' not found.'! !!PRObject methodsFor: 'testing' stamp: 'lr 4/10/2007 21:49'!hasProperty: aKey	"Test if the property ==aKey== is defined within the receiver."	^ self properties includesKey: aKey! !!PRObject methodsFor: 'copying' stamp: 'lr 3/9/2006 11:29'!postCopy	super postCopy.	properties := properties copy! !!PRObject methodsFor: 'copying' stamp: 'DamienCassou 2/5/2014 12:45'!postCopyTo: anObject	<ignoreForCoverage>! !!PRObject methodsFor: 'printing' stamp: 'DamienCassou 2/5/2014 12:46'!printOn: aStream	<ignoreForCoverage>	super printOn: aStream.	aStream nextPut: $[; print: self identityHash; nextPut: $]! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 5/28/2006 17:01'!properties	"Answer the property dictionary of the receiver."	^ properties ifNil: [ properties := Dictionary new ]! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:49'!propertyAt: aKey	"Answer the value of the property ==aKey==, raises an error if the property doesn't exist."	^ self propertyAt: aKey ifAbsent: [ self errorPropertyNotFound: aKey ]! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:49'!propertyAt: aKey ifAbsent: aBlock	"Answer the value of the property ==aKey==, or the result of ==aBlock== if the property doesn't exist."	^ self properties at: aKey ifAbsent: aBlock! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:49'!propertyAt: aKey ifAbsentPut: aBlock	"Answer the value of the property ==aKey==, or if the property doesn't exist adds and answers the result of evaluating ==aBlock==."	^ self properties at: aKey ifAbsentPut: aBlock! !!PRObject methodsFor: 'accessing-properties' stamp: 'lr 4/10/2007 21:50'!propertyAt: aKey put: aValue	"Adds or replaces the property ==aKey== with ==aValue==."	^ self properties at: aKey put: aValue! !!PRVisitor commentStamp: 'lr 6/2/2006 11:55' prior: 34522969!I am an abstract visitor. I provide a default implementation of all visit messages that does not descend automatically into children of the visited graph. Subclasses should override all my messages in appropriate ways to visit the nodes they need.!!PRTransformer commentStamp: 'CyrilFerlicot 4/9/2015 10:49' prior: 34523288!I'm an abstract class. I allows the transformation of a tree. I'll visit a tree and if a node need to be transform i'll replace the node by his transformation.The top node is the root of the tree i need to transform.The replacement is a Stack with all the nodes of the branch of the node I'm visiting.!!PRScriptEvaluator class methodsFor: 'testing' stamp: 'DamienCassou 4/5/2015 10:25'!isAbstract	^ false! !!PRScriptEvaluator methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/9/2015 10:27'!visitScript: aScript	aScript isEvaluated		ifTrue: [ self replace: aScript children ]! !!PRTransformer methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/10/2015 10:00'!configuration	^ configuration ifNil: [ configuration :=PRCocoonConfiguration new ]! !!PRTransformer methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/10/2015 09:59'!configuration: aConfiguration	configuration := aConfiguration! !!PRTransformer methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/10/2015 11:08'!initialize	super initialize.	replacement := Stack new! !!PRTransformer methodsFor: 'protected' stamp: 'CyrilFerlicot 4/10/2015 11:09'!replace: newNodes	"When we do a transformation I replace the current node by his transformation."	replacement pop.	replacement push: newNodes! !!PRTransformer methodsFor: 'visiting' stamp: 'CyrilFerlicot 4/10/2015 11:03'!start: anObject	"I launch the transformation."	topNode := anObject.	super start: anObject! !!PRTransformer methodsFor: 'accessing' stamp: 'DamienCassou 4/5/2015 10:27'!topNode	^ topNode! !!PRTransformer methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/10/2015 11:09'!visitDocumentGroup: aGroup	aGroup		setChildren:			(aGroup children				flatCollect: [ :child | 					replacement push: {child}.					self visit: child.					replacement pop]). ! !!PRTransformerWithoutUselessParagraph commentStamp: 'CyrilFerlicot 4/15/2015 10:29' prior: 34523689!I'm an abstract transformer. I assure that the transformation I do don't contains useless paragraph node.!!PRFileInclusion commentStamp: 'CyrilFerlicot 4/9/2015 11:37' prior: 34523868!I transform an InputFileAnnotation node into a tree which represente what's inside the file.!!PRFileInclusion class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/9/2015 11:38'!isAbstract	^ false! !!PRFileInclusion methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/14/2015 17:48'!aboutClass	^ PRInputFileAnnotation ! !!PRFileInclusion methodsFor: 'protected' stamp: 'CyrilFerlicot 4/10/2015 11:09'!replace: newNodes	"I replace the last node of the stack by his transformation."	replacement pop.	replacement push: newNodes.! !!PRFileInclusion methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/15/2015 10:01'!specificVisitor: anInputFileAnnotation	^ self visitInputFileAnnotation: anInputFileAnnotation! !!PRFileInclusion methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/14/2015 17:04'!visitInputFileAnnotation: anInputFileAnnotation	"I load the file and if the file exist I replace the node of the annotation by the content of the file."	| file |	file := anInputFileAnnotation fileWithConfiguration: self configuration.	file exists		ifTrue: [ 			| parsedFile |			parsedFile := anInputFileAnnotation parseFile: file withConfiguration: self configuration.			self replace: parsedFile children]		ifFalse: [ anInputFileAnnotation errorFileNotFound: file ]! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/14/2015 17:48'!aboutClass	^ self shouldBeImplemented ! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/16/2015 17:53'!replaceParagraph	replacement first class = PRParagraph		ifTrue: [ replacement push: replacement pop first children ]! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/14/2015 23:07'!specificVisitor: something	^ self shouldBeImplemented ! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/16/2015 17:18'!transformParagraph: paragraph	^ paragraph children size = 1		ifTrue: [ self transformParagraphWith1Child: paragraph ]		ifFalse: [ self transformParagraphWithChildren: paragraph ]! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/15/2015 10:04'!transformParagraphWith1Child: paragraph	^ paragraph children first class = self aboutClass		ifTrue: [ 			replacement push: {paragraph}.			self specificVisitor: paragraph children first.			replacement pop ]		ifFalse: [ self visitNormalNode: paragraph ]! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/16/2015 17:48'!transformParagraphWithChildren: paragraph	^ (paragraph children contains: [ :each | each class = self aboutClass ])		ifTrue: [ self visitParagraphWithAnnotation: paragraph ]		ifFalse: [ self visitNormalNode: paragraph ]! !!PRTransformerWithoutUselessParagraph methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/16/2015 17:26'!visitDocumentGroup: aGroup	aGroup		setChildren:			(aGroup children				flatCollect: [ :child | 					child class = PRParagraph						ifTrue: [ self transformParagraph: child ]						ifFalse: [ self visitNormalNode: child ] ])! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/14/2015 23:47'!visitNormalNode: node	replacement push: {node}.	self visit: node.	^ replacement pop! !!PRTransformerWithoutUselessParagraph methodsFor: 'as yet unclassified' stamp: 'CyrilFerlicot 4/16/2015 17:53'!visitParagraphWithAnnotation: paragraph	^ {(paragraph		setChildren:			(paragraph children				flatCollect: [ :child |					child class = self aboutClass						ifTrue: [ 							replacement push: {child}.							self visit: child.							self replaceParagraph.							replacement pop ]						ifFalse: [ self visitNormalNode: child ] ]))}! !!PRVisitor class methodsFor: 'testing' stamp: 'DamienCassou 3/20/2014 18:09'!isAbstract	<ignoreForCoverage "This method is ignored for test coverage because it is overriden in all subclasses and these subclasses don't need to do a super-send.">	^ true! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!start: anObject	self visit: anObject! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!visit: anObject	anObject acceptDecorated: self! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!visitAll: aCollection	aCollection do: [ :each | self visit: each ]! !!PRVisitor methodsFor: 'visiting' stamp: 'lr 3/9/2006 11:30'!visitAll: aCollection separatedBy: aBlock	aCollection do: [ :each | self visit: each ] separatedBy: aBlock! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitAnchor: anObject	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 5/26/2009 22:07'!visitAnnotatedParagraph: aDocument	self visitParagraph: aDocument! !!PRVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 4/3/2015 17:56'!visitAnnotation: anAnnotation	self visitDocumentItem: anAnnotation! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitBoldFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 11/18/2013 18:05'!visitCommentedLine: aCommentedLine! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 21:53'!visitDataItem: anObject	self visitListItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 19:33'!visitDefinitionList: anObject	self visitList: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitDocument: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:05'!visitDocumentGroup: anObject	self visitAll: anObject children! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:04'!visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 3/20/2014 17:49'!visitEmptyParagraph: anObject	<ignoreForCoverage "This method is ignored for coverage because visiting an empty paragraph is typically very much different from visiting a paragraph.">		self visitParagraph: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/9/2015 09:55'!visitExternalLink: anObject	self visitLink: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitFormat: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitHeader: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitHorizontalRule: anObject	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/10/2015 11:14'!visitInputFileAnnotation: anInputFileAnnotation	self visitAnnotation: anInputFileAnnotation! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitInternalLink: anObject	self visitLink: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitItalicFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 3/20/2014 17:51'!visitLineBreak: anObject	<ignoreForCoverage "This method is ignored for coverage because visiting a line break is typically very much different from visiting a standard document item.">	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/9/2015 10:18'!visitLink: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitList: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitListItem: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitMailLink: anObject	self visitExternalLink: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitMonospaceFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitOrderedList: anObject	self visitList: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitParagraph: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitPreformatted: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 11/20/2013 17:22'!visitRaw: aRaw	self visitText: aRaw! !!PRVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 11/18/2013 17:40'!visitScript: aScript 	self visitText: aScript! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 5/31/2007 07:46'!visitStrikethroughFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitSubscriptFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitSuperscriptFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitTable: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitTableCell: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitTableRow: anObject	self visitDocumentGroup: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 21:53'!visitTermItem: anObject	self visitListItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitText: anObject	self visitDocumentItem: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitUnderlineFormat: anObject	self visitFormat: anObject! !!PRVisitor methodsFor: 'visiting-document' stamp: 'lr 3/30/2007 20:01'!visitUnorderedList: anObject	self visitList: anObject! !!PRParameterParser commentStamp: 'DamienCassou 4/3/2015 14:25' prior: 34524035!I'm parsing strings that contain sequences of key/value pairs such as: key1=value1|key2=value2!!PRParameterParser class methodsFor: 'parses' stamp: 'DamienCassou 4/3/2015 14:29'!defaultMarkupParameter	^ '|'! !!PRParameterParser class methodsFor: 'parses' stamp: 'DamienCassou 4/3/2015 14:29'!defaultMarkupParameterValue	^ '='! !!PRParameterParser class methodsFor: 'parses' stamp: 'DamienCassou 4/3/2015 14:32'!parse: aString	^ self		parse: aString		markupParameter: self defaultMarkupParameter		markupParameterValue: self defaultMarkupParameterValue! !!PRParameterParser class methodsFor: 'parses' stamp: 'CyrilFerlicot 4/13/2015 22:54'!parse: aString1 markupParameter: aString2 markupParameterValue: aString3	| index string result parameter |	index := 1.	string := aString1.	result := Dictionary new.	[ string isEmpty ] whileFalse: [		index := PRMatcherManager findFirst: aString2 at: 1 in: string.		index := index < 1 			ifTrue: [ string size ]			ifFalse: [ index - aString2 size ].		parameter := string first: index.		string := string allButFirst: (string size min: index + aString2 size).		parameter isEmpty ifFalse: [ 			index := PRMatcherManager findFirst: aString3 at: 1 in: parameter.			(index isZero 				ifTrue: [ result at: (PRTextParser unescape: parameter) put: nil ]				ifFalse: [ result at:					(PRTextParser unescape: (parameter copyFrom: 1 to: index - 1))						put: (PRTextParser unescape: (parameter copyFrom: index + aString3 size to: parameter size)) ]) ] ].	^ result! !!PRTextParser commentStamp: 'TorstenBergmann 3/5/2015 22:08' prior: 34524204!A text parserInstance Variables	alreadySeenString:		<Object>	currentMarkup:		<Object>	currentStart:		<Object>	currentStop:		<Object>	documentParser:		<Object>	itemParser:		<Object>	stream:		<Object>alreadySeenString	- xxxxxcurrentMarkup	- xxxxxcurrentStart	- xxxxxcurrentStop	- xxxxxdocumentParser	- xxxxxitemParser	- xxxxxstream	- xxxxx!!PRTextParser class methodsFor: 'escaping' stamp: 'DamienCassou 2/10/2014 16:25'!escape: aString	^ self escape: aString all: PRMatcherManager default textMatcher reverse! !!PRTextParser class methodsFor: 'escaping' stamp: 'DamienCassou 2/10/2014 16:25'!escape: aString all: anArray	^ anArray		inject: (self escape: aString using: '\')		into: [ :result :each | self escape: result using: each ]! !!PRTextParser class methodsFor: 'escaping' stamp: 'DamienCassou 2/10/2014 16:25'!escape: aString using: aSearchString	| string index escapedMarkup |	string := aString.	escapedMarkup := self escapeMarkup: aSearchString.	index := string findString: aSearchString.	[ index > 0 ] whileTrue: [		string := (string first: index - 1) , escapedMarkup , (string allButFirst: index - 1 + aSearchString size).		index := string findString: aSearchString startingAt: index + escapedMarkup size].	^ string! !!PRTextParser class methodsFor: 'escaping' stamp: 'DamienCassou 2/10/2014 16:25'!escapeMarkup: markup	^ String streamContents: [ :stream | markup do: [ :each | stream nextPut: $\; nextPut: each ] ]! !!PRTextParser class methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 16:30'!parseString: aString	| string |	string := self unescape: aString.	string isEmpty ifTrue: [ ^ #() ].	^ Array with: (PRText content: string)! !!PRTextParser class methodsFor: 'escaping' stamp: 'DamienCassou 2/10/2014 16:25'!unescape: aString	| input output |	input := aString readStream.	output := WriteStream on: (String new: aString size).	[ input atEnd ] whileFalse: [		output nextPutAll: (input upTo: $\).		input atEnd			ifFalse: [ output nextPut: input next ] ].	^ output contents! !!PRTextParser methodsFor: 'parsing' stamp: 'CyrilFerlicot 4/8/2015 13:10'!continueParsingWith: aString	|  workingString |	workingString := alreadySeenString , Smalltalk os pillarLineEnding , aString.	currentStop := PRMatcherManager		findFirst: (itemParser markupEnd: currentMarkup)		at: currentStart + currentMarkup size		in: workingString.	^ currentStart < currentStop		ifFalse: [ self handleNoEndMarkupFoundIn: workingString ]		ifTrue: [ self extractDataFrom: workingString ]! !!PRTextParser methodsFor: 'accessing' stamp: 'DamienCassou 2/10/2014 11:41'!documentParser: aDocumentParser 	documentParser := aDocumentParser! !!PRTextParser methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 16:30'!extractDataFrom: workingString	| previousStop result |	result := WriteStream on: Array new.	result nextPutAll: (self class parseString: (workingString first: currentStart - 1)).	result		nextPut:			(itemParser parse: (workingString copyFrom: currentStart to: currentStop + currentMarkup size - 1) with: documentParser).	previousStop := currentStop + currentMarkup size - 1.	result nextPutAll: (documentParser parseTopText: (workingString allButFirst: previousStop)).	^ result contents! !!PRTextParser methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 16:32'!handleNoEndMarkupFoundIn: aString	"No end markup has been found in aString yet. If there is more to parse in following lines of the stream, try to find the end markup there. Otherwise, the markup we found previously is never ended and we should consider it to be plain text."	^ stream atEnd		ifTrue: [ self class parseString: aString ]		ifFalse: [ 			alreadySeenString := aString.			self continueParsingWith: stream nextLine ]! !!PRTextParser methodsFor: 'private' stamp: 'DamienCassou 2/10/2014 14:55'!initialize	currentMarkup := nil.	currentStart := 0.	alreadySeenString := String new! !!PRTextParser methodsFor: 'parsing' stamp: 'DamienCassou 2/10/2014 16:30'!parse: aString	| workingString |	workingString := aString.	currentMarkup := PRMatcherManager default markupForFirstItemParserIn: workingString.	currentMarkup isNil		ifTrue: [ ^ PRTextParser parseString: aString ].	itemParser := PRMatcherManager default itemParserForTextMarkup: currentMarkup.	currentStart := PRMatcherManager findFirstMarkup: currentMarkup in: workingString.	currentStop := PRMatcherManager 		findFirst: (itemParser markupEnd: currentMarkup)		at: currentStart + currentMarkup size		in: workingString.	^ currentStart < currentStop		ifFalse: [ self handleNoEndMarkupFoundIn: workingString ]		ifTrue: [ self extractDataFrom: workingString ]! !!PRTextParser methodsFor: 'as yet unclassified' stamp: 'DamienCassou 2/10/2014 16:31'!setStream: aStream	stream := aStream! !!Object methodsFor: '*Pillar-Model-Core-Core' stamp: 'DamienCassou 2/5/2014 12:42'!accept: aVisitor	<ignoreForCoverage>	self error: self printString , ' is missing #accept:'! !!Object methodsFor: '*Pillar-Model-Core-Core' stamp: 'DamienCassou 10/8/2013 09:25'!acceptDecorated: aVisitor	self accept: aVisitor! !!PRScriptEvaluationEnvironment commentStamp: 'TorstenBergmann 3/5/2015 22:02' prior: 34524662!A script evaluator!!PRScriptEvaluationEnvironment methodsFor: 'initialize-release' stamp: 'DamienCassou 4/4/2015 22:16'!setStream: aStream	stream := aStream! !!UndefinedObject methodsFor: '*Pillar-Model-Core' stamp: 'DamienCassou 2/5/2014 13:04'!accept: aVisitor	<ignoreForCoverage>	"do nothing"! !!Collection methodsFor: '*Pillar-Model-Core' stamp: 'DamienCassou 3/20/2014 18:12'!acceptDecorated: aVisitor	<ignoreForCoverage "This method is ignored for test coverage because it exists only as a hook for other frameworks (i.e., Magritte).">	self accept: aVisitor! !!Trait method!markupParameter	^ PRParameterParser defaultMarkupParameter! !!Trait method!markupParameter	^ PRParameterParser defaultMarkupParameter! !!Trait method!markupParameter	^ PRParameterParser defaultMarkupParameter! !!Trait method!markupParameterValue	^ PRParameterParser defaultMarkupParameterValue! !!Trait method!markupParameterValue	^ PRParameterParser defaultMarkupParameterValue! !!Trait method!markupParameterValue	^ PRParameterParser defaultMarkupParameterValue! !!Trait method!hasParameter: aKey	self		parameters at: aKey		ifAbsent: [ ^ false ].	^ true! !!Trait method!hasParameter: aKey	self		parameters at: aKey		ifAbsent: [ ^ false ].	^ true! !!Trait method!hasParameter: aKey	self		parameters at: aKey		ifAbsent: [ ^ false ].	^ true! !!Trait method!hasParameters	^ self parameters isEmpty not! !!Trait method!hasParameters	^ self parameters isEmpty not! !!Trait method!hasParameters	^ self parameters isEmpty not! !!Trait method!parameterAt: aKey put: aValue	^ self parameters at: aKey put: aValue! !!Trait method!parameterAt: aKey put: aValue	^ self parameters at: aKey put: aValue! !!Trait method!parameterAt: aKey put: aValue	^ self parameters at: aKey put: aValue! !!Trait method!parameters	^ self explicitRequirement! !!Trait method!parameters	^ self explicitRequirement! !!Trait method!parameters	^ self explicitRequirement! !"Pillar-Model"!!PRDocumentWriter commentStamp: '<historical>' prior: 0!I'm the superclass of all classes supposed to output a pier document to a text file. I have a canvas to which the subclasses can write to using dedicated brushes. I have a configuration which specifies some details about how to write text (e.g., end of line convention).!!PRManualNumberingWriter commentStamp: '<historical>' prior: 0!I'm an abstract writer that provides some functionality to compute headers/figures/scripts/... numbers. See PRNumeratingVisitor, PRNumerator and PRCascadingCounter.!!PRNumeratingVisitor commentStamp: '<historical>' prior: 0!I'm a simple visitor that updates a numerator (PRNumerator) based on what I visit. When I'm done, a writer can use the numerator to output the headers/figures/scripts/... numbers.!!PRCocoonConfigurationInterpreter commentStamp: 'StephaneDucasse 3/31/2015 10:25' prior: 0!I interpreter Pillar specific properties.!!PRExportBrush commentStamp: '<historical>' prior: 0!I'm the superclass of all brushes. A brush is something you can add on a canvas. For exemple, LaTeX command and environment brushes can be added to a LaTeX canvas; HTML tags can be added to an HTML canvas.!!PRExportCanvas commentStamp: '<historical>' prior: 0!I am the place where the visitors will write stuff. I output everything to a stream. Eventhough I have some streaming capabilities (#nextPutAll:, #raw:, ...), my clients should use brushes as much as possible instead. This is because the brushes will take the responsibility to write correct text for the clients.!!PROutputStream commentStamp: '<historical>' prior: 0!I represent a very simple interface for writing text to a stream.I'm associated with a configuration which knows some details about the output stream (e.g., the line ending convention)!!PRTemplate commentStamp: '<historical>' prior: 0!I am a simple object used to retrieve the template contents late-bound.!!PRConfigurationError commentStamp: '<historical>' prior: 0!I am the error raised when the configuration provided during the export is invalid.!!PRExportError commentStamp: 'DamienCassou 4/2/2015 14:34' prior: 0!I'm an exception class representing errors that happens while exporting a pillar document.!!PRNoInputFileError commentStamp: '<historical>' prior: 0!I am an error raised when no input file is specified while exporting a pier document!!PRTemplateError commentStamp: '<historical>' prior: 0!I am an error raised when a problem occur while fetching the template contents!!PRWarning commentStamp: 'TorstenBergmann 3/5/2015 22:12' prior: 0!A Pillar warning!!PRReferenceNotFound commentStamp: '<historical>' prior: 0!I am a warning raised when a reference is not found during the resolution phase!!PRCocoonConfiguration commentStamp: 'StephaneDucasse 3/31/2015 10:24' prior: 0!I manage pillar specific configuration.!!PRCascadingCounter commentStamp: '<historical>' prior: 0!I can keep track of the count of nested structures so each structure as its own number. For exemple, 2 sections in Chapter 1 would have a counter of #(1 1) and #(1 2). The first number indicates the top-most structure (here a chapter), while the following numbers represent the nested structures. I can count up to a max level.!!PRNotFoundCounter commentStamp: 'BenjaminVanRyseghem 1/9/2014 12:16' prior: 0!I am a subclass used when a reference is not found.In this case no number can be returned so a Warning is raised, and a ? is displayed!!PRNumerator commentStamp: 'DamienCassou 1/7/2014 15:49' prior: 0!I'm responsible for numbering element types (e.g., sections, figures and scipts) when the output type does not do it automatically (e.g., LaTeX assigns numbers to \section whereas HTML does not assign numbers to <h1>).I have a running counter for each element type (e.g., headerCounter and figureCounter) that must be incremented by using the #new* methods (e.g., #newHeader: and #newFigure:). For each element type, I also maintain a dictionary mapping all elements of a document to its counter at the time the element was visited.For example, for a document with 2 level-1 headers, the headerCounter will be incremented twice and the headersMapping will associate the counter "1" to the first header and the counter "2" to the second header.!!UnixPlatform methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 12/17/2013 17:57'!pillarLineEnding	^ String lf! !!WriteStream methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 6/4/2014 17:14'!pillarWriteDuring: aBlock	aBlock value: self! !!PRDocumentWriter commentStamp: '<historical>' prior: 34623221!I'm the superclass of all classes supposed to output a pier document to a text file. I have a canvas to which the subclasses can write to using dedicated brushes. I have a configuration which specifies some details about how to write text (e.g., end of line convention).!!PRDocumentWriter class methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 12/12/2013 13:42'!allDefaultConfigurations	| result |		result := Dictionary new.	self allSubclassesDo: [ :e | 		e isAbstract			ifFalse: [ result addAll: e defaultConfigurations  ] ].			^ result! !!PRDocumentWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 17:20'!defaultConfigurationName	^ self writerName! !!PRDocumentWriter class methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 09:59'!defaultConfigurations	^ Dictionary new		at: self defaultConfigurationName			put:				(PRCocoonConfiguration new						outputType: self;						templateStream: self defaultTemplate;						configurations: Dictionary new; "we specify an empty collection of sub configurations to avoid infinite recursion : a default configuration would otherwise contain a collection of default configurations, each containing a collection of default configurations..."						yourself);		yourself! !!PRDocumentWriter class methodsFor: 'accessing' stamp: 'DamienCassou 1/14/2014 15:14'!defaultTemplate		^ '{{{content}}}'! !!PRDocumentWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/9/2013 11:03'!fileExtension	^ self subclassResponsibility! !!PRDocumentWriter class methodsFor: 'testing' stamp: 'DamienCassou 3/6/2014 10:57'!isAbstract	^ true! !!PRDocumentWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 17:20'!markupType	^ self writerName! !!PRDocumentWriter class methodsFor: 'instance creation' stamp: 'DamienCassou 10/4/2013 10:39'!on: aWriteStream 	^ self new		setStream: aWriteStream;		yourself! !!PRDocumentWriter class methodsFor: 'instance creation' stamp: 'DamienCassou 2/20/2014 10:48'!write: aDocumentItem	^ self new write: aDocumentItem! !!PRDocumentWriter class methodsFor: 'instance creation' stamp: 'DamienCassou 2/27/2014 12:41'!write: aDocument to: aStream 	^ self new write: aDocument to: aStream! !!PRDocumentWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 17:20'!writerName	^ self subclassResponsibility! !!PRDocumentWriter methodsFor: 'accessing' stamp: 'DamienCassou 10/14/2013 16:32'!canvasClass	^ self subclassResponsibility! !!PRDocumentWriter methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 18:20'!configuration	^ configuration ifNil: [ configuration :=PRCocoonConfiguration new ]! !!PRDocumentWriter methodsFor: 'accessing' stamp: 'DamienCassou 12/3/2013 17:01'!configuration: aConfiguration 	configuration := aConfiguration.	stream ifNotNil: [ stream configuration: aConfiguration ]! !!PRDocumentWriter methodsFor: 'streaming' stamp: 'DamienCassou 2/20/2014 10:53'!contents	^ stream contents! !!PRDocumentWriter methodsFor: 'private' stamp: 'DamienCassou 2/20/2014 10:53'!defaultStream	^ WriteStream on: String new! !!PRDocumentWriter methodsFor: 'accessing' stamp: 'DamienCassou 12/9/2013 11:07'!fileExtension	^ self class fileExtension! !!PRDocumentWriter methodsFor: 'initialize-release' stamp: 'CyrilFerlicot 3/31/2015 11:25'!initialize	super initialize.	writingRaw := false! !!PRDocumentWriter methodsFor: 'helpers' stamp: 'DamienCassou 1/10/2014 16:00'!languageForScript: aScript	^ aScript language isSpecified		ifTrue: [ aScript language ]		ifFalse: [ self configuration defaultScriptLanguage ]! !!PRDocumentWriter methodsFor: 'accessing' stamp: 'DamienCassou 11/20/2013 17:43'!markupType	^ self class markupType! !!PRDocumentWriter methodsFor: 'helpers' stamp: 'DamienCassou 1/13/2014 15:00'!noNewLineDuring: aBlock	| oldNewLine |	oldNewLine := self configuration newLine.	self configuration newLine: ''.	aBlock ensure: [ self configuration newLine: oldNewLine ]! !!PRDocumentWriter methodsFor: 'initialize-release' stamp: 'DamienCassou 12/3/2013 17:01'!setStream: aStream	stream := PROutputStream on: aStream.	configuration ifNotNil: [ stream configuration: configuration ]! !!PRDocumentWriter methodsFor: 'visiting' stamp: 'DamienCassou 10/14/2013 16:31'!start: anObject	canvas := self canvasClass on: stream.	super start: anObject.	canvas flush! !!PRDocumentWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 3/20/2014 17:47'!visitEmptyParagraph: anObject	stream newLine! !!PRDocumentWriter methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/10/2015 13:03'!visitInputFileAnnotation: anAnnotation	self visitAnnotation: anAnnotation! !!PRDocumentWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 3/20/2014 18:31'!visitLineBreak: aLineBreak	canvas newLine! !!PRDocumentWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 12/11/2013 17:21'!visitRaw: aRaw	(aRaw isForType: self writerName)		ifTrue: [ self writeRawDuring: [ super visitRaw: aRaw ] ]! !!PRDocumentWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 12/9/2013 11:19'!visitText: aText	writingRaw		ifTrue: [ canvas rawLines: aText text ]		ifFalse: [ canvas nextPutAllLines: aText text ]! !!PRDocumentWriter methodsFor: 'visiting' stamp: 'DamienCassou 2/20/2014 10:49'!write: aDocumentItem	^ self write: aDocumentItem to: self defaultStream! !!PRDocumentWriter methodsFor: 'visiting' stamp: 'DamienCassou 2/20/2014 10:49'!write: aDocumentItem to: aStream	^ self setStream: aStream; start: aDocumentItem; contents! !!PRDocumentWriter methodsFor: 'helpers' stamp: 'DamienCassou 11/20/2013 17:29'!writeRawDuring: aBlock	[ 	writingRaw := true.	aBlock value ]		ensure: [ writingRaw := false ]! !!PRDocumentWriter methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 17:21'!writerName	^ self class writerName! !!PRManualNumberingWriter commentStamp: '<historical>' prior: 34623557!I'm an abstract writer that provides some functionality to compute headers/figures/scripts/... numbers. See PRNumeratingVisitor, PRNumerator and PRCascadingCounter.!!PRManualNumberingWriter methodsFor: 'visiting' stamp: 'DamienCassou 1/14/2014 11:18'!fillNumeratorFor: aDocument	PRNumeratingVisitor new		setNumerator: numerator configuration: self configuration;		start: aDocument! !!PRManualNumberingWriter methodsFor: 'helpers' stamp: 'BenjaminVanRyseghem 1/6/2014 22:33'!headerOffset	^ 0! !!PRManualNumberingWriter methodsFor: 'visiting' stamp: 'DamienCassou 11/26/2013 15:58'!newNumerator	^ PRNumerator new! !!PRManualNumberingWriter methodsFor: 'visiting' stamp: 'DamienCassou 11/26/2013 15:58'!start: anObject	numerator := self newNumerator.	self fillNumeratorFor: anObject.	super start: anObject! !!PRManualNumberingWriter methodsFor: 'helpers' stamp: 'DamienCassou 1/7/2014 15:47'!writeCounter: aCounter	"Write on the canvas the string representation of ==aCounter=="	^ self writeCounter: aCounter startingAt: 1! !!PRManualNumberingWriter methodsFor: 'helpers' stamp: 'DamienCassou 1/7/2014 15:47'!writeCounter: aCounter startingAt: aNumber	"Write on the canvas the string representation of ==aCounter== ignoring ==aNumber== - 1 elements at the begining. For example, if you don't want to see level 1 numbers, you can pass 2 as value for ==aNumber==."	^ (aCounter elements allButFirst: aNumber - 1)		do: [ :each | self writeCounterElement: each ]		separatedBy: [ self writeCounterElementSeparator ]! !!PRManualNumberingWriter methodsFor: 'helpers' stamp: 'DamienCassou 11/21/2013 11:32'!writeCounterDefinitionSeparator	canvas nextPutAll: '. '! !!PRManualNumberingWriter methodsFor: 'helpers' stamp: 'BenjaminVanRyseghem 1/9/2014 12:25'!writeCounterElement: aCounterElement	canvas nextPutAll: aCounterElement asString! !!PRManualNumberingWriter methodsFor: 'helpers' stamp: 'DamienCassou 11/21/2013 07:54'!writeCounterElementSeparator	canvas nextPut: $.! !!PRManualNumberingWriter methodsFor: 'writing' stamp: 'DamienCassou 1/14/2014 11:23'!writeCounterForAnchor: anAnchor	self writeCounter: (numerator anchorCounter: anAnchor).! !!PRManualNumberingWriter methodsFor: 'writing' stamp: 'DamienCassou 1/7/2014 17:50'!writeCounterForFigure: anExternalLink	self writeCounter: (numerator figuresCounter: anExternalLink).	self writeCounterDefinitionSeparator! !!PRManualNumberingWriter methodsFor: 'writing' stamp: 'DamienCassou 1/14/2014 11:30'!writeCounterForHeader: aHeader	(self configuration wantNumberingForHeader: aHeader) ifTrue: [	self writeCounter: (numerator headerCounter: aHeader).	self writeCounterDefinitionSeparator]! !!PRManualNumberingWriter methodsFor: 'writing' stamp: 'DamienCassou 1/8/2014 21:04'!writeCounterForScript: aScript	self writeCounter: (numerator scriptsCounter: aScript).	self writeCounterDefinitionSeparator! !!PRNumeratingVisitor commentStamp: '<historical>' prior: 34623783!I'm a simple visitor that updates a numerator (PRNumerator) based on what I visit. When I'm done, a writer can use the numerator to output the headers/figures/scripts/... numbers.!!PRNumeratingVisitor class methodsFor: 'testing' stamp: 'DamienCassou 2/5/2014 14:15'!isAbstract	^ false! !!PRNumeratingVisitor methodsFor: 'initialize-release' stamp: 'DamienCassou 1/14/2014 11:18'!setNumerator: aNumerator configuration: aConfiguration	numerator := aNumerator.	configuration := aConfiguration! !!PRNumeratingVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 3/5/2013 17:18'!visitAnchor: anAnchor	numerator newAnchor: anAnchor name! !!PRNumeratingVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 1/7/2014 17:48'!visitExternalLink: anExternalLink	anExternalLink isPicture		ifTrue: [ anExternalLink label ifNotNil: [ numerator newFigure: anExternalLink ] ]! !!PRNumeratingVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 1/14/2014 11:39'!visitHeader: aHeader	(configuration wantNumberingForHeader: aHeader)		ifTrue: [ numerator newHeader: aHeader atLevel: (aHeader level - configuration startNumberingAtHeadingLevel + 1)]! !!PRNumeratingVisitor methodsFor: 'visiting-document' stamp: 'DamienCassou 1/14/2014 14:10'!visitScript: aScript	aScript isEvaluated ifTrue: [ ^ self visitAll: aScript children ].	aScript hasLabel		ifTrue: [ numerator newScript: aScript ]! !!MacOSXPlatform methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 12/17/2013 18:06'!pillarLineEnding	^ String lf! !!PRCocoonConfigurationInterpreter commentStamp: 'StephaneDucasse 3/31/2015 10:25' prior: 34624056!I interpreter Pillar specific properties.!!PRCocoonConfigurationInterpreter methodsFor: 'private-interpreting' stamp: 'StephaneDucasse 3/31/2015 10:21'!defaultScriptLanguage: aString	^ PRAbstractScriptLanguage for: aString	! !!PRCocoonConfigurationInterpreter methodsFor: 'initialize' stamp: 'CyrilFerlicot 4/16/2015 11:16'!initializeInterpretationBlocks	super initializeInterpretationBlocks.	interpretationBlocks		at: 'defaultScriptLanguage' put: [ :value | self defaultScriptLanguage: value ];		at: 'inputFiles' put: [ :value | self inputFiles: value ];		at: 'newLine' put: [ :value | self newLine: value ];		at: 'outputFile' put: [ :value | self outputFile: value ];		at: 'outputType' put: [ :value | self outputType: value ];		at: 'template' put: [ :value | self template: value ];		yourself! !!PRCocoonConfigurationInterpreter methodsFor: 'private-interpreting' stamp: 'StephaneDucasse 3/31/2015 10:21'!inputFiles: aCollection	^ aCollection collect: [ :file | self resolvePath: file ]! !!PRCocoonConfigurationInterpreter methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 11:13'!newConfiguration	^ PRCocoonConfiguration new! !!PRCocoonConfigurationInterpreter methodsFor: 'private-interpreting' stamp: 'StephaneDucasse 3/31/2015 10:21'!newLine: aString	^ aString isSymbol		ifTrue: [ self newLineSymbolConversion at: aString ]		ifFalse: [ aString ]! !!PRCocoonConfigurationInterpreter methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:22'!newLineSymbolConversion	self flag: #todo. "Use {MacOS/Unix/Win32}Platform>>lineEnding as soon as Pharo 3.0 is the lowest supported Pharo."	^ Dictionary		newFrom:			{(#cr -> String cr).			(#lf -> String lf).			(#crlf -> String crlf).			(#unix -> String lf).			(#mac -> String lf).			(#dos -> String crlf)}! !!PRCocoonConfigurationInterpreter methodsFor: 'private-interpreting' stamp: 'StephaneDucasse 3/31/2015 10:21'!outputFile: aString	| file |		aString isEmptyOrNil ifTrue: [ configuration error: 'Please specify an output file' ].		file := self resolvePath: aString.		file isDirectory ifTrue: [ configuration error: 'Invalid output file ' , file pathString ].		^ file! !!PRCocoonConfigurationInterpreter methodsFor: 'private-interpreting' stamp: 'StephaneDucasse 3/31/2015 10:21'!outputType: aString	^ PRDocumentWriter allSubclasses detect: [ :klass | klass isAbstract not and: [ klass writerName asString = aString ] ]! !!PRCocoonConfigurationInterpreter methodsFor: 'private-interpreting' stamp: 'CyrilFerlicot 4/16/2015 11:16'!template: template	| file |	file := self configuration baseDirectory / template.	^ file exists		ifTrue: [ PRTemplate for: file readStream ]		ifFalse: [ PRTemplateError signal: 'Template error: ' , file pathString , ' not found.' ]! !!PRRealScriptLanguage methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 1/10/2014 17:53'!isSyntaxHighlightingPossible	^ true! !!PRExportBrush commentStamp: '<historical>' prior: 34624153!I'm the superclass of all brushes. A brush is something you can add on a canvas. For exemple, LaTeX command and environment brushes can be added to a LaTeX canvas; HTML tags can be added to an HTML canvas.!!PRExportBrush methodsFor: 'initialize-release' stamp: 'DamienCassou 10/14/2013 16:29'!setStream: aStream	stream := aStream! !!PRExportCanvas commentStamp: '<historical>' prior: 34624415!I am the place where the visitors will write stuff. I output everything to a stream. Eventhough I have some streaming capabilities (#nextPutAll:, #raw:, ...), my clients should use brushes as much as possible instead. This is because the brushes will take the responsibility to write correct text for the clients.!!PRExportCanvas class methodsFor: 'instance creation' stamp: 'DamienCassou 10/14/2013 16:20'!on: aStream 	^ self new		setStream: aStream;		yourself! !!PRExportCanvas methodsFor: 'private' stamp: 'DamienCassou 10/14/2013 16:19'!brush: aBrush	self flush.	currentBrush := aBrush.	aBrush setStream: stream.	^ aBrush! !!PRExportCanvas methodsFor: 'accessing' stamp: 'DamienCassou 10/14/2013 16:19'!flush	stream flush! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 11/18/2013 18:13'!line: aString	self		nextPutAll: aString;		newLine! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 11/18/2013 18:13'!lines: aString	"Output aString and take care of line ending within aString."	| str |	str := aString readStream.	[str atEnd] whileFalse: [ | line |		line := str nextLine.		str atEnd			ifTrue: [ self nextPutAll: line ]			ifFalse: [ self line: line ]	 ]! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 10/14/2013 16:19'!newLine	stream newLine! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 11/18/2013 17:22'!nextPut: aCharacter	stream << aCharacter! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 11/18/2013 17:22'!nextPutAll: aString	aString do: [ :char | self nextPut: char ]! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 12/3/2013 17:02'!nextPutAllLines: aString	self withLinesIn: aString do: [ :line | self nextPutAll: line ] separatedBy: [ self newLine ]! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 10/14/2013 16:35'!raw: aString	stream << aString! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 12/3/2013 16:54'!rawLines: aString	"Output aString and take care of line ending within aString."	self withLinesIn: aString do: [ :line | self raw: line ] separatedBy: [ self newLine ]! !!PRExportCanvas methodsFor: 'initialize - release' stamp: 'DamienCassou 10/14/2013 16:19'!setStream: aStream 	stream := aStream! !!PRExportCanvas methodsFor: 'writing text' stamp: 'DamienCassou 10/14/2013 16:19'!space	stream space! !!PRExportCanvas methodsFor: 'private' stamp: 'DamienCassou 12/3/2013 16:56'!withLinesIn: aString do: aBlock separatedBy: anotherBlock	| str |	str := aString readStream.	[ str atEnd ]		whileFalse: [ 			| line |			line := str nextLine.			aBlock value: line.			str atEnd				ifFalse: anotherBlock ]! !!PROutputStream commentStamp: '<historical>' prior: 34624785!I represent a very simple interface for writing text to a stream.I'm associated with a configuration which knows some details about the output stream (e.g., the line ending convention)!!PROutputStream class methodsFor: 'instance creation' stamp: 'DamienCassou 10/4/2013 10:39'!on: aWriteStream 	^ self new		setStream: aWriteStream;		yourself! !!PROutputStream methodsFor: 'streaming' stamp: 'DamienCassou 10/8/2013 12:51'!<< anObject	anObject isBlock		ifTrue: anObject		ifFalse: [ stream << anObject ]! !!PROutputStream methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/1/2015 18:20'!configuration	^ configuration ifNil: [ configuration := PRCocoonConfiguration new ]! !!PROutputStream methodsFor: 'accessing' stamp: 'DamienCassou 12/3/2013 17:02'!configuration: aConfiguration	^ configuration := aConfiguration! !!PROutputStream methodsFor: 'streaming' stamp: 'DamienCassou 2/20/2014 10:54'!contents	^ stream contents! !!PROutputStream methodsFor: 'accessing' stamp: 'DamienCassou 10/7/2013 10:50'!flush	stream flush! !!PROutputStream methodsFor: 'testing' stamp: 'BenjaminVanRyseghem 11/15/2013 02:23'!isEmpty		^ stream isEmpty! !!PROutputStream methodsFor: 'streaming' stamp: 'DamienCassou 10/9/2013 14:26'!newLine	self << self configuration newLine! !!PROutputStream methodsFor: 'initialize-release' stamp: 'DamienCassou 10/4/2013 09:58'!setStream: aWriteStream	stream := aWriteStream! !!PROutputStream methodsFor: 'streaming' stamp: 'DamienCassou 10/8/2013 13:44'!space	stream space! !!PROutputStream methodsFor: 'private' stamp: 'BenjaminVanRyseghem 11/19/2013 09:45'!stream	^ stream! !!PROutputStream methodsFor: 'streaming' stamp: 'DamienCassou 2/27/2014 11:31'!trimLastNewLine	| newLine |	newLine := self configuration newLine.	(newLine isEmpty or: [ stream position < newLine size ])		ifTrue: [ ^ self ].	stream position: stream position - newLine size.! !!PRTemplate commentStamp: '<historical>' prior: 34625024!I am a simple object used to retrieve the template contents late-bound.!!PRTemplate class methodsFor: 'defaults' stamp: 'DamienCassou 12/19/2013 11:56'!defaultTemplateString	^ '{{{content}}}'! !!PRTemplate class methodsFor: 'instance creation' stamp: 'CyrilFerlicot 4/16/2015 11:13'!for: aString	^ self new		template: aString;		yourself! !!PRTemplate methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/16/2015 17:03'!= aTemplate	^ self species = aTemplate species and: [ aTemplate templateContent = self templateContent ]! !!PRTemplate methodsFor: 'protocol' stamp: 'CyrilFerlicot 4/16/2015 11:17'!expandWithBindings: aDictionary	^ self templateContent asMustacheTemplate value: aDictionary! !!PRTemplate methodsFor: 'comparing' stamp: 'CyrilFerlicot 4/16/2015 14:21'!hash	^ template hash! !!PRTemplate methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 10:07'!template: aStream	template := aStream! !!PRTemplate methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 10:08'!templateContent	^ template ifNil: [ self class defaultTemplateString ] ifNotNil: [ template contents ]! !!AbstractFileReference methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 6/4/2014 17:13'!pillarWriteDuring: aBlock	self		ensureDelete;		writeStreamDo: aBlock! !!Win32Platform methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 12/17/2013 17:58'!pillarLineEnding	^ String crlf! !!PRConfigurationError commentStamp: '<historical>' prior: 34625158!I am the error raised when the configuration provided during the export is invalid.!!PRExportError commentStamp: 'DamienCassou 4/2/2015 14:34' prior: 34625312!I'm an exception class representing errors that happens while exporting a pillar document.!!PRExportError methodsFor: 'accessing' stamp: 'DamienCassou 4/2/2015 17:12'!inputFile: aFile	file := aFile! !!PRExportError methodsFor: 'as yet unclassified' stamp: 'DamienCassou 4/2/2015 17:19'!messageText	^ String		streamContents: [ :stream | 			stream << super messageText.			file ifNotNil: [ stream << ' (' << file basename << ')' ] ]! !!PRNoInputFileError commentStamp: '<historical>' prior: 34625463!I am an error raised when no input file is specified while exporting a pier document!!PRTemplateError commentStamp: '<historical>' prior: 34625605!I am an error raised when a problem occur while fetching the template contents!!PRWarning commentStamp: 'TorstenBergmann 3/5/2015 22:12' prior: 34625753!A Pillar warning!!PRReferenceNotFound commentStamp: '<historical>' prior: 34625831!I am a warning raised when a reference is not found during the resolution phase!!PRReferenceNotFound methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 1/9/2014 17:11'!inputFile: aFile	inputFile := aFile! !!PRReferenceNotFound methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 1/9/2014 17:11'!messageText	^inputFile ifNil: [ super messageText ] ifNotNil: [ inputFile pathString, ' ', super messageText ]! !!OSPlatform class methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 12/17/2013 18:07'!pillarLineEnding	^ self current pillarLineEnding! !!OSPlatform methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 12/17/2013 17:58'!pillarLineEnding	^ self subclassResponsibility! !!PRAbstractScriptLanguage methodsFor: '*pillar-exportercore' stamp: 'DamienCassou 1/10/2014 17:46'!isSyntaxHighlightingPossible	^ false! !!PRCocoonConfiguration commentStamp: 'StephaneDucasse 3/31/2015 10:24' prior: 34625993!I manage pillar specific configuration.!!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:23'!defaultConfigurations	<cocoonDefaultParameter: 'A dictionary of default configurations from the exporters.'>	^ PRDocumentWriter allDefaultConfigurations		valuesDo: [ :configuration | configuration parent: self ];		yourself! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:23'!defaultDefaultScriptLanguage	<cocoonDefaultParameter: 'None'>	^ PRUnspecifiedScriptLanguage default! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:23'!defaultHeadingLevelOffset	<cocoonDefaultParameter: ''>	^ 0! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:23'!defaultInputFiles	<cocoonDefaultParameter: 'None'>	^ Array new! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:23'!defaultInternalLinksAreAllAnchors	<cocoonDefaultParameter: ''>	^ true! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:24'!defaultNewLine	<cocoonDefaultParameter: 'Depend on the operating system.'>	self flag: #todo.	"Use #lineEnding as soon as pharo 3.0 is the minimum required Pharo."	^ Smalltalk os pillarLineEnding! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:24'!defaultOutputFile	<cocoonDefaultParameter: 'Standard output.'>	^ FileStream stdout! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:24'!defaultOutputType	<cocoonDefaultParameter: 'None'>	^ nil! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:24'!defaultScrambledEmailAddresses	<cocoonDefaultParameter: ''>	^ true! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:16'!defaultScriptLanguage	<cocoonParameter:		'Indicate the (programming) language in scripts when none is specified.This language is used for syntax highlighting.'>	^ self propertyAt: 'defaultScriptLanguage' default: [ self defaultDefaultScriptLanguage ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:01'!defaultScriptLanguage: aLanguage	self propertyAt: 'defaultScriptLanguage' put: aLanguage! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:24'!defaultSeparateOutputFiles	<cocoonDefaultParameter: ''>	^ false! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:24'!defaultStartNumberingAtHeadingLevel	<cocoonDefaultParameter: ''>	^ 2! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:24'!defaultStopNumberingAtHeadingLevel	<cocoonDefaultParameter: 'Infinity (never stop numbering).'>	^ Float infinity! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:26'!defaultTemplate	<cocoonDefaultParameter: '"==''\{\{\{content}}}''== (output the document as is, without any preamble or postamble)."'>	^ PRTemplate new! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:27'!defaultTitle	<cocoonDefaultParameter: '==''No title''=='>	^ 'No title'! !!PRCocoonConfiguration methodsFor: 'accessing defaults' stamp: 'CyrilFerlicot 4/2/2015 15:27'!defaultVerbose	<cocoonDefaultParameter: ''>	^ false! !!PRCocoonConfiguration methodsFor: 'error handling' stamp: 'StephaneDucasse 3/31/2015 10:00'!errorNoInputFile	PRNoInputFileError signal: 'No input file'! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'CyrilFerlicot 4/16/2015 11:17'!expandTemplateWithBindings: dictionary	^ self template expandWithBindings: dictionary! !!PRCocoonConfiguration methodsFor: 'actions' stamp: 'StephaneDucasse 3/31/2015 10:00'!export	self separateOutputFiles		ifTrue: [ self exportSeparatedOutputFiles ]		ifFalse: [ self exportAllInOneOutputFile ]! !!PRCocoonConfiguration methodsFor: 'actions' stamp: 'StephaneDucasse 3/31/2015 10:00'!export: configurationName	self log: 'Exporting ', configurationName.	(self subConfigurationNamed: configurationName) export.	self log: 'End of exporting ', configurationName! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:04'!exportAllInOneOutputFile	| document writer |	document := self parseAllInputFiles.	writer := self instantiateWriter		configuration: self;		yourself.	self write: document using: writer! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'DamienCassou 4/5/2015 18:56'!exportSeparatedOutputFiles	| nextDocument |	"This nextDocument variable is used to link documents from one another. Because of this, templates can show a 'next' link to go to the following document in the sequence."	nextDocument := nil.	self inputFiles		reverseDo: [ :file | 			| document writer |			document := self parseFile: file.			document next ifNil: [ document next: nextDocument ].			nextDocument := document.			writer := self instantiateWriter				configuration: self;				yourself.			self outputFile: file , writer fileExtension.			[ self write: document using: writer ]				on: PRExportError				do: [ :err | 					err						inputFile: file;						signal ] ]! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:04'!extractDataFrom: aDocument using: aWriter	| title content |	content := String		streamContents: [ :stream | 			aWriter				setStream: stream;				configuration: self;				start: aDocument ].	title := self title.	^ {(#content -> content).	(#title -> title)} asDictionary		addAll: aDocument properties "the document properties must take precedence over other properties";		yourself! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:17'!headingLevelOffset	<cocoonParameter:		'Indicate how to convert from the level of a Pillar heading to the level of heading in your exported document.	For example, a ==headingLevelOffset== of 3 converts a 1st level Pillar heading to an ==<h3>== in HTML.'>	^ self propertyAt: 'headingLevelOffset' default: [ self defaultHeadingLevelOffset ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:02'!headingLevelOffset: aNumber	self propertyAt: 'headingLevelOffset' put: aNumber! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:17'!inputFiles	<cocoonParameter: 'List the Pillar files that must be exported.'>	^ self propertyAt: 'inputFiles' default: [ self defaultInputFiles ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:03'!inputFiles: aCollection	^ self propertyAt: 'inputFiles' put: aCollection! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 11:08'!inputString: aString	"I transform aString as a File and I add it to the properties"		| inputFile |	self baseDirectory: FileSystem memory root.	inputFile := self baseDirectory / 'input.conf'.	inputFile writeStreamDo: [ :stream | stream nextPutAll: aString ].	self inputFiles: (Array with: inputFile).! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:04'!instantiateWriter	^ self outputType new! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:18'!internalLinksAreAllAnchors	<cocoonParameter:		'Indicates if, by default, all internal links (i.e., with no "://" inside) should be considered anchors (i.e., links inside the current page).'>	^ self propertyAt: 'internalLinksAreAllAnchors' default: [ self defaultInternalLinksAreAllAnchors ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 09:57'!internalLinksAreAllAnchors: aBoolean	self propertyAt: 'internalLinksAreAllAnchors' put: aBoolean! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:18'!newLine	<cocoonParameter:		'The string that separates lines in the exported document.	This is often either LF or CR\+LF but any string is possible.'>	^ self propertyAt: 'newLine' default: [ self defaultNewLine ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:12'!newLine: aString	self propertyAt: 'newLine' put: aString! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:18'!outputFile	<cocoonParameter: 'Indicate in which file to export input files. This can also be a write stream.'>	^ self propertyAt: 'outputFile' default: [ self defaultOutputFile ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 09:58'!outputFile: aFile	^ self propertyAt: 'outputFile' put: aFile! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'DamienCassou 4/5/2015 18:43'!outputStream: aStream	self outputFile: aStream! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!outputStreamDuring: aBlock	^ self outputFile pillarWriteDuring: aBlock! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:19'!outputType	<cocoonParameter: 'Indicate the kind of output desired.'>	^ self propertyAt: 'outputType' default: [ self defaultOutputType ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 09:58'!outputType: outputType	^ self propertyAt: 'outputType' put: outputType! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!parseAllInputFiles	| document stdin |	stdin := FileStream stdin.	self inputFiles isEmpty		ifTrue: [ | input |			stdin atEnd ifTrue: [ ^ self errorNoInputFile ].			input := (String streamContents: [ :s |				[ stdin atEnd ] whileFalse: [ 					stdin next ifNotNil: [ :char |					s nextPut: char ] ] ]).			document := PRDocumentParser parse: input ]		ifFalse: [ 			document := self parseFile: self inputFiles first.			self inputFiles allButFirst				do: [ :file | document addAll: (self parseFile: file) children ] ].	^ document! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'DamienCassou 4/5/2015 18:53'!parseFile: aFile	^ aFile readStreamDo: [ :input | 		| input2|		"The following are here because of case #12259: 'FileSystem memory reads/writes using a binary stream by default'."			input2 := input.			(aFile fileSystem store isKindOf: MemoryStore)				ifTrue: [ input2 := input2 contents asString readStream ].				self transform: (PRDocumentParser parse: input2) ]! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!resolve: aFile from: oldDirectory to: newDirectory	aFile ifNil: [ ^ nil ].	^ newDirectory resolve: (aFile relativeToPath: oldDirectory)! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:19'!scrambledEmailAddresses	<cocoonParameter:		'Indicate if email addresses should appear scrambled to defeat the stupiest spammers looking for them (the default). If ==false==, email addresses will appear unscrambled.'>	^ self propertyAt: 'scrambledEmailAddresses' default: [ self defaultScrambledEmailAddresses ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:12'!scrambledEmailAddresses: aBoolean	^ self propertyAt: 'scrambledEmailAddresses' put: aBoolean! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:20'!separateOutputFiles	<cocoonParameter: 'Indicate whether each input file must be exported separately or not.'>	^ self propertyAt: 'separateOutputFiles' default: [ self defaultSeparateOutputFiles ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:13'!separateOutputFiles: aBoolean	^ self propertyAt: 'separateOutputFiles' put: aBoolean! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:20'!startNumberingAtHeadingLevel	<cocoonParameter:		'Indicate the level of Pillar heading that is going to be numbered with top level numbers.E.g., a ==startNumberingAtHeadingLevel== of value ==2== indicates that Pillar heading of level 1 are not numbered.'>	^ self propertyAt: 'startNumberingAtHeadingLevel' default: [ self defaultStartNumberingAtHeadingLevel ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:13'!startNumberingAtHeadingLevel: aNumber	^ self propertyAt: 'startNumberingAtHeadingLevel' put: aNumber! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:20'!stopNumberingAtHeadingLevel	<cocoonParameter:		'Indicate the level of Pillar heading at which Pillar stops numbering.E.g., a ==stopNumberingAtHeadingLevel== of value ==4== indicates that Pillar heading of level 4 and more are not numbered.'>	^ self propertyAt: 'stopNumberingAtHeadingLevel' default: [ self defaultStopNumberingAtHeadingLevel ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:13'!stopNumberingAtHeadingLevel: aNumber	^ self propertyAt: 'stopNumberingAtHeadingLevel' put: aNumber! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:21'!template	<cocoonParameter: 'Indicate the overall structure of the exported documents.'>	^ self propertyAt: 'template' default: [ self defaultTemplate ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 10:33'!template: aTemplate	self propertyAt: 'template' put: aTemplate! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 11:18'!templateContents	^ self template templateContent! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/16/2015 09:59'!templateStream: aString	self template: (PRTemplate for: aString readStream)! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:21'!title	<cocoonParameter: 'Indicate the main title of the document.'>	^ self propertyAt: 'title' default: [ self defaultTitle ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 09:59'!title: aString	^ self propertyAt: 'title' put: aString! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'CyrilFerlicot 4/10/2015 10:03'!transform: aDocument	^ PRScriptEvaluator new configuration: self; start: (PRFileInclusion new  configuration: self; start:aDocument; topNode); topNode! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!updateFileProperty: symbol from: oldDirectory to: newDirectory	self 		propertyAt: symbol 		put: (self 			resolve: (self propertyAt: symbol ifAbsent: [ ^ self ]) 			from: oldDirectory 			to: newDirectory)! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!updateInputFilesFrom: oldDirectory to: newDirectory	self inputFiles: (self inputFiles collect: [ :each | self resolve: each from: oldDirectory to: newDirectory ])! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!updateOutputFileFrom: oldDirectory to: newDirectory	self outputFile: (self resolve: self outputFile from: oldDirectory to: newDirectory)! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'CyrilFerlicot 4/2/2015 15:21'!verbose	<cocoonParameter: 'Indicate whether Pillar should write a verbose log when exporting.'>	^ self propertyAt: 'verbose' default: [ self defaultVerbose ]! !!PRCocoonConfiguration methodsFor: 'accessing' stamp: 'StephaneDucasse 3/31/2015 09:59'!verbose: aBoolean	^ self propertyAt: 'verbose' put: aBoolean! !!PRCocoonConfiguration methodsFor: 'testing' stamp: 'StephaneDucasse 3/29/2015 21:04'!wantNumberingForHeader: aHeader 	^ (aHeader level			between: self startNumberingAtHeadingLevel			and: self stopNumberingAtHeadingLevel - 1)! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!write: aDocument using: aWriter	| output dictionary |	dictionary := self extractDataFrom: aDocument using: aWriter.	output := self expandTemplateWithBindings: dictionary.	self outputStreamDuring: [ :outStream | self writeOutput: output toStream: outStream ]! !!PRCocoonConfiguration methodsFor: 'private' stamp: 'StephaneDucasse 3/31/2015 10:06'!writeOutput: output toStream: outputStream	outputStream nextPutAll: output.	outputStream flush.! !!PRCascadingCounter commentStamp: '<historical>' prior: 34626093!I can keep track of the count of nested structures so each structure as its own number. For exemple, 2 sections in Chapter 1 would have a counter of #(1 1) and #(1 2). The first number indicates the top-most structure (here a chapter), while the following numbers represent the nested structures. I can count up to a max level.!!PRCascadingCounter class methodsFor: 'instance creation' stamp: 'DamienCassou 3/5/2013 18:09'!maxLevel: anInteger	^ self new 		setMaxLevel: anInteger;		yourself! !!PRCascadingCounter methodsFor: 'accessing' stamp: 'DamienCassou 11/21/2013 10:49'!current	^ self deepCopy! !!PRCascadingCounter methodsFor: 'accessing' stamp: 'DamienCassou 11/21/2013 10:49'!currentEvent	^ super currentEvent! !!PRCascadingCounter methodsFor: 'accessing' stamp: 'DamienCassou 11/21/2013 12:54'!elements	^ counters first: self indexOfLastNonZero! !!PRCascadingCounter methodsFor: 'action' stamp: 'DamienCassou 3/5/2013 18:04'!incrementAt: level 	counters at: level put: (counters at: level) + 1.	level + 1 to: counters size		do: [ :i | counters at: i put: 0 ]! !!PRCascadingCounter methodsFor: 'accessing' stamp: 'DamienCassou 11/21/2013 13:00'!indexOfLastNonZero	counters size to: 1 by: -1 do: [ :index | 		(counters at: index) strictlyPositive			ifTrue: [ ^ index ] ].	^ 1! !!PRCascadingCounter methodsFor: 'printing' stamp: 'DamienCassou 11/21/2013 13:04'!printOn: aStream	self elements do: [ :each | aStream nextPutAll: each printString ] separatedBy: [ aStream nextPut: $. ]! !!PRCascadingCounter methodsFor: 'initialization' stamp: 'DamienCassou 3/5/2013 18:02'!setMaxLevel: anInteger	counters := Array new: anInteger withAll: 0.! !!PRNotFoundCounter commentStamp: 'BenjaminVanRyseghem 1/9/2014 12:16' prior: 34626502!I am a subclass used when a reference is not found.In this case no number can be returned so a Warning is raised, and a ? is displayed!!PRNotFoundCounter methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 1/9/2014 12:29'!elements	^ { '¿?' }! !!PRNumerator commentStamp: 'DamienCassou 1/7/2014 15:49' prior: 34626707!I'm responsible for numbering element types (e.g., sections, figures and scipts) when the output type does not do it automatically (e.g., LaTeX assigns numbers to \section whereas HTML does not assign numbers to <h1>).I have a running counter for each element type (e.g., headerCounter and figureCounter) that must be incremented by using the #new* methods (e.g., #newHeader: and #newFigure:). For each element type, I also maintain a dictionary mapping all elements of a document to its counter at the time the element was visited.For example, for a document with 2 level-1 headers, the headerCounter will be incremented twice and the headersMapping will associate the counter "1" to the first header and the counter "2" to the second header.!!PRNumerator methodsFor: 'accessing' stamp: 'DamienCassou 1/9/2014 09:56'!anchorCounter: aString	^ anchorsMapping at: aString ifAbsent: [ self cantFindCounterNamed: aString for: 'anchor' ]! !!PRNumerator methodsFor: 'errors' stamp: 'BenjaminVanRyseghem 1/9/2014 17:12'!cantFindCounterNamed: counterName for: kind	PRReferenceNotFound signal: 'Can''t find ', kind, ' named ''', counterName, ''''.	^ PRNotFoundCounter new! !!PRNumerator methodsFor: 'accessing' stamp: 'DamienCassou 1/7/2014 17:01'!figuresCounter: aString 	^ figuresMapping at: aString! !!PRNumerator methodsFor: 'accessing' stamp: 'DamienCassou 1/9/2014 10:07'!headerCounter: aHeader 	^ headersMapping at: aHeader! !!PRNumerator methodsFor: 'initialization' stamp: 'DamienCassou 11/20/2013 21:13'!initialize	super initialize.	headerCounter := PRCascadingCounter maxLevel: 5.	figureCounter := PRCascadingCounter maxLevel: 2.	scriptCounter := PRCascadingCounter maxLevel: 2.	anchorsMapping := Dictionary new.	headersMapping := IdentityDictionary new.	scriptsMapping := IdentityDictionary new.	figuresMapping := IdentityDictionary new.! !!PRNumerator methodsFor: 'action' stamp: 'DamienCassou 11/21/2013 10:47'!newAnchor: anchorName	"An anchor is attached to its preceding header"	anchorsMapping at: anchorName put: headerCounter current! !!PRNumerator methodsFor: 'action' stamp: 'CyrilFerlicot 4/13/2015 23:05'!newFigure: anExternalLink	"Figures and scripts are numbered based on the top-level header. This means that figures and scripts always have 2 numbers: one indicating the header they are in, and one indicating the position of the element in the corresponding section"	figureCounter incrementAt: 2.	figuresMapping at: anExternalLink put: figureCounter current.	anExternalLink parameters at: 'label' ifPresent: [ :label | anchorsMapping at: label put: figureCounter current ]! !!PRNumerator methodsFor: 'action' stamp: 'DamienCassou 1/14/2014 11:40'!newHeader: aHeader atLevel: aLevel	headerCounter incrementAt: aLevel.	aLevel = 1 "Figures and scripts are numbered based on the top-level header. This means that figures and scripts always have 2 numbers: one indicating the header they are in, and one indicating the position of the element in the corresponding section"		ifTrue: [ 			figureCounter incrementAt: 1.			scriptCounter incrementAt: 1 ].	headersMapping at: aHeader put: headerCounter current! !!PRNumerator methodsFor: 'action' stamp: 'CyrilFerlicot 4/13/2015 23:05'!newScript: aScript	"Figures and scripts are numbered based on the top-level header. This means that figures and scripts always have 2 numbers: one indicating the header they are in, and one indicating the position of the element in the corresponding section"	scriptCounter incrementAt: 2.	scriptsMapping at: aScript put: scriptCounter current.	aScript parameters at: 'label' ifPresent: [ :label | anchorsMapping at: label put: scriptCounter current ]! !!PRNumerator methodsFor: 'accessing' stamp: 'DamienCassou 1/8/2014 21:04'!scriptsCounter: aString 	^ scriptsMapping at: aString! !"Pillar-ExporterCore"!!PRMarkdownWriter commentStamp: '<historical>' prior: 0!I am a visitor generating markdown documents!!PRGitHubMarkdownWriter commentStamp: '<historical>' prior: 0!I am a writer for the GitHub markdown which differs a bit from the `original` markdown.!!PRMarkdownCanvas commentStamp: '<historical>' prior: 0!I am a markdown canvas on which brushes will be rendered!!PRMarkdownBrush commentStamp: '<historical>' prior: 0!I am a brush used to render markdown commands!!PRMarkdownAnchor commentStamp: '<historical>' prior: 0!I am used to generate anchor markdown commands!!PRMarkdownCommand commentStamp: '<historical>' prior: 0!I am used to render markdown commands that only need a starting symbol!!PRMarkdownComment commentStamp: '<historical>' prior: 0!I am used to output comments in markdown.Since it is not supported, hmtl is injected instead!!PRMarkdownEnvironment commentStamp: '<historical>' prior: 0!Iam used to generates markdown commands that need both a starting and an ending symbolBy example:*I am bold*!!PRMarkdownLink commentStamp: '<historical>' prior: 0!I am used to render markdown link since they have a a specific syntax!!PRMarkdownNestingEnvironment commentStamp: '<historical>' prior: 0!I am an environment used to generate markdown commands  that need to know their deep.They also start with a new line!!PRMarkdownPicture commentStamp: '<historical>' prior: 0!I am used to generate a picture in markdown.!!PRMarkdownTag commentStamp: '<historical>' prior: 0!I am used to render extended markdown commands as sup or sub!!PRMarkdownWriter commentStamp: '<historical>' prior: 34672446!I am a visitor generating markdown documents!!PRGitHubMarkdownWriter commentStamp: '<historical>' prior: 34672555!I am a writer for the GitHub markdown which differs a bit from the `original` markdown.!!PRGitHubMarkdownWriter class methodsFor: 'accessing' stamp: 'DamienCassou 1/9/2014 09:34'!writerName	^ #githubmarkdown! !!PRGitHubMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/18/2013 18:45'!visitCommentedLine: aCommentedLine	"This is not supported by GHM, plus it sems really weird to export comments"! !!PRGitHubMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/4/2015 22:19'!visitScript: aScript	aScript hasLabel		ifTrue: [			canvas 				newLine;				newLine.			canvas anchor 					name: aScript label].			aScript hasCaption				ifTrue: [ 					canvas environment						name: '**'						with: [ self visit: aScript caption] ].				canvas environment			name: '```'			options: (self languageForScript: aScript) printString asLowercase			wrapped: [ :nestedStream | 				self writeRawDuring: [				nestedStream << aScript text trimBoth ] ].! !!PRGitHubMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/18/2013 18:46'!visitStrikethroughFormat: aFormat	canvas environment		name: '~~'		with:  [ super visitStrikethroughFormat: aFormat ]! !!PRGitHubMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/20/2013 01:37'!visitUnderlineFormat: aFormat		self visitFormat: aFormat! !!PRMarkdownWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/9/2013 11:08'!fileExtension	^ 'md'! !!PRMarkdownWriter class methodsFor: 'testing' stamp: 'BenjaminVanRyseghem 11/14/2013 20:11'!isAbstract	^ false! !!PRMarkdownWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 17:21'!writerName	^ #markdown! !!PRMarkdownWriter methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/14/2013 20:13'!canvasClass	^ PRMarkdownCanvas! !!PRMarkdownWriter methodsFor: 'initialize' stamp: 'BenjaminVanRyseghem 1/17/2014 10:52'!initialize	super initialize.	nesting := 0.	needNewLine := true.	needsABreak := false! !!PRMarkdownWriter methodsFor: 'private' stamp: 'BenjaminVanRyseghem 11/14/2013 21:12'!nest: aBlock		nesting := nesting + 1.	aBlock value: (canvas nestingEnvironmentAt: nesting).	nesting := nesting - 1! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/14/2013 23:54'!visitAnchor: anAnchor		canvas anchor		name: anAnchor name! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenComan 6/3/2014 23:55'!visitAnnotatedParagraph: anAnnotatedParagraph	"What are these breaks needed for?"		needsABreak ifTrue: [ canvas addInvisibleSeparator ].		canvas htmlTag 			name: 'p';			parameterAt: 'class' put: anAnnotatedParagraph annotation ;			with: [  super visitParagraph: anAnnotatedParagraph ].				needsABreak := true.! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/13/2014 11:11'!visitBoldFormat: aFormat	canvas environment		name: '**'		with:  [ super visitBoldFormat: aFormat ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 1/9/2014 15:54'!visitDataItem: anItem	"super visitAll: anItem children.	canvas newLine.	canvas newLine."		canvas tag		name: 'dd'		with: [ self writeRawDuring: [ self visitAll: anItem children ] ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/14/2013 21:39'!visitDefinitionList: aList	canvas tag		name: 'dl'		with: [ super visitDefinitionList: aList ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/13/2015 23:24'!visitExternalLink: anExternalLink	anExternalLink isPicture		ifTrue: [ 			canvas picture				name: [ self writeRawDuring: [ self visitString: (anExternalLink label ifNil: [ '' ]) ] ]				reference: anExternalLink reference				caption: anExternalLink text				width: (anExternalLink parameters at: 'width' ifAbsent: '') ]		ifFalse: [ canvas link name: [ self visitString: anExternalLink text ] to: anExternalLink url ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/7/2014 14:25'!visitHeader: aHeader	| section level |	canvas		newLine;		newLine.	level := self configuration headingLevelOffset + aHeader level.	level := level min: 7 max: 1.	section := ''.	level timesRepeat: [ section := section , '#' ].	canvas command		name: section;		parameter: [ 			self writeCounterForHeader: aHeader .			super visitHeader: aHeader ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/20/2013 00:53'!visitHorizontalRule: anHorizontalRule	canvas newLine; newLine.	canvas raw: '---'.	canvas newLine.! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 1/9/2014 18:00'!visitInternalLink: anInternalLink	canvas link		name: [ 			anInternalLink children				ifEmpty: [ self writeCounterForAnchor: anInternalLink reference ]				ifNotEmpty: [ :e | self visitAll: e ] ]		to: '#', anInternalLink reference! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/13/2014 11:11'!visitItalicFormat: aFormat	canvas environment		name: '*'		with: [ super visitItalicFormat: aFormat ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/18/2013 18:44'!visitListItem: anItem	| name |		name := listType = #ordered		ifTrue: [ 			nextItemIndex := nextItemIndex +1.			(nextItemIndex - 1) asString, '. ' ]		ifFalse: [ 			listType = #description				ifTrue: [ '' ]				ifFalse: [ '- ' ]].	name ifNotEmpty: [ | result |		result := ''.		nesting -1 timesRepeat: [ result := result, '    ' ].		name := result, name ].		canvas command		name: name;		parameter: [ super visitListItem: anItem ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/26/2014 18:16'!visitMailLink: aLink	canvas tag		name: 'a'		options: 'href="', aLink unscrambledUrl, '"'		with: [ super visitMailLink: aLink ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 1/9/2014 15:24'!visitMonospaceFormat: aFormat		canvas environment		name: '`'		with: [ self writeRawDuring: [ super visitMonospaceFormat: aFormat ] ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 1/17/2014 10:57'!visitOrderedList: aList	| oldType oldNewLine |		(needsABreak and: [ nesting = 0 ]) ifTrue: [ canvas addInvisibleSeparator ].		oldType := listType.	listType := #ordered.	nesting := nesting + 1.	stream newLine.	oldNewLine := needNewLine.	needNewLine ifTrue: [ stream newLine ].	needNewLine := false.	nextItemIndex := 1.		super visitOrderedList: aList .		needNewLine := oldNewLine.	listType := oldType.	nesting := nesting - 1.		needsABreak := true.! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 3/20/2014 18:37'!visitParagraph: aParagraph	super visitParagraph: aParagraph.	canvas newLine! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/9/2014 12:20'!visitPreformatted: aPreformatted		self nest: [ :brush | 			brush			name: ''			with: [ :nestedStream || previousStream |				"We switch the stream here to be able to properly indent the result"				previousStream := stream stream.				stream setStream: nestedStream.				aPreformatted children do: [ :child | self visit: child ] separatedBy: [ canvas newLine ].				stream setStream: previousStream ] ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/4/2015 22:19'!visitScript: aScript	needsABreak ifTrue: [ canvas addInvisibleSeparator ].	aScript hasLabel		ifTrue: [ 			canvas				newLine;				newLine.			canvas anchor name: aScript label ].	aScript hasCaption		ifTrue: [ canvas environment name: '**' with: [ self visitText: aScript caption] ].	self		nest: [ :brush | 			brush				name: ''				with: [ :nestedStream |					self writeRawDuring: [ nestedStream << aScript text trimBoth ] ] ].				needsABreak := true.! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/13/2014 11:11'!visitStrikethroughFormat: aFormat	canvas tag		name: 'del'		with: [ super visitStrikethroughFormat: aFormat ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 1/29/2014 11:38'!visitString: aString	writingRaw		ifTrue: [ canvas rawLines: aString ]		ifFalse: [ canvas nextPutAllLines: aString ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/13/2014 11:11'!visitSubscriptFormat: aFormat	canvas tag		name: 'sub'		with: [ super visitSubscriptFormat: aFormat ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/13/2014 11:12'!visitSuperscriptFormat: aFormat	canvas tag		name: 'sup'		with: [ super visitSuperscriptFormat: aFormat ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/18/2013 18:44'!visitTable: aTableCell	stream newLine.	stream newLine.	firstRow := true.	super visitTable: aTableCell.	stream newLine.! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/18/2013 18:44'!visitTableCell: aTableCell	super visitTableCell: aTableCell! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/20/2013 01:07'!visitTableRow: aTableRow	stream << '| '.	self visitAll: aTableRow children separatedBy: [ stream << ' | ' ].	firstRow ifTrue: [ 		stream newLine.		firstRow := false.				aTableRow children do: [ :aTableCell | 			stream << '| '.					aTableCell isAligned 					ifTrue: [						aTableCell isAlignedLeft ifTrue: [ stream << ':---' ].						aTableCell isAlignedCenter ifTrue: [ stream << ':---:' ].						aTableCell isAlignedRight ifTrue: [ stream << '---:' ] ]					ifFalse: [ stream << ':---:' ] ] ].	stream newLine! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 1/9/2014 15:55'!visitTermItem: anItem	| oldType |		oldType := listType.	listType := #description.		canvas tag		name: 'dt'		with: [ self writeRawDuring: [ super visitTermItem: anItem ] ].			listType := oldType! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/13/2014 11:12'!visitUnderlineFormat: aFormat	canvas tag		name: 'u'		with: [ super visitUnderlineFormat: aFormat ]! !!PRMarkdownWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 1/17/2014 10:57'!visitUnorderedList: aList	| oldType oldNewLine |		(needsABreak and: [ nesting = 0 ]) ifTrue: [ canvas addInvisibleSeparator ].		oldType := listType.	listType := #unordered.	nesting := nesting + 1.	stream newLine.	oldNewLine := needNewLine.	needNewLine ifTrue: [ stream newLine ].	needNewLine := false.		super visitUnorderedList: aList .		needNewLine := oldNewLine.	listType := oldType.	nesting := nesting - 1.		needsABreak := true.! !!PRMarkdownCanvas commentStamp: '<historical>' prior: 34672701!I am a markdown canvas on which brushes will be rendered!!PRMarkdownCanvas class methodsFor: 'class initialization' stamp: 'BenjaminVanRyseghem 11/20/2013 00:23'!initialize	MarkdownCharacters := Dictionary new.		'\`*_{}[]()#+-.!!|' do: [ :c |		MarkdownCharacters			at: c put: '\', c asString ]! !!PRMarkdownCanvas methodsFor: 'writing text' stamp: 'BenjaminVanRyseghem 1/15/2014 15:38'!addInvisibleSeparator	self raw: '&nbsp;'! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/14/2013 23:53'!anchor	^ self brush: PRMarkdownAnchor new! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/14/2013 21:27'!command	^ self brush: PRMarkdownCommand new! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/18/2013 22:32'!comment	^ self brush: PRMarkdownComment new! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/14/2013 21:27'!environment	^ self brush: PRMarkdownEnvironment new! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenComan 6/2/2014 22:48'!htmlTag	^ self brush: PRHTMLTag new! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/14/2013 22:03'!link	^ self brush: PRMarkdownLink new! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/14/2013 22:58'!nestingEnvironmentAt: nestingLevel		^ self brush: (PRMarkdownNestingEnvironment new		nesting: nestingLevel;		yourself)! !!PRMarkdownCanvas methodsFor: 'writing text' stamp: 'BenjaminVanRyseghem 11/18/2013 18:47'!nextPut: aCharacter	| string |	string := MarkdownCharacters at: aCharacter ifAbsent: nil.	string isNil		ifTrue: [ super nextPut: aCharacter ]		ifFalse: [ self raw: string ]! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/18/2013 22:32'!picture	^ self brush: PRMarkdownPicture new! !!PRMarkdownCanvas methodsFor: 'tags' stamp: 'BenjaminVanRyseghem 11/14/2013 21:27'!tag	^ self brush: PRMarkdownTag new! !!PRMarkdownBrush commentStamp: '<historical>' prior: 34672815!I am a brush used to render markdown commands!!PRMarkdownAnchor commentStamp: '<historical>' prior: 34672919!I am used to generate anchor markdown commands!!PRMarkdownAnchor methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/18/2013 19:01'!name: name	stream 		<< '<a name="' << name << '"></a>'! !!PRMarkdownCommand commentStamp: '<historical>' prior: 34673025!I am used to render markdown commands that only need a starting symbol!!PRMarkdownCommand methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/14/2013 20:30'!name: aString 	stream	<< aString! !!PRMarkdownCommand methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/15/2013 00:11'!parameter: aString 	stream	<< aString.	stream newLine! !!PRMarkdownComment commentStamp: '<historical>' prior: 34673155!I am used to output comments in markdown.Since it is not supported, hmtl is injected instead!!PRMarkdownComment methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/18/2013 18:39'!with: aString	stream		<< '<!!---'		<< aString		<< '-->'! !!PRMarkdownEnvironment commentStamp: '<historical>' prior: 34673313!Iam used to generates markdown commands that need both a starting and an ending symbolBy example:*I am bold*!!PRMarkdownEnvironment methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/18/2013 18:55'!name: aSymbol options: options wrapped: aBlock	| childrenRendering lines |		stream 		newLine;		newLine;		<< aSymbol ; 		<< options.			childrenRendering := String streamContents: aBlock.	lines := childrenRendering lines.	lines do: [ :line | 		stream newLine.		stream << line ].	stream 		newLine;		<< aSymbol;		newLine;		newLine.! !!PRMarkdownEnvironment methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/18/2013 18:40'!name: aSymbol with: aBlock	stream 	<< aSymbol.	stream << aBlock.	stream << aSymbol! !!PRMarkdownLink commentStamp: '<historical>' prior: 34673481!I am used to render markdown link since they have a a specific syntax!!PRMarkdownLink methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/14/2013 22:06'!name: name to: anUrl	stream 		<< '[' << name << ']'		<< '(' << anUrl << ')'! !!PRMarkdownNestingEnvironment commentStamp: '<historical>' prior: 34673621!I am an environment used to generate markdown commands  that need to know their deep.They also start with a new line!!PRMarkdownNestingEnvironment methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/18/2013 18:59'!name: aSymbol with: aBlock	| childrenRendering lines |		stream 		newLine;		newLine;		<< aSymbol.			childrenRendering := String streamContents: aBlock.	lines := childrenRendering lines.	lines do: [ :line | 		stream newLine.		nesting timesRepeat: [ stream << '    ' ].		stream << line ].	stream 		<< aSymbol;		newLine;		newLine.! !!PRMarkdownNestingEnvironment methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/14/2013 21:02'!nesting	^ nesting! !!PRMarkdownNestingEnvironment methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/14/2013 21:02'!nesting: anObject	nesting := anObject! !!PRMarkdownPicture commentStamp: '<historical>' prior: 34673799!I am used to generate a picture in markdown.!!PRMarkdownPicture methodsFor: 'as yet unclassified' stamp: 'DamienCassou 2/21/2014 18:10'!name: name reference: url caption: caption width: width	| index choppedURL |	index := url indexOf: $:.	choppedURL := url copyFrom: index + 3 to: url size.	stream << '<a name="' << name << '"></a>'.	width isEmptyOrNil		ifTrue: [ stream << '!![' << name << '](' << choppedURL << ' "' << caption << '")' ]		ifFalse: [ stream << '<figure><img src="' << choppedURL << '" width="' << width << '%"></img><figcaption>' << caption << '</figcaption></figure>' ]! !!PRMarkdownTag commentStamp: '<historical>' prior: 34673899!I am used to render extended markdown commands as sup or sub!!PRMarkdownTag methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/20/2013 01:32'!name: aSymbol options: options with: aBlock	stream 	<< '<' << aSymbol << ' ' << options << '>'.	aBlock value.	stream << '</' << aSymbol << '>'! !!PRMarkdownTag methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 11/14/2013 21:26'!name: aSymbol with: aBlock	stream 	<< '<' << aSymbol << '>'.	aBlock value.	stream << '</' << aSymbol << '>'! !"Pillar-ExporterMarkdown"!!PRLaTeXBrush commentStamp: 'TorstenBergmann 3/5/2015 22:18' prior: 0!A LaTeX brush!!PRLaTeXCommand commentStamp: 'TorstenBergmann 3/5/2015 22:18' prior: 0!A LaTeX command!!PRLaTeXEnvironment commentStamp: 'TorstenBergmann 3/5/2015 22:18' prior: 0!A LaTeX environmentInstance Variables	name:		<Object>name	- xxxxx!!PRLaTeXWriter commentStamp: 'TorstenBergmann 3/5/2015 22:17' prior: 0!A LaTeX writer!!PRLaTeXCanvas commentStamp: 'TorstenBergmann 3/5/2015 22:17' prior: 0!A LaTeX canvas!!PRTableCell methodsFor: '*Pillar-ExporterLaTeX' stamp: 'DamienCassou 11/20/2013 16:56'!latexAlignment	self isAlignedCenter ifTrue: [ ^ 'c' ].	self isAlignedRight ifTrue: [ ^ 'r' ].	^ 'l'! !!PRTable methodsFor: '*Pillar-ExporterLaTeX' stamp: 'DamienCassou 11/20/2013 16:32'!latexSpecification	^ String new: self columnCount withAll: $l! !!PRLaTeXBrush commentStamp: 'TorstenBergmann 3/5/2015 22:18' prior: 34691476!A LaTeX brush!!PRLaTeXBrush methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 17:35'!optParameter: aString 	stream		<< $[		<< aString		<< $]! !!PRLaTeXBrush methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 17:35'!parameter: aString 	stream		<< ${		<< aString		<< $}! !!PRLaTeXCommand commentStamp: 'TorstenBergmann 3/5/2015 22:18' prior: 34691564!A LaTeX command!!PRLaTeXCommand methodsFor: 'accessing' stamp: 'DamienCassou 10/7/2013 10:55'!name: aString 	stream		<< $\		<< aString! !!PRLaTeXEnvironment commentStamp: 'TorstenBergmann 3/5/2015 22:18' prior: 34691658!A LaTeX environmentInstance Variables	name:		<Object>name	- xxxxx!!PRLaTeXEnvironment methodsFor: 'accessing' stamp: 'DamienCassou 6/3/2014 11:12'!name: aString	name := aString.	stream newLine.	stream << '\begin{' << aString << '}'! !!PRLaTeXEnvironment methodsFor: 'accessing' stamp: 'DamienCassou 11/18/2013 17:37'!with: aBlock	stream newLine.	aBlock value.	(stream << '\end{' << name)		<< '}';		newLine! !!PRLaTeXWriter commentStamp: 'TorstenBergmann 3/5/2015 22:17' prior: 34691804!A LaTeX writer!!PRLaTeXWriter class methodsFor: 'accessing' stamp: 'DamienCassou 4/2/2015 17:35'!defaultTemplate		^ '{{=<% %>=}}\documentclass[a4paper,10pt,twoside]{book}', self defaultTemplatePackages, '\usepackage[	colorlinks=true,	linkcolor=black,	urlcolor=black,	citecolor=black]{hyperref}\begin{document}<%content%>\end{document}'! !!PRLaTeXWriter class methodsFor: 'accessing' stamp: 'DamienCassou 4/2/2015 17:35'!defaultTemplatePackages	^ '\usepackage{graphicx}\usepackage[normalem]{ulem}\newcommand{\ct}[1]{{\sffamily\textup{#1}}}\usepackage{listings}\usepackage{textcomp}\lstnewenvironment{code}[1]{%	\lstset{%		% frame=lines,		frame=single,		framerule=0pt,		mathescape=false	}}{}\lstnewenvironment{script}[2][defaultlabel]{%\renewcommand{\lstlistingname}{Script}%	\lstset{		% frame=lines,		frame=single,		framerule=0pt,		mathescape=false,		name={Script},		caption={\emph{#2}},		label={scr:#1}	}}{}\usepackage{fixltx2e}'! !!PRLaTeXWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/9/2013 11:03'!fileExtension	^ 'tex'! !!PRLaTeXWriter class methodsFor: 'testing' stamp: 'DamienCassou 10/8/2013 11:04'!isAbstract	^ false! !!PRLaTeXWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 17:21'!writerName	^ #latex! !!PRLaTeXWriter methodsFor: 'accessing' stamp: 'DamienCassou 10/14/2013 16:34'!canvasClass	^ PRLaTeXCanvas! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 11/18/2013 17:58'!initialize	super initialize.	writingRaw := false! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'DamienCassou 11/21/2013 12:27'!referenceOfExternalLink: anExternalLink	| localFileIndicator reference |	localFileIndicator := 'file://'.	reference := anExternalLink reference.	^ (reference beginsWith: localFileIndicator)			ifTrue: [ reference allButFirst: localFileIndicator size ]			ifFalse: [ reference ]! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'DamienCassou 4/2/2015 11:04'!sectioningCommands	^ #('part' 'chapter' 'section' 'subsection' 'subsubsection' 'paragraph' 'subparagraph')! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitAnchor: anAnchor	canvas command		name: 'label';		parameter: anAnchor name! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'BenComan 6/2/2014 22:39'!visitAnnotatedParagraph: anAnnotatedParagraph	"Annotations need to be defined as environments in LaTeX include files (e.g. common.tex)"	"However the existing Latex for \dothis is a command (in common.tex) "	"Maybe it could be converted to an environment and the next seven lines deleted."	'dothis' = anAnnotatedParagraph annotation asLowercase		ifTrue: 		[ 	canvas newLine.			^ canvas command 				name: anAnnotatedParagraph annotation ;				parameter: [  super visitAnnotatedParagraph: anAnnotatedParagraph ]		].	canvas environment 		name: anAnnotatedParagraph annotation ; 		with: [  super visitAnnotatedParagraph: anAnnotatedParagraph ].! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitBoldFormat: aFormat	canvas command name: 'textbf'; parameter: [ super visitBoldFormat: aFormat ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitDataItem: anItem	super visitAll: anItem children.	canvas newLine.! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitDefinitionList: aList	canvas environment		name: 'description';		with: [ super visitDefinitionList: aList ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 12/9/2013 13:03'!visitEmptyParagraph: aParagraph	! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 11/21/2013 11:59'!visitExternalLink: anExternalLink	anExternalLink isPicture		ifTrue: [ self writeEmbeddedPicture: anExternalLink ]		ifFalse: [ self writeOtherKindOfExternalLink: anExternalLink ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/2/2015 11:04'!visitHeader: aHeader	| sections level section |	sections := self sectioningCommands.	level := self configuration headingLevelOffset + aHeader level.	section := sections at: (level min: sections size max: 1).	canvas command		name: section;		parameter: [ super visitHeader: aHeader ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/20/2013 00:54'!visitHorizontalRule: anHorizontalRule	canvas newLine; newLine.	canvas raw: '\rule{\textwidth}{0.1pt}'.	canvas newLine.! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/4/2014 10:35'!visitInternalLink: anInternalLink	canvas command name: 'ref';		parameter: [ canvas raw: anInternalLink reference ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitItalicFormat: aFormat	canvas command name: 'textit'; parameter: [ super visitItalicFormat: aFormat ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienPollet 2/18/2014 15:51'!visitListItem: anItem	canvas command name: 'item'.	canvas space.	canvas raw: [ super visitListItem: anItem ].	canvas newLine! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/26/2014 18:17'!visitMailLink: aLink	canvas command		name: 'href';		parameter: aLink unscrambledUrl;		parameter: aLink alias! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/20/2014 11:40'!visitMonospaceFormat: aFormat	canvas command		name: 'ct';		parameter: [ super visitMonospaceFormat: aFormat ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitOrderedList: aList	canvas environment		name: 'enumerate';		with: [ super visitOrderedList: aList ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 12/9/2013 13:02'!visitParagraph: aParagraph	canvas newLine.	super visitParagraph: aParagraph.	canvas newLine.! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/30/2015 10:05'!visitPreformatted: aPreformatted	canvas environment		name: 'verbatim';		with: [ 					self						writeRawDuring: [ 							aPreformatted children								do: [ :child | 									self visit: child.									canvas newLine ] ] ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/4/2015 22:18'!visitScript: aScript	| env |	aScript language isSyntaxHighlightingPossible		ifTrue: [ 			canvas				raw: '% syntax highlighting = ' , (self languageForScript: aScript) printString;				newLine ].	env := (aScript hasCaption or: [ aScript hasLabel ])		ifTrue: [ 			canvas environment				name: 'script';				optParameter: aScript label;				parameter: [ self noNewLineDuring: [ self visit: aScript caption ] ];				yourself ]		ifFalse: [ 			canvas environment				name: 'code';				parameter: '';				yourself ].	env with: [ self writeRawDuring: [ super visitScript: aScript ]. canvas newLine ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitStrikethroughFormat: aFormat	canvas command name: 'sout'; parameter: [ super visitStrikethroughFormat: aFormat ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 3/22/2014 15:31'!visitSubscriptFormat: aFormat	canvas command		name: 'textsubscript';		parameter: [ super visitSubscriptFormat: aFormat ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 3/22/2014 15:31'!visitSuperscriptFormat: aFormat	canvas command		name: 'textsuperscript';		parameter: [ super visitSuperscriptFormat: aFormat ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 6/3/2014 10:03'!visitTable: aTable	| environment |	environment := canvas environment name: 'tabular'.	aTable rowCount = 0		ifTrue: [ 			environment with: [  ].			^ self ].	environment parameter: aTable latexSpecification.	environment		with: [ 			canvas command name: 'toprule'.			canvas newLine.			super visitTable: aTable.			canvas command name: 'bottomrule'.			canvas newLine ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 11/20/2013 16:58'!visitTableCell: aCell	aCell isAligned		ifFalse: [ self writeTableCellContent: aCell ]		ifTrue: [ 			canvas command				name: 'multicolumn';				parameter: '1';				parameter: aCell latexAlignment;				parameter: [ self writeTableCellContent: aCell ] ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 6/3/2014 10:23'!visitTableRow: aRow	self visitAll: aRow children separatedBy: [ canvas raw: ' & ' ].	canvas		raw: ' \\';		newLine.	aRow isHeading		ifTrue: [ 			canvas command name: 'midrule'.			canvas newLine ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitTermItem: anItem	canvas command		name: 'item';		optParameter: [ self visitAll: anItem children ].	canvas space.! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitUnderlineFormat: aFormat	canvas command		name: 'uline';		parameter: [ super visitUnderlineFormat: aFormat ]! !!PRLaTeXWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:34'!visitUnorderedList: aList	canvas environment		name: 'itemize';		with: [ super visitUnorderedList: aList ]! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'DamienCassou 11/21/2013 12:28'!writeCaptionOfExternalLink: anExternalLink	| title |	title := anExternalLink text.	canvas nextPutAll: title.	title last = $.		ifFalse: [ canvas nextPut: $. ]! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'DamienCassou 11/21/2013 13:19'!writeEmbeddedPicture: anExternalLink	canvas environment		name: 'figure';		with: [ 					canvas environment						name: 'center';						with: [ 									canvas command										name: 'includegraphics';										optParameter: [ self writeGraphicsParametersOfExternalLink: anExternalLink ];										parameter: [ canvas raw: (self referenceOfExternalLink: anExternalLink) ].									canvas command										name: 'caption';										parameter: [ 													self														writeCaptionOfExternalLink: anExternalLink;														writeLabelOfExternalLink: anExternalLink ] ] ]! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/13/2015 23:12'!writeGraphicsParametersOfExternalLink: anExternalLink	canvas		nextPutAll: 'width=';		nextPutAll: ((anExternalLink parameters at: 'width' ifAbsent: [ 100 ]) asNumber / 100.0) printString;		raw: '\textwidth'! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/13/2015 23:12'!writeLabelOfExternalLink: anExternalLink	| label |	label := anExternalLink parameters at: 'label' ifAbsent: [ self referenceOfExternalLink: anExternalLink ].	canvas command		name: 'label';		parameter: [ canvas raw: label ]! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'DamienCassou 2/17/2014 17:28'!writeOtherKindOfExternalLink: anExternalLink	| text reference |	reference := self referenceOfExternalLink: anExternalLink.	text := anExternalLink text.	(text isEmptyOrNil or: [ reference = text ])		ifTrue: [ 			canvas command				name: 'url';				parameter: reference ]		ifFalse: [ 			canvas command				name: 'href';				parameter: reference;				parameter: [ canvas nextPutAll: text ] ]! !!PRLaTeXWriter methodsFor: 'helpers' stamp: 'DamienCassou 11/20/2013 16:58'!writeTableCellContent: aCell	^ aCell isHeading		ifTrue: [ 			canvas command				name: 'textbf';				parameter: [ super visitTableCell: aCell ] ]		ifFalse: [ super visitTableCell: aCell ]! !!PRLaTeXCanvas commentStamp: 'TorstenBergmann 3/5/2015 22:17' prior: 34691892!A LaTeX canvas!!PRLaTeXCanvas class methodsFor: 'class initialization' stamp: 'DamienCassou 6/26/2014 14:03'!initialize	" self initialize "	LatexCharacters := Dictionary new.	LatexCharacters		at: $# put: '\#';		at: $& put: '\&';		at: $% put: '\%';		at: $$ put: '\$';		at: ${ put: '\{';		at: $} put: '\}';		at: $_ put: '\_';		at: $" put: '\symbol{34}';		" -- "		at: $[ put: '{[}';		at: $] put: '{]}';		at: $| put: '\textbar{}';		at: $< put: '$<$';		at: $> put: '$>$';		at: $/ put: '$/$';		at: $\ put: '\textbackslash{}';		at: $^ put: '\string^';		" -- "		at: $ä put: '\"{a}';		at: $Ä put: '\"{A}';		at: $ë put: '\"{e}';		at: $Ë put: '\"{E}';		at: $ï put: '\"{i}';		at: $Ï put: '\"{I}';		at: $ö put: '\"{o}';		at: $Ö put: '\"{O}';		at: $ü put: '\"{u}';		at: $Ü put: '\"{U}';		at: $ÿ put: '\"{y}';		at: (Character value: 159) put: '\"{Y}';		" -- "		at: $â put: '\^{a}';		at: $Â put: '\^{A}';		at: $ê put: '\^{e}';		at: $Ê put: '\^{E}';		at: $î put: '\^{i}';		at: $Î put: '\^{I}';		at: $ô put: '\^{o}';		at: $Ô put: '\^{O}';		at: $û put: '\^{u}';		at: $Û put: '\^{U}';		" -- "		at: $à put: '\`{a}';		at: $À put: '\`{A}';		at: $è put: '\`{e}';		at: $È put: '\`{E}';		at: $ì put: '\`{i}';		at: $Ì put: '\`{I}';		at: $ò put: '\`{o}';		at: $Ò put: '\`{O}';		at: $ù put: '\`{u}';		at: $Ù put: '\`{U}';		" -- "		at: $á put: '\''{a}';		at: $Á put: '\''{A}';		at: $é put: '\''{e}';		at: $í put: '\''{i}';		at: $Í put: '\''{I}';		at: $ó put: '\''{o}';		at: $Ó put: '\''{O}';		at: $ú put: '\''{u}';		at: $Ú put: '\''{U}';		" -- "		at: $ç put: '\c{c}';		at: $Ç put: '\c{C}';		" -- "		at: $~ put: '\texttildelow{}';		at: $ñ put: '\~{n}';		at: $Ñ put: '\~{N}'! !!PRLaTeXCanvas methodsFor: 'tags' stamp: 'DamienCassou 10/8/2013 13:02'!command	^ self brush: PRLaTeXCommand new! !!PRLaTeXCanvas methodsFor: 'tags' stamp: 'DamienCassou 10/8/2013 13:53'!environment	^ self brush: PRLaTeXEnvironment new! !!PRLaTeXCanvas methodsFor: 'writing text' stamp: 'DamienCassou 11/18/2013 17:27'!nextPut: aCharacter	| string |	string := LatexCharacters at: aCharacter ifAbsent: nil.	string isNil		ifTrue: [ super nextPut: aCharacter ]		ifFalse: [ self raw: string ]! !"Pillar-ExporterLaTeX"!!PRBeamerWriter commentStamp: 'DamienCassou 4/2/2015 14:38' prior: 0!I'm a writer generating Beamer slides from a Pillar document. Beamer is a LaTeX package specialized in slide creation.!!PRBeamerWriter commentStamp: 'DamienCassou 4/2/2015 14:38' prior: 34707491!I'm a writer generating Beamer slides from a Pillar document. Beamer is a LaTeX package specialized in slide creation.!!PRBeamerWriter class methodsFor: 'accessing' stamp: 'DamienCassou 4/3/2015 11:34'!defaultTemplate	^ '{{=<% %>=}}% aspectratio = specifies a 16/9 slide ration% handout     = removes navigation bar\documentclass[aspectratio=169, handout]{beamer}\usepackage[english]{babel}\usepackage[T1]{fontenc}\usepackage[utf8]{inputenc}\usepackage{helvet}\usepackage{enumitem}' , self defaultTemplatePackages		,			'\title{<%title%>}\subtitle{<%subtitle%>}\author{<%author%>}\date{<%date%>}\begin{document}<%={{ }}=%>{{{content}}}\end{document}%%% Local Variables:%%% mode: latex%%% TeX-master: t%%% End:'! !!PRBeamerWriter class methodsFor: 'accessing' stamp: 'DamienCassou 4/2/2015 14:42'!writerName	^ #beamer! !!PRBeamerWriter methodsFor: 'helpers' stamp: 'DamienCassou 4/2/2015 11:04'!closeLastSlide	slideOpen		ifTrue: [ 			canvas command				name: 'end';				parameter: 'frame'.			slideOpen := false ]! !!PRBeamerWriter methodsFor: 'helpers' stamp: 'DamienCassou 4/2/2015 11:04'!sectioningCommands	^ #('' 'frametitle')! !!PRBeamerWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/3/2015 11:19'!visitDocument: aDocument	slideOpen := false.	super visitDocument: aDocument.	self closeLastSlide.! !!PRBeamerWriter methodsFor: 'visiting' stamp: 'DamienCassou 4/2/2015 14:31'!visitDocumentTitle: aHeader 	"I'm not sure what we should do with that"! !!PRBeamerWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/2/2015 11:04'!visitHeader: aHeader	aHeader level = 1		ifTrue: [ ^ self visitDocumentTitle: aHeader ].	aHeader level = 2		ifTrue: [ ^ self visitSlideTitle: aHeader ].	PRExportError signal: 'Unsupported title'! !!PRBeamerWriter methodsFor: 'visiting' stamp: 'DamienCassou 4/2/2015 17:36'!visitSlideTitle: aHeader	self closeLastSlide.	canvas newLine.	canvas command		name: 'begin';		parameter: 'frame';		optParameter: 'fragile'.	slideOpen := true.	super visitHeader: aHeader.! !"Pillar-ExporterBeamer"!!PRHTMLWriter commentStamp: 'DamienCassou 6/2/2014 14:19' prior: 0!Writes a Pillar document as HTML.!!PRHTMLCanvas commentStamp: 'DamienCassou 6/2/2014 14:21' prior: 0!An HTML canvas that facilitates writing HTML to a stream. The main method is #tag that allow you to write something like this:canvas tag        name: 'a';        parameterAt: 'href' put: href;        with: [ "some code that generates the HTML inside the link" ]!!PRHTMLBrush commentStamp: 'DamienCassou 6/2/2014 14:23' prior: 0!I'm an abstract brush dedicated to HTML documents. As of today, the only subclass is the tag brush but we can imagine others (e.g., to write HTML comments).!!PRHTMLTag commentStamp: 'DamienCassou 6/2/2014 14:45' prior: 0!I'm a helper class to generate HTML code. For example, to generate:     <p>foo <a href="url">bar</a></b>you can write something like this:String streamContents: [ :stream | | canvas |	stream := PROutputStream on: stream.	canvas := PRHTMLCanvas on: stream.	canvas tag 		name: 'p'; 		with: [ canvas nextPutAll: 'foo '.			    canvas tag 	     		      name: 'a';	    			parameterAt: 'href' put: 'url';	                  with: 'bar' ]	 ]!!PRHTMLWriter commentStamp: 'DamienCassou 6/2/2014 14:19' prior: 34709864!Writes a Pillar document as HTML.!!PRHTMLWriter class methodsFor: 'accessing' stamp: 'DamienCassou 1/14/2014 15:16'!defaultTemplate	^ '<!!DOCTYPE html><html lang="en">  <head>    <title>{{{title}}}</title>    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">    <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css" rel="stylesheet">    <link rel="stylesheet" href="http://yandex.st/highlightjs/8.0/styles/default.min.css">    <script src="http://yandex.st/highlightjs/8.0/highlight.min.js"></script>    <!!--[if lt IE 9]>      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>    <!![endif]-->  </head>  <body>    <div class="container">      {{{content}}}    </div>    <script src="https://code.jquery.com/jquery.js"></script>    <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>    <script>hljs.initHighlightingOnLoad();</script>  </body></html>'! !!PRHTMLWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/9/2013 11:07'!fileExtension	^ 'html'! !!PRHTMLWriter class methodsFor: 'testing' stamp: 'DamienCassou 10/8/2013 11:01'!isAbstract	^ false! !!PRHTMLWriter class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 17:21'!writerName	^ #html! !!PRHTMLWriter methodsFor: 'accessing' stamp: 'DamienCassou 10/14/2013 16:36'!canvasClass	^ PRHTMLCanvas! !!PRHTMLWriter methodsFor: 'private' stamp: 'DamienCassou 11/18/2013 16:25'!referenceOfExternalLink: anExternalLink	| localFileIndicator reference |	localFileIndicator := 'file://'.	reference := anExternalLink reference.	^ (reference beginsWith: localFileIndicator)			ifTrue: [ reference allButFirst: localFileIndicator size ]			ifFalse: [ reference ]! !!PRHTMLWriter methodsFor: 'visiting' stamp: 'DamienCassou 10/14/2013 16:33'!start: anObject	canvas := PRHTMLCanvas on: stream.	super start: anObject.	canvas flush! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:33'!visitAnchor: anAnchor	canvas tag		name: 'a';		parameterAt: 'id' put: anAnchor name;		with: ''! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 6/5/2014 15:39'!visitAnnotatedParagraph: anAnnotatedParagraph	"Annotations need to be defined as CSS styles. For example...		@@note 		@@dothis	could have...	 	<head><style>		p.note{colour:green}		p.dothis{colour:red}		</style></head> 	"	canvas tag		name: 'p';		parameterAt: 'class' put: anAnnotatedParagraph annotation;		with: [ 					"We call #visitParagraph: directly because we don't want 'self visitParagraph:' to be executed."					super visitParagraph: anAnnotatedParagraph ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:36'!visitBoldFormat: aFormat	canvas tag		name: 'strong';		with: [ super visitBoldFormat: aFormat ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:49'!visitDataItem: anItem	canvas tag		name: 'dd';		with: [ self visitAll: anItem children ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:47'!visitDefinitionList: aList	canvas tag		name: 'dl';		with: [ super visitDefinitionList: aList ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 11/18/2013 16:24'!visitExternalLink: anExternalLink	anExternalLink isPicture		ifTrue: [ self writeEmbeddedPicture: anExternalLink ]		ifFalse: [ self writeOtherKindOfExternalLink: anExternalLink ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 11/21/2013 07:32'!visitHeader: aHeader	| level |	level := self configuration headingLevelOffset + aHeader level.	"h1 to h7 exist."	level := level min: 7 max: 1.	canvas tag		name: 'h' , level asString;		with: [ 					self writeCounterForHeader: aHeader.					super visitHeader: aHeader ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'BenjaminVanRyseghem 11/20/2013 00:54'!visitHorizontalRule: anHorizontalRule	canvas newLine; newLine.	canvas raw: '<hr>'.	canvas newLine.! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/14/2014 10:14'!visitInternalLink: anInternalLink	| href isAnchor |	href := anInternalLink reference.	isAnchor := self configuration internalLinksAreAllAnchors or: [ href beginsWith: '#' ].	self configuration internalLinksAreAllAnchors		ifTrue: [ href := '#' , href ].	canvas tag		name: 'a';		parameterAt: 'href' put: href;		with: [ 					isAnchor						ifTrue: [ self writeCounterForAnchor: anInternalLink reference ].					super visitInternalLink: anInternalLink ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:47'!visitItalicFormat: aFormat	canvas tag		name: 'em';		with: [ super visitBoldFormat: aFormat ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:47'!visitListItem: anItem	canvas tag		name: 'li';		with: [ super visitListItem: anItem ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/26/2014 18:18'!visitMailLink: aLink	canvas tag		name: 'a';		parameterAt: 'href' put: aLink unscrambledUrl;		with: aLink alias! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:47'!visitMonospaceFormat: aFormat	canvas tag		name: 'code';		with: [ super visitBoldFormat: aFormat ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:47'!visitOrderedList: aList	canvas tag		name: 'ol';		with: [ super visitOrderedList: aList ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/18/2014 17:34'!visitParagraph: aParagraph	(aParagraph children size = 1 and: [ aParagraph children first isKindOf: PRRaw ])		ifTrue: [ 			self				flag:					'TODO: ugly fix. The idea is that you don''t want the <p> when using a Raw that potentially displays a <div>, because this is not HTML compliant'.			self visitRaw: aParagraph children first ]		ifFalse: [ 			canvas tag				name: 'p';				with: [ super visitParagraph: aParagraph ] ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 1/9/2014 12:17'!visitPreformatted: aPreformatted	canvas tag		name: 'pre';		with: [ aPreformatted children do: [ :child | self visit: child ] separatedBy: [ canvas newLine ] ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/4/2015 22:25'!visitScript: aScript	canvas tag		name: 'figure';		with: [ 					canvas tag						name: 'pre';						with: [ 									| code language |									code := canvas tag										name: 'code';										yourself.									language := self languageForScript: aScript.									language isSyntaxHighlightingPossible										ifTrue: [ code parameterAt: 'class' put: language printString ].									code with: [ canvas lines: aScript text ] ].					canvas tag						name: 'figcaption';						with: [ 									aScript hasLabel										ifTrue: [ 											canvas tag												name: 'a';												parameterAt: 'name' put: aScript label;												with: ''.											self writeCounterForScript: aScript ].									aScript hasCaption										ifTrue: [ self visitText: aScript caption ] ] ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:48'!visitStrikethroughFormat: aFormat	canvas tag		name: 's';		with: [ super visitStrikethroughFormat: aFormat ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:48'!visitSubscriptFormat: aFormat	canvas tag		name: 'sub';		with: [ super visitSubscriptFormat: aFormat ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:48'!visitSuperscriptFormat: aFormat	canvas tag		name: 'sup';		with: [ super visitSuperscriptFormat: aFormat ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 11/20/2013 16:14'!visitTable: aTable	canvas tag		name: 'table';		parameterAt: 'style' put: 'border: solid thin';		with: [ super visitTable: aTable ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/14/2015 10:23'!visitTableCell: aCell	| tagName tag |	tagName := aCell isHeading		ifTrue: [ 'th' ]		ifFalse: [ 'td' ].	tag := canvas tag name: tagName.	aCell isAligned		ifTrue: [ 			aCell isAlignedLeft				ifTrue: [ tag parameterAt: 'style' put: 'text-align: left' ].			aCell isAlignedCenter				ifTrue: [ tag parameterAt: 'style' put: 'text-align: center' ].			aCell isAlignedRight				ifTrue: [ tag parameterAt: 'style' put: 'text-align: right' ] ].	tag with: [ super visitTableCell: aCell ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 11/20/2013 15:47'!visitTableRow: aRow	canvas tag		name: 'tr';		with: [ super visitTableRow: aRow ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:48'!visitTermItem: anItem	canvas tag		name: 'dt';		with: [ self visitAll: anItem children ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:48'!visitUnderlineFormat: aFormat	canvas tag		name: 'u';		with: [ super visitUnderlineFormat: aFormat ]! !!PRHTMLWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 10/14/2013 16:48'!visitUnorderedList: aList	canvas tag		name: 'ul';		with: [ super visitUnorderedList: aList ]! !!PRHTMLWriter methodsFor: 'private' stamp: 'CyrilFerlicot 4/13/2015 23:14'!writeEmbeddedPicture: anExternalLink	anExternalLink label		ifNotNil: [ :label |			canvas tag				name: 'a';				parameterAt: 'name' put: label;				with: '' ].	canvas tag		name: 'figure';		with: [ | img |				img := canvas tag						name: 'img';						parameterAt: 'src' put: (self referenceOfExternalLink: anExternalLink);						yourself.				anExternalLink parameters at: 'width' ifPresent: [ :width | img parameterAt: 'width' put: width greaseString, '%' ].				img with: ''.					canvas tag						name: 'figcaption';						with: [ 									anExternalLink label ifNotNil: [self writeCounterForFigure: anExternalLink].									super visitExternalLink: anExternalLink ] ]! !!PRHTMLWriter methodsFor: 'private' stamp: 'DamienCassou 11/18/2013 16:25'!writeOtherKindOfExternalLink: anExternalLink	canvas tag		name: 'a';		parameterAt: 'href' put: anExternalLink reference;		with: anExternalLink alias! !!PRHTMLCanvas commentStamp: 'DamienCassou 6/2/2014 14:21' prior: 34709967!An HTML canvas that facilitates writing HTML to a stream. The main method is #tag that allow you to write something like this:canvas tag        name: 'a';        parameterAt: 'href' put: href;        with: [ "some code that generates the HTML inside the link" ]!!PRHTMLCanvas class methodsFor: 'class initialization' stamp: 'DamienCassou 12/19/2013 12:36'!initialize	HTMLCharacters := Dictionary new.	HTMLCharacters		at: $" put: '&quot;';		at: $& put: '&amp;';		at: $< put: '&lt;';		at: $> put: '&gt;'! !!PRHTMLCanvas methodsFor: 'writing text' stamp: 'DamienCassou 12/19/2013 12:33'!nextPut: aCharacter	| string |	string := HTMLCharacters at: aCharacter ifAbsent: nil.	string isNil		ifTrue: [ super nextPut: aCharacter ]		ifFalse: [ self raw: string ]! !!PRHTMLCanvas methodsFor: 'tags' stamp: 'DamienCassou 10/14/2013 16:24'!tag	^ self brush: PRHTMLTag new! !!PRHTMLBrush commentStamp: 'DamienCassou 6/2/2014 14:23' prior: 34710302!I'm an abstract brush dedicated to HTML documents. As of today, the only subclass is the tag brush but we can imagine others (e.g., to write HTML comments).!!PRHTMLTag commentStamp: 'DamienCassou 6/2/2014 14:45' prior: 34710525!I'm a helper class to generate HTML code. For example, to generate:     <p>foo <a href="url">bar</a></b>you can write something like this:String streamContents: [ :stream | | canvas |	stream := PROutputStream on: stream.	canvas := PRHTMLCanvas on: stream.	canvas tag 		name: 'p'; 		with: [ canvas nextPutAll: 'foo '.			    canvas tag 	     		      name: 'a';	    			parameterAt: 'href' put: 'url';	                  with: 'bar' ]	 ]!!PRHTMLTag methodsFor: 'accessing' stamp: 'DamienCassou 10/14/2013 16:43'!name: aString	name := aString.	stream << $< << aString! !!PRHTMLTag methodsFor: 'accessing' stamp: 'DamienCassou 10/14/2013 16:45'!parameterAt: aString put: anotherString	stream space. stream << aString << '="' << anotherString << '"'! !!PRHTMLTag methodsFor: 'accessing' stamp: 'DamienCassou 10/14/2013 16:45'!with: aString	stream << $> << aString << '</' << name << $>! !"Pillar-ExporterHTML"!!PRPillarCanvas commentStamp: 'TorstenBergmann 3/5/2015 22:20' prior: 0!A pillar canvasInstance Variables	lastIsNewLine:		<Object>lastIsNewLine	- xxxxx!!PRPillarWriter commentStamp: 'TorstenBergmann 3/5/2015 22:20' prior: 0!A pillar writerInstance Variables	nesting:		<Object>nesting	- xxxxx!!PRPillarCanvas commentStamp: 'TorstenBergmann 3/5/2015 22:20' prior: 34723873!A pillar canvasInstance Variables	lastIsNewLine:		<Object>lastIsNewLine	- xxxxx!!PRPillarCanvas class methodsFor: 'class initialization' stamp: 'DamienCassou 2/27/2014 10:31'!initialize	" self initialize "	PillarCharacters := Dictionary new.	((PRDocumentItem withAllConcreteClasses collect: #markup) reject: [ :markup | markup isNil ])		do: [ :markup | 			markup				do: [ :char | 					char = Character space						ifFalse: [ PillarCharacters at: char put: '\' , char asString ] ] ]! !!PRPillarCanvas methodsFor: 'initialization' stamp: 'DamienCassou 2/20/2014 11:14'!initialize	super initialize.	lastIsNewLine := true! !!PRPillarCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/20/2014 13:16'!lastIsNewLine	^ lastIsNewLine! !!PRPillarCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/20/2014 13:35'!newLine	super newLine.	lastIsNewLine := true! !!PRPillarCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/20/2014 11:14'!nextPut: aCharacter	| string |	string := PillarCharacters at: aCharacter ifAbsent: nil.	string isNil		ifTrue: [ super nextPut: aCharacter ]		ifFalse: [ self raw: string ].	lastIsNewLine := false! !!PRPillarCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/20/2014 13:35'!potentialNewLine	lastIsNewLine		ifFalse: [ self newLine ]! !!PRPillarCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/20/2014 14:12'!raw: aString	super raw: aString.	lastIsNewLine := false.! !!PRPillarWriter commentStamp: 'TorstenBergmann 3/5/2015 22:20' prior: 34724034!A pillar writerInstance Variables	nesting:		<Object>nesting	- xxxxx!!PRPillarWriter class methodsFor: 'accessing' stamp: 'DamienCassou 2/20/2014 09:54'!fileExtension	^ 'pillar'! !!PRPillarWriter class methodsFor: 'testing' stamp: 'DamienCassou 2/20/2014 09:11'!isAbstract 	^ false! !!PRPillarWriter class methodsFor: 'accessing' stamp: 'DamienCassou 2/20/2014 09:23'!writerName	^ #pillar! !!PRPillarWriter methodsFor: 'accessing' stamp: 'DamienCassou 2/20/2014 09:14'!canvasClass	^ PRPillarCanvas! !!PRPillarWriter methodsFor: 'private' stamp: 'DamienCassou 2/20/2014 13:14'!lineMatcher	^ PRMatcherManager lineMatcher! !!PRPillarWriter methodsFor: 'private' stamp: 'DamienCassou 2/20/2014 09:29'!nest: aString do: aBlock	nesting add: aString.	aBlock ensure: [ nesting removeLast ]! !!PRPillarWriter methodsFor: 'visiting' stamp: 'DamienCassou 2/27/2014 11:32'!start: anObject	nesting := OrderedCollection new.	super start: anObject.	canvas lastIsNewLine		ifTrue: [ stream trimLastNewLine ]! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 09:56'!visitAnchor: anObject	canvas raw: anObject class markup; nextPutAll: anObject name; newLine! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 11:41'!visitAnnotatedParagraph: anObject	canvas 		raw: anObject class markup;		nextPutAll: anObject annotation.	anObject hasChildren 		ifTrue: [ canvas space ].	super visitAnnotatedParagraph: anObject! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/3/2015 17:56'!visitAnnotation: anAnnotation	canvas		raw: anAnnotation class markupBegin;		nextPutAll: anAnnotation class tag.	anAnnotation hasParameters		ifTrue: [ 			canvas raw: anAnnotation class markupParameterSeparator asString.			self visitParametersOf: anAnnotation ].	canvas raw: anAnnotation class markupEnd! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 3/5/2014 17:20'!visitCommentedLine: aCommentedLine	canvas potentialNewLine.	canvas raw: PRCommentedLine markup.	canvas raw: aCommentedLine text.! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 11:17'!visitDefinitionList: anObject	canvas potentialNewLine.	anObject children do: [ :each |		self 			nest: each class markup			do: [ self visit: each ] ]! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 13:51'!visitDocument: aDocument	aDocument properties		keysAndValuesDo: [ :key :value | 			canvas				raw: PRDocumentParser propertiesMarkupBegin;				nextPutAll: key;				raw: PRDocumentParser propertiesKeywordValueSeparator;				nextPut: Character space;				nextPutAll: value;				raw: PRDocumentParser propertiesMarkupEnd.			canvas newLine ].	super visitDocument: aDocument! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 09:19'!visitFormat: anObject	canvas raw: anObject class markup.	super visitFormat: anObject.	canvas raw: anObject class markup! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 09:22'!visitHeader: aHeader	| level |	level := self configuration headingLevelOffset + aHeader level.	level timesRepeat: [ canvas raw: aHeader class markup ].	super visitHeader: aHeader.	canvas newLine! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 13:29'!visitHorizontalRule: anHorizontalRule	canvas		raw: anHorizontalRule class markup;		newLine! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/13/2015 23:25'!visitLink: aLink	"protocol: visiting-document"	canvas		raw:			(aLink isEmbedded				ifFalse: [ aLink class markup ]				ifTrue: [ aLink class markupEmbedded ]).	aLink hasAlias		ifTrue: [ 			super visitLink: aLink.			canvas raw: aLink class markupAlias ].	canvas raw: aLink reference.	aLink hasAnchor		ifTrue: [ 			canvas raw: aLink class markupAnchor.			canvas nextPutAll: aLink anchor ].	aLink hasParameters		ifTrue: [ 			canvas raw: aLink class markupParameter.			self visitParametersOf: aLink ].	canvas		raw:			(aLink isEmbedded				ifFalse: [ aLink class markup ]				ifTrue: [ aLink class markupEmbedded ])! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 13:39'!visitList: aList	canvas potentialNewLine.	self nest: aList class markup do: [ super visitList: aList ]! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 14:12'!visitListItem: aListItem	nesting do: [ :each | canvas raw: each ].	super visitListItem: aListItem.	canvas potentialNewLine.! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 3/20/2014 18:37'!visitParagraph: aParagraph	super visitParagraph: aParagraph.	canvas newLine! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'CyrilFerlicot 4/13/2015 22:46'!visitParametersOf: objectWithParams	objectWithParams parameters associations		do: [ :assoc | 			canvas nextPutAll: assoc key.			assoc value ifNotNil: [ :value |					canvas						raw: objectWithParams class markupParameterValue;						nextPutAll: value greaseString ] ]		separatedBy: [ canvas raw: objectWithParams class markupParameter ]! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 16:29'!visitPreformatted: aPreformatted	self		writeRawDuring: [ 			aPreformatted children				do: [ :child | 					canvas raw: aPreformatted class markup.					self visit: child.					canvas newLine ] ]! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 13:40'!visitRaw: anObject	canvas raw: PRRaw markupBegin.	anObject type isNil		ifFalse: [ canvas nextPutAll: anObject type; raw: PRRaw verbatimTypeSeparator ].	canvas raw: anObject text.	canvas raw: (PRRaw markupEnd: PRRaw markupBegin)! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 4/6/2015 11:52'!visitScript: aScript	canvas raw: PRScript markupBegin.	self visitParametersOf: aScript.	canvas		newLine;		nextPutAllLines: aScript text;		newLine;		raw: PRScript markupEnd! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 10:18'!visitTableCell: anObject	canvas raw: anObject class markup.	anObject isAligned ifTrue: [		anObject isAlignedLeft ifTrue: [ canvas raw: anObject class markupLeft ].		anObject isAlignedCenter ifTrue: [ canvas raw: anObject class markupCenter ].		anObject isAlignedRight ifTrue: [ canvas raw: anObject class markupRight ] ].	anObject isHeading ifTrue: [ canvas raw: anObject class markupHeading ].	super visitTableCell: anObject! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/20/2014 13:37'!visitTableRow: aTableRow	super visitTableRow: aTableRow.	canvas newLine! !!PRPillarWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 13:35'!visitText: anObject	"Write out ==anObject=='s text to the receivers output-stream and escape special characters within and at the beginning of a line."	| string |	string := anObject text.	writingRaw		ifTrue: [ canvas rawLines: string. ^ self ].	canvas lastIsNewLine		ifTrue: [ 			| markup |			markup := self lineMatcher keys detect: [ :each | string beginsWithSubCollection: each ] ifNone: [ nil ].			markup isNil				ifFalse: [ 					canvas						nextPut: $\;						raw: markup.					string := string allButFirst: markup size ] ].	canvas raw: (PRTextParser escape: string)! !"Pillar-ExporterPillar"!!PRTextWriter commentStamp: 'TorstenBergmann 3/5/2015 22:21' prior: 0!A writer for text !!PRTextCanvas commentStamp: 'TorstenBergmann 3/5/2015 22:21' prior: 0!A canvas for writing text!!PRDocument methodsFor: '*pillar-exportertext' stamp: 'DamienCassou 6/6/2014 17:03'!defaultTitle	^ 'No title'! !!PRDocument methodsFor: '*pillar-exportertext' stamp: 'DamienCassou 6/6/2014 16:37'!title	^ self propertyAt: 'title' ifAbsent: [ self titleFromFirstHeader ]! !!PRDocument methodsFor: '*pillar-exportertext' stamp: 'DamienCassou 6/6/2014 16:41'!titleFromFirstHeader	^ self children		detect: [ :child | child isKindOf: PRHeader ]		ifFound: [ :header | PRTextWriter write: header ]		ifNone: [ self defaultTitle ]! !!PRTextWriter commentStamp: 'TorstenBergmann 3/5/2015 22:21' prior: 34733328!A writer for text !!PRTextWriter class methodsFor: 'accessing' stamp: 'DamienCassou 2/26/2014 17:20'!fileExtension	^ 'txt'! !!PRTextWriter class methodsFor: 'testing' stamp: 'DamienCassou 2/5/2014 14:08'!isAbstract	^ false! !!PRTextWriter class methodsFor: 'accessing' stamp: 'DamienCassou 2/26/2014 17:10'!writerName	^ #text! !!PRTextWriter methodsFor: 'accessing' stamp: 'DamienCassou 2/26/2014 17:02'!canvasClass	^ PRTextCanvas! !!PRTextWriter methodsFor: 'private' stamp: 'DamienCassou 2/26/2014 17:08'!nest: aString do: aBlock	nesting add: aString.	aBlock ensure: [ nesting removeLast ]! !!PRTextWriter methodsFor: 'visiting' stamp: 'DamienCassou 2/27/2014 11:33'!start: anObject	nesting := OrderedCollection new.	super start: anObject.	canvas lastIsNewLine		ifTrue: [ stream trimLastNewLine ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 23:25'!visitDataItem: anObject	self nest: ' ' do: [ super visitDataItem: anObject ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:05'!visitDefinitionList: anObject	canvas potentialNewLine.	self visitAll: anObject children! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:11'!visitHeader: anObject	super visitHeader: anObject.	canvas newLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:11'!visitHorizontalRule: anObject	canvas		nextPutAll: ((String new: 40) atAllPut: $-);		newLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:10'!visitLink: anObject	anObject hasAlias		ifTrue: [ super visitLink: anObject ]		ifFalse: [ canvas nextPutAll: anObject title ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:12'!visitListItem: anObject 	nesting last isInteger ifTrue: [ nesting addLast: nesting removeLast + 1 ].	nesting size - 1 timesRepeat: [ canvas tab ].	canvas nextPutAll: nesting last greaseString.	canvas nextPutAll: (nesting last isInteger 			ifTrue: [ '. ' ]			ifFalse: [ ' ' ]).	super visitListItem: anObject.	canvas potentialNewLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:12'!visitOrderedList: anObject	canvas potentialNewLine.	self nest: 0 do: [ super visitOrderedList: anObject ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:35'!visitParagraph: anObject	super visitParagraph: anObject.	canvas newLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:03'!visitPreformatted: anObject	anObject children do: [ :each | self visit: each. canvas newLine ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:14'!visitRaw: anObject	(anObject type isNil or: [ anObject type = 'text' ])		ifTrue: [ canvas nextPutAll: anObject text ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:14'!visitTableRow: anObject	anObject children		do: [ :each | self visit: each ]		separatedBy: [ canvas tab ].	canvas newLine! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'lr 12/30/2007 23:24'!visitTermItem: anObject	self nest: '-' do: [ super visitDataItem: anObject ]! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:03'!visitText: anObject	canvas nextPutAll: anObject text! !!PRTextWriter methodsFor: 'visiting-document' stamp: 'DamienCassou 2/26/2014 17:31'!visitUnorderedList: anObject	canvas potentialNewLine.	self nest: '*' do: [ super visitUnorderedList: anObject ]! !!PRTextCanvas commentStamp: 'TorstenBergmann 3/5/2015 22:21' prior: 34733420!A canvas for writing text!!PRTextCanvas methodsFor: 'initialization' stamp: 'DamienCassou 2/26/2014 17:06'!initialize	super initialize.	lastIsNewLine := true! !!PRTextCanvas methodsFor: 'testing' stamp: 'DamienCassou 2/26/2014 17:06'!lastIsNewLine	^ lastIsNewLine! !!PRTextCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/26/2014 17:06'!newLine	super newLine.	lastIsNewLine := true! !!PRTextCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/26/2014 17:07'!nextPut: aCharacter	super nextPut: aCharacter.	lastIsNewLine := false! !!PRTextCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/26/2014 17:05'!potentialNewLine	lastIsNewLine		ifFalse: [ self newLine ]! !!PRTextCanvas methodsFor: 'writing text' stamp: 'DamienCassou 2/26/2014 17:07'!raw: aString	super raw: aString.	lastIsNewLine := false.! !!PRTextCanvas methodsFor: 'writing' stamp: 'DamienCassou 2/26/2014 17:13'!tab	self nextPut: Character tab! !"Pillar-ExporterText"!!PRMatcherManagerTest commentStamp: '' prior: 0!A PRTextParserTest is xxxxxxxxx.Instance Variables	parser:		<Object>parser	- xxxxx!!PRObjectTest commentStamp: 'DamienCassou 4/3/2015 14:53' prior: 0!Tests for expectations that must be valid on all pillar objects!!PRAbstractScriptLanguageTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRDocumentItemTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRAbstractAnnotationTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRScriptTest commentStamp: '' prior: 0!A PRRawTest is xxxxxxxxx.!!PRDocumentParserTest methodsFor: 'running' stamp: 'lr 4/5/2007 13:53'!setUp	parser := PRDocumentParser new! !!PRDocumentParserTest methodsFor: 'tests' stamp: 'StephanEggermont 3/5/2014 17:49'!testHasLineMatcher	self assert: (PRDocumentParser respondsTo: #lineMatcher)! !!PRDocumentParserTest methodsFor: 'tests' stamp: 'jf 11/2/2009 10:39'!testNextCrLf1	parser initializeOn: ('a' , (String with: Character cr) , 'b') readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine = 'b'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , (String with: Character lf) , 'b') readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine = 'b'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , (String with: Character cr) , (String with: Character lf) , 'b') readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine = 'b'.	self assert: parser nextLine isNil! !!PRDocumentParserTest methodsFor: 'tests' stamp: 'jf 11/2/2009 10:39'!testNextCrLf2	parser initializeOn: ((String with: Character lf) , 'a') readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: ((String with: Character cr) , 'a') readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: ((String with: Character cr) , (String with: Character lf) , 'a') readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil! !!PRDocumentParserTest methodsFor: 'tests' stamp: 'jf 11/2/2009 10:39'!testNextCrLf3	parser initializeOn: ('a' , (String with: Character lf)) readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , (String with: Character cr)) readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil.	parser initializeOn: ('a' , (String with: Character cr) , (String with: Character lf)) readStream.	self assert: parser nextLine = 'a'.	self assert: parser nextLine isNil! !!PRDocumentParserTest methodsFor: 'tests' stamp: 'jf 11/2/2009 10:39'!testNextCrLf4	parser initializeOn: ((String with: Character lf) , (String with: Character lf)) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil.	parser initializeOn: ((String with: Character cr) , (String with: Character cr)) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil.	parser initializeOn: ((String with: Character cr) , (String with: Character lf)) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil.	parser initializeOn: ((String with: Character lf) , (String with: Character cr)) readStream.	self assert: parser nextLine = ''.	self assert: parser nextLine = ''.	self assert: parser nextLine isNil! !!PRMatcherManagerTest commentStamp: '' prior: 34738774!A PRTextParserTest is xxxxxxxxx.Instance Variables	parser:		<Object>parser	- xxxxx!!PRMatcherManagerTest methodsFor: 'running' stamp: 'DamienCassou 2/10/2014 16:36'!setUp	manager := PRMatcherManager new! !!PRMatcherManagerTest methodsFor: 'tests' stamp: 'DamienCassou 2/10/2014 16:35'!testFindFirstAtIn1	self assert: (manager class findFirst: 'ab' at: 1 in: '') = 0.	self assert: (manager class findFirst: 'ab' at: 1 in: 'ab') = 1.	self assert: (manager class findFirst: 'ab' at: 1 in: 'cab') = 2.	self assert: (manager class findFirst: 'ab' at: 1 in: '\ab') = 0.	self assert: (manager class findFirst: 'ab' at: 1 in: 'c\ab') = 0.	self assert: (manager class findFirst: 'ab' at: 1 in: '\abab') = 4.	self assert: (manager class findFirst: 'ab' at: 1 in: 'c\abab') = 5! !!PRMatcherManagerTest methodsFor: 'tests' stamp: 'DamienCassou 2/10/2014 16:35'!testFindFirstAtIn2	self assert: (manager class findFirst: 'ab' at: 2 in: 'ab') = 0.	self assert: (manager class findFirst: 'ab' at: 2 in: 'cab') = 2.	self assert: (manager class findFirst: 'ab' at: 5 in: '\abab') = 0.	self assert: (manager class findFirst: 'ab' at: 5 in: 'c\abab') = 5! !!PRObjectTest commentStamp: 'DamienCassou 4/3/2015 14:53' prior: 34738933!Tests for expectations that must be valid on all pillar objects!!PRAbstractScriptLanguageTest commentStamp: '<historical>' prior: 34739067!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRAbstractScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 10:50'!isAbstract	^ true! !!PRAbstractScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 10:50'!actualClass	^ PRAbstractScriptLanguage! !!PRAbstractScriptLanguageTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/8/2015 11:12'!testEqueal	self assert: self instance = self instance.	self assert: self instance = self actualInstance! !!PRAbstractScriptLanguageTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/8/2015 10:49'!testHash	self assert: self instance hash = self instance copy hash! !!PRBashScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 10:58'!isAbstract	^ false! !!PRBashScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 10:58'!actualClass	^ PRBashScriptLanguage ! !!PRCSSScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 10:58'!isAbstract	^ false! !!PRCSSScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 10:59'!actualClass	^ PRCSSScriptLanguage! !!PRHTMLScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 10:59'!isAbstract	^ false! !!PRHTMLScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 10:59'!actualClass	^ PRHTMLScriptLanguage ! !!PRHTTPScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:00'!isAbstract	^ false! !!PRHTTPScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:00'!actualClass	^ PRHTTPScriptLanguage ! !!PRJSONScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:01'!isAbstract	^ false! !!PRJSONScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:01'!actualClass	^ PRJSONScriptLanguage ! !!PRJavaScriptScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:10'!isAbstract	^ false! !!PRJavaScriptScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:10'!actualClass	^ PRJavaScriptScriptLanguage ! !!PRNoScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 10:55'!isAbstract	^ false! !!PRNoScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 10:56'!actualClass	^ PRNoScriptLanguage! !!PRSQLScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:02'!isAbstract	^ false! !!PRSQLScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:02'!actualClass	^ PRSQLScriptLanguage ! !!PRSTONScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:03'!isAbstract	^ false! !!PRSTONScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:03'!actualClass	^ PRSTONScriptLanguage ! !!PRShellCommandsScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:04'!isAbstract	^ false! !!PRShellCommandsScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:04'!actualClass	^ PRShellCommandsScriptLanguage ! !!PRSmalltalkScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 10:52'!isAbstract	^ false! !!PRSmalltalkScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 10:51'!actualClass	^PRSmalltalkScriptLanguage ! !!PRUnspecifiedScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:05'!isAbstract	^ false! !!PRUnspecifiedScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:05'!actualClass	^ PRUnspecifiedScriptLanguage! !!PRUnsupportedScriptLanguageTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 11:06'!isAbstract	^ false! !!PRUnsupportedScriptLanguageTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/8/2015 11:05'!actualClass	^ PRUnsupportedScriptLanguage ! !!PRDocumentItemTest commentStamp: '<historical>' prior: 34739838!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRAbstractAnnotationTest commentStamp: '<historical>' prior: 34740615!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRAbstractAnnotationTest class methodsFor: 'testing' stamp: 'DamienCassou 4/6/2015 22:08'!isAbstract	^ self = PRAbstractAnnotationTest! !!PRAbstractAnnotationTest methodsFor: 'private' stamp: 'DamienCassou 4/3/2015 17:54'!actualClass	^ PRAbstractAnnotation! !!PRAbstractAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 13:45'!goodKey	self shouldBeImplemented ! !!PRAbstractAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 13:45'!goodParameters	^ ':', self goodKey, '=', self value! !!PRAbstractAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/7/2015 15:03'!testEqual	| param1 param2 |	param1 := Dictionary new. 	param1 at: #foo put: 'bar'.	param2 := Dictionary new.	param2 at: #bar put: 'foo'.	self deny: (self actualClass parameters: param1) = (self actualClass parameters: param2)! !!PRAbstractAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/14/2015 13:45'!testParse1Parameter	| wiki text tree |	wiki := '${' , self annoteName , self goodParameters , '}$'.	text := ''.	tree := PRDocument new		add:			(PRParagraph new add: (self actualInstance parameters: {(self goodKey -> self value)}))				yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAbstractAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/14/2015 14:28'!testParse1WrongParameter	| wiki text tree |	wiki := '${' , self annoteName , self wrongParameters , '}$'.	text := ''.	tree := PRDocument new		add:			(PRParagraph new add: (self actualInstance parameters: {(self wrongKey -> self value)}))				yourself. 	self should: [self assertWiki: wiki equalsTree: tree] raise: PRPropertyError! !!PRAbstractAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/10/2015 12:53'!testParseEmpty	| wiki text tree |	wiki := '${' , self annoteName , ':value=}$'.	text := ''.	tree := PRDocument new		add: (PRParagraph new add: (self actualInstance parameters: (PRParameterParser parse: 'value=')))		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAbstractAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 13:45'!value	self shouldBeImplemented ! !!PRAbstractAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 14:19'!wrongKey	^ self shouldBeImplemented ! !!PRAbstractAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 14:19'!wrongParameters	^ ':', self wrongKey, '=', self value! !!PRIndexAnnotationTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/14/2015 14:23'!isAbstract	^ true "TODO The class is not finish. When the class will be finish put a false."! !!PRIndexAnnotationTest methodsFor: 'private' stamp: 'DamienCassou 4/3/2015 17:56'!actualClass	^ PRIndexAnnotation! !!PRIndexAnnotationTest methodsFor: 'private' stamp: 'DamienCassou 4/3/2015 15:13'!annoteName	^ 'index'! !!PRIndexAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 13:48'!goodKey	^ 'value'! !!PRIndexAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 13:48'!value	^ 'foo'! !!PRInputFileAnnotationTest class methodsFor: 'testing' stamp: 'CyrilFerlicot 4/8/2015 13:23'!isAbstract	^ false! !!PRInputFileAnnotationTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/7/2015 15:18'!actualClass	^ PRInputFileAnnotation! !!PRInputFileAnnotationTest methodsFor: 'private' stamp: 'CyrilFerlicot 4/7/2015 15:26'!annoteName	^ 'inputFile'! !!PRInputFileAnnotationTest methodsFor: 'running' stamp: 'CyrilFerlicot 4/9/2015 16:30'!createFile1	| stream |	stream := (directory / 'foo.pillar') writeStream.	stream nextPutAll: '!!!!Hello World'.	stream close! !!PRInputFileAnnotationTest methodsFor: 'running' stamp: 'CyrilFerlicot 4/17/2015 09:37'!createFile2	| stream |	stream := (directory / 'bar.pillar') writeStream.	stream nextPutAll: '${inputFile:foo.pillar}$' , Smalltalk os pillarLineEnding , '!!!!Bye World'.	stream close! !!PRInputFileAnnotationTest methodsFor: 'running' stamp: 'CyrilFerlicot 4/17/2015 09:38'!createFile3	| stream |	stream := (directory / 'timoleon.pillar') writeStream.	stream nextPutAll: '!!!!Hello World' , Smalltalk os pillarLineEnding , 'test'.	stream close! !!PRInputFileAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 13:46'!goodKey	^ 'value'! !!PRInputFileAnnotationTest methodsFor: 'running' stamp: 'CyrilFerlicot 4/17/2015 10:05'!setUp	super setUp.	directory := FileSystem workingDirectory.	self createFile1.	self createFile2.	self createFile3! !!PRInputFileAnnotationTest methodsFor: 'running' stamp: 'CyrilFerlicot 4/17/2015 09:53'!tearDown	super tearDown.	(directory / 'foo.pillar') delete.	(directory / 'bar.pillar') delete.	(directory / 'timoleon.pillar') delete! !!PRInputFileAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/15/2015 00:01'!testInclude1File	| wiki wikiTransform text tree |	wiki := '${inputFile:foo.pillar}$'.	wikiTransform := '!!!!Hello World'.	text := 'Hello World'.	tree := PRDocument new		add:				(PRHeader new						level: 2;						add: (PRText content: 'Hello World');						yourself);		yourself.	self assertWikiTransform: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wikiTransform.	self assertTree: tree equalsText: text! !!PRInputFileAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/17/2015 09:45'!testInclude1FileContentInto1Paragraph	| wiki wikiTransform text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := 'Foo ${inputFile:timoleon.pillar}$'.	wikiTransform := 'Foo !!!!Hello World' , nLine , 'test' , nLine.	text := 'Foo Hello World' , nLine , 'test' , nLine.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Foo ');						add:								(PRHeader new										level: 2;										add: (PRText content: 'Hello World');										yourself);						add: (PRParagraph new add: (PRText content: 'test')));		yourself.	self assertWikiTransform: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wikiTransform.	self assertTree: tree equalsText: text! !!PRInputFileAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/17/2015 09:34'!testInclude1FileHeaderInto1Paragraph	| wiki wikiTransform text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := 'Foo ${inputFile:foo.pillar}$'.	wikiTransform := 'Foo !!!!Hello World', nLine.	text := 'Foo Hello World', nLine.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Foo ');						add:								(PRHeader new										level: 2;										add: (PRText content: 'Hello World');										yourself));		yourself.	self assertWikiTransform: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wikiTransform.	self assertTree: tree equalsText: text! !!PRInputFileAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/15/2015 00:01'!testInclude1FileInto1Include	| wiki wikiTransform text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '${inputFile:bar.pillar}$'.	wikiTransform := '!!!!Hello World' , nLine , '!!!!Bye World'.	text := 'Hello World' , nLine , 'Bye World'.	tree := PRDocument new		add:				(PRHeader new						level: 2;						add: (PRText content: 'Hello World');						yourself);		add:				(PRHeader new						level: 2;						add: (PRText content: 'Bye World');						yourself);		yourself.	self assertWikiTransform: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wikiTransform.	self assertTree: tree equalsText: text! !!PRInputFileAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/10/2015 13:34'!testNoInclude	| wiki text tree|	wiki := '!!!!Hello World'.	text := 'Hello World'.	tree := PRDocument new		add:							(PRHeader new								level: 2;								add: (PRText content: 'Hello World');								yourself);		yourself.	self assertWikiTransform: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRInputFileAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/14/2015 14:26'!testParse1ParameterWithoutKey	| wiki text tree wikiTransform|	wiki := '${' , self annoteName , ':', self value , '}$'.	wikiTransform := '${' , self annoteName , self goodParameters, '}$'.	text := ''.	tree := PRDocument new		add:			(PRParagraph new add: (self actualInstance parameters: {(self goodKey -> self value)}))				yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wikiTransform.	self assertTree: tree equalsText: text! !!PRInputFileAnnotationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/14/2015 14:28'!testParseTooManyParameters	| wiki text tree |	wiki := '${' , self annoteName , self goodParameters , '|foo=bar' , '}$'.	text := ''.	tree := PRDocument new		add:			(PRParagraph new add: (self actualInstance parameters: {(self goodKey -> self value)}))				yourself.	self should: [self assertWiki: wiki equalsTree: tree] raise: PRPropertyError! !!PRInputFileAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 13:46'!value	^ 'foo'! !!PRInputFileAnnotationTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/14/2015 14:20'!wrongKey	^ 'value1'! !!PRAnchorTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRAnchorTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRAnchor! !!PRAnchorTest methodsFor: 'tests-comparing' stamp: 'lr 4/5/2007 13:16'!testEqualName	self deny: (self actualClass named: 'foo') = (self actualClass named: 'bar')! !!PRAnchorTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testName	self instance name: 'zork'.	self assert: self instance name = 'zork'! !!PRAnchorTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 13:08'!testParseBasic	| wiki text tree |	wiki := '@name'.	text := ''.	tree := PRDocument new		add: (PRAnchor named: 'name');		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnchorTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:43'!testParseMultiple	| wiki text tree nLine|	nLine := Smalltalk os pillarLineEnding.	wiki := '@one' , nLine , '@two' , nLine , nLine , '@tree'.	text := ''.	tree := PRDocument new		add: (PRAnchor named: 'one');		add: (PRAnchor named: 'two');		add: PREmptyParagraph new;		add: (PRAnchor named: 'tree');		yourself.	self 		assertWiki: wiki		equalsTree: tree.	self 		assertTree: tree		equalsWiki: wiki.	self 		assertTree: tree		equalsText: text! !!PRAnchorTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 13:08'!testParseSpaces	| wiki text tree |	wiki := '@one two'.	text := ''.	tree := PRDocument new		add: (PRAnchor named: 'one two');		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnchorTest methodsFor: 'tests-instantiation' stamp: 'lr 4/5/2007 13:16'!testWith	instance := self actualClass named: 'test'.	self assert: self instance name = 'test'! !!PRAnnotatedParagraphTest class methodsFor: 'testing' stamp: 'lr 5/26/2009 22:22'!isAbstract	^ false! !!PRAnnotatedParagraphTest methodsFor: 'private' stamp: 'lr 5/26/2009 22:21'!actualClass	^ PRAnnotatedParagraph! !!PRAnnotatedParagraphTest methodsFor: 'tests-parsing' stamp: 'lr 5/26/2009 22:31'!testParseBasic	| wiki text tree |	wiki := '@@foo bar zork'.	text := 'bar zork'.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: 'foo';			add: (PRText content: 'bar zork');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:44'!testParseEmptyFollwedByPreformatted	| wiki text tree nLine|	nLine := Smalltalk os pillarLineEnding.	wiki := '@@foo' , nLine , '= bar'.	text := nLine , 'bar'.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: 'foo';			yourself);		add: (PRPreformatted new			add: (PRText content: 'bar');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'tests-parsing' stamp: 'lr 5/26/2009 22:31'!testParseOnlyAnnotation	| wiki text tree |	wiki := '@@foo'.	text := ''.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: 'foo';			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'tests-parsing' stamp: 'lr 5/26/2009 22:31'!testParseOnlyNothing	| wiki text tree |	wiki := '@@'.	text := ''.	tree := PRDocument new		add: (PRAnnotatedParagraph new			annotation: '';			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRAnnotatedParagraphTest methodsFor: 'tests-parsing' stamp: 'lr 5/26/2009 22:31'!testParseOnlyText	| wiki text tree |	wiki := '@@ foo bar'.	text := 'foo bar'.	tree := PRDocument new		add: (PRAnnotatedParagraph new			add: (PRText content: 'foo bar');			annotation: '';			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRDocumentGroupTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRDocumentGroupTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDocumentGroup! !!PRDocumentGroupTest methodsFor: 'tests-adding' stamp: 'lr 3/9/2006 11:31'!testAdd	self instance add: self fooInstance.	self assert: self instance children size = 1.	self assert: self instance children first = self fooInstance.	self instance add: self barInstance.	self assert: self instance children size = 2.	self assert: self instance children first = self fooInstance.	self assert: self instance children second = self barInstance! !!PRDocumentGroupTest methodsFor: 'tests-adding' stamp: 'lr 3/9/2006 11:31'!testAddAll	self instance addAll: self foobarInstances.	self assert: self instance children size = 2.	self assert: self instance children first = self fooInstance.	self assert: self instance children second = self barInstance! !!PRDocumentGroupTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:31'!testCopyChildren	self instance addAll: self foobarInstances.	self assert: self instance children = self instance copy children.	self deny: self instance children == self instance copy children.	self instance children		with: self instance copy children		do: [ :a :b | self assert: a = b. self deny: a == b ]! !!PRDocumentGroupTest methodsFor: 'tests-testing' stamp: 'lr 3/20/2006 19:08'!testHasChildren	self deny: self instance hasChildren.	self instance add: self fooInstance.	self assert: self instance hasChildren! !!PRDocumentGroupTest methodsFor: 'tests-accessing' stamp: 'lr 3/30/2009 21:55'!testSize	self assert: self instance size = 0.	self instance add: self fooInstance.	self assert: self instance size = 1! !!PRDocumentGroupTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testText	self instance addAll: self foobarInstances.	self assert: self instance text = 'foobar'! !!PRDocumentGroupTest methodsFor: 'tests-instantiation' stamp: 'lr 3/9/2006 11:31'!testWith	instance := self actualClass with: self fooInstance.	self assert: instance children size = 1.	self assert: instance children first = self fooInstance! !!PRDocumentGroupTest methodsFor: 'tests-instantiation' stamp: 'lr 3/9/2006 11:31'!testWithAll	instance := self actualClass withAll: self foobarInstances.	self assert: instance children size = 2.	self assert: instance children first = self fooInstance.	self assert: instance children second = self barInstance! !!PRDocumentTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRDocumentTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDocument! !!PRDocumentTest methodsFor: 'tests-parsing' stamp: 'lr 12/9/2007 17:02'!testParseEmpty	| wiki text tree |	wiki := String new.	text := String new.	tree := PRDocument new.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRDocumentTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:45'!testParseMultipleProperties	| wiki text tree document|	wiki := '{{title: The title}}', Smalltalk os pillarLineEnding , '{{authors: Someone else and me}}'.	text := String new.	tree := PRDocument new		propertyAt: 'title' put: 'The title';		propertyAt: 'authors' put: 'Someone else and me';		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text.	document := PRDocumentParser parse: wiki.	self assert: document properties equals: tree properties! !!PRDocumentTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 12/4/2013 18:01'!testParseProperties	| wiki text tree document |	wiki := '{{title: The title}}'.	text := String new.	tree := PRDocument new		propertyAt: 'title' put: 'The title';		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text.	document := PRDocumentParser parse: wiki.	self assert: document properties equals: tree properties! !!PRDocumentTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:45'!testParsePropertiesWithText	| wiki text tree document |	wiki := '{{title: The title}}' , Smalltalk os pillarLineEnding , 'foobar'.	text := 'foobar'.	tree := PRDocument new		propertyAt: 'title' put: 'The title';		add:				(PRParagraph new						add: (PRText content: 'foobar');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text.	document := PRDocumentParser parse: wiki.	self assert: document properties equals: tree properties! !!PRBoldFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRBoldFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRBoldFormat! !!PRFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRFormat! !!PRFormatTest methodsFor: 'accessing' stamp: 'lr 4/5/2007 16:08'!otherClass	^ otherClass ifNil: [ otherClass := PRFormat allSubclasses detect: [ :each | self actualClass ~= each ] ]! !!PRFormatTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 15:37'!testParseBasic	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self actualClass markup , '3'.	text := '123'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass with: (PRText content: '2'));			add: (PRText content: '3');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:32'!testParseEnd	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self actualClass markup.	text := '12'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass with: (PRText content: '2'));			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 2/10/2014 16:31'!testParseEscaped	| wiki text tree |	wiki :=  ' ', (PRTextParser escapeMarkup: self actualClass markup) , (PRTextParser escapeMarkup: self actualClass markup).	text := ' ' , self actualClass markup , self actualClass markup.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: ' ' , self actualClass markup , self actualClass markup);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 2/10/2014 16:31'!testParseIncomplete	| wiki1 wiki2 text tree |	wiki1 := '1' , self actualClass markup , '2'.	wiki2 := '1' , (PRTextParser escapeMarkup: self actualClass markup) , '2'.	text := '1' , self actualClass markup , '2'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1' , self actualClass markup , '2');			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:32'!testParseMany	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self actualClass markup , '3' , self actualClass markup , '4' , self actualClass markup , '5'.	text := '12345'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass with: (PRText content: '2'));			add: (PRText content: '3');			add: (self actualClass with: (PRText content: '4'));			add: (PRText content: '5');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 16:06'!testParseNested	| wiki text tree |	wiki := '1' , self actualClass markup , '2' , self otherClass markup , '3' , self otherClass markup , '4' , self actualClass markup , '5'.	text := '12345'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '1');			add: (self actualClass new				add: (PRText content: '2');				add: (self otherClass new					add: (PRText content: '3');					yourself);				add: (PRText content: '4');				yourself);			add: (PRText content: '5');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRFormatTest methodsFor: 'tests-parsing' stamp: 'lr 12/20/2007 14:36'!testParseNestedTight	| wiki text tree |	wiki := ' ' , self actualClass markup , self otherClass markup , self otherClass markup , self actualClass markup.	text := ' '.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: ' ');			add: (self actualClass new				add: self otherClass new				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRItalicFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRItalicFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRItalicFormat! !!PRMonospaceFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRMonospaceFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRMonospaceFormat! !!PRStrikethroughFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRStrikethroughFormatTest methodsFor: 'private' stamp: 'lr 5/31/2007 07:48'!actualClass	^ PRStrikethroughFormat! !!PRSubscriptFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRSubscriptFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRSubscriptFormat! !!PRSuperscriptFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRSuperscriptFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRSuperscriptFormat! !!PRUnderlineFormatTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRUnderlineFormatTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRUnderlineFormat! !!PRHeaderTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRHeaderTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRHeader! !!PRHeaderTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualLevel	self deny: (self actualClass new level: 1) = (self actualClass new level: 2)! !!PRHeaderTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testName	self instance level: 3.	self assert: self instance level = 3! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 10/18/2007 19:22'!testParseEmpty	| wiki text tree |	wiki := '!!'.	text := ''.	tree := PRDocument new		add: (PRHeader new			level: 1;			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel1	| wiki text tree |	wiki := '!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 1;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel2	| wiki text tree |	wiki := '!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 2;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel3	| wiki text tree |	wiki := '!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 3;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel4	| wiki text tree |	wiki := '!!!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 4;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel5	| wiki text tree |	wiki := '!!!!!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 5;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseLevel6	| wiki text tree |	wiki := '!!!!!!!!!!!!foo'.	text := 'foo'.	tree := PRDocument new		add: ((PRHeader new)			level: 6;			add: (PRText content: 'foo');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:29'!testParseMultiline	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '!!!!Hello ""This is' , nLine , 'bold"" end' , nLine , 'new'.	text := 'Hello This is' , nLine , 'bold end' , nLine , 'new'.	tree := PRDocument new		add:				(PRHeader new						level: 2;						add: (PRText content: 'Hello ');						add: (self addText: 'This is' , nLine , 'bold' to: PRBoldFormat new);						add: (PRText content: ' end');						yourself);		add: (self addText: 'new' to: PRParagraph new);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseNested	| wiki text tree |	wiki := '!!!!Hello *Link*'.	text := 'Hello Link'.	tree := PRDocument new		add: (PRHeader new			level: 2;			add: (PRText content: 'Hello ');			add: (PRInternalLink new				reference: 'Link';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHeaderTest methodsFor: 'tests-instantiation' stamp: 'lr 3/9/2006 11:31'!testWithAllLevel	instance := self actualClass withAll: self foobarInstances level: 3.	self assert: self instance children size = 2.	self assert: self instance children first = self fooInstance.	self assert: self instance children second = self barInstance.	self assert: self instance level = 3! !!PRExternalLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRExternalLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRExternalLink! !!PRExternalLinkTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!referenceString	^ 'http://www.lukas-renggli.ch'! !!PRExternalLinkTest methodsFor: 'as yet unclassified' stamp: 'lr 4/1/2009 22:29'!testIsExternal	self assert: self instance isExternal! !!PRExternalLinkTest methodsFor: 'tests-accessing' stamp: 'lr 10/20/2006 12:06'!testTitle	self instance reference: 'http://www.lukas-renggli.ch'.	self assert: self instance title = 'http://www.lukas-renggli.ch'! !!PRExternalLinkTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testUrl	self instance reference: 'http://www.lukas-renggli.ch'.	self assert: self instance url = 'http://www.lukas-renggli.ch'! !!PRMailLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRMailLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRMailLink! !!PRMailLinkTest methodsFor: 'private' stamp: 'lr 11/13/2008 14:15'!referenceString	^ 'renggli@gmail.com'! !!PRMailLinkTest methodsFor: 'tests-parsing' stamp: 'lr 9/22/2008 08:25'!testParseBogus	| wiki text tree |	wiki := '*ab12@x.com*'.	text := 'ab12@x.com'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: 'ab12@x.com';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRMailLinkTest methodsFor: 'tests-accessing' stamp: 'lr 11/13/2008 14:16'!testTitle	super testTitle.	self instance reference: self referenceString.	self assert: self instance title = self referenceString! !!PRMailLinkTest methodsFor: 'tests-accessing' stamp: 'DamienCassou 4/26/2014 18:08'!testUrl	self instance reference: self referenceString.	self assert: (self instance url beginsWith: 'mailto:').	self assert: self instance url ~= ('mailto:' , self referenceString).	self assert: self instance scrambledUrl ~= ('mailto:' , self referenceString).	self assert: self instance unscrambledUrl = ('mailto:' , self referenceString)! !!PRInternalLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRInternalLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRInternalLink! !!PRInternalLinkTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!referenceString	^ 'Page'! !!PRInternalLinkTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testAnchor	self instance anchor: 'zork'.	self assert: self instance anchor = 'zork'.	self assert: self instance hasAnchor! !!PRInternalLinkTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualAnchor	self deny: (self actualClass new anchor: 'foo'; yourself) = ((self actualClass new) anchor: 'bar'; yourself)! !!PRInternalLinkTest methodsFor: 'tests' stamp: 'lr 3/30/2009 21:35'!testIsInternal	self assert: self instance isInternal! !!PRInternalLinkTest methodsFor: 'tests-parsing' stamp: 'lr 2/7/2007 15:18'!testParseAnchoredEmbedded	| wiki text tree |	wiki := '+' , self referenceString , '@Anchor+'.	text := self actualClass new		reference: self referenceString;		anchor: 'Anchor';		embedded: true;		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				anchor: 'Anchor';				embedded: true;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRInternalLinkTest methodsFor: 'tests-parsing' stamp: 'lr 2/7/2007 15:17'!testParseAnchoredReferenced	| wiki text tree |	wiki := '*' , self referenceString , '@Anchor*'.	text := self actualClass new		reference: self referenceString;		anchor: 'Anchor';		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				anchor: 'Anchor';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRInternalLinkTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseEverything	| wiki text tree |	wiki := '*Alias>' , self referenceString , '@Anchor*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				anchor: 'Anchor';				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRInternalLinkTest methodsFor: 'tests-accessing' stamp: 'lr 10/20/2006 11:45'!testTitle	super testTitle.	self instance reference: 'page'.	self assert: self instance title = 'page'! !!PRLinkTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRLinkTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRLink! !!PRLinkTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!referenceString	self subclassResponsibility! !!PRLinkTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testAlias	self deny: self instance hasAlias.	self instance add: self fooInstance.	self assert: self instance hasAlias.	self assert: self instance alias = 'foo'.	self instance add: self barInstance.	self assert: self instance hasAlias.	self assert: self instance alias = 'foobar'! !!PRLinkTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testAnchor	self deny: self instance hasAnchor! !!PRLinkTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testEmbedded	self instance embedded: true.	self assert: self instance isEmbedded.	self instance embedded: false.	self deny: self instance isEmbedded! !!PRLinkTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualEmbedded	self deny: (self actualClass new embedded: false; yourself) = (self actualClass new embedded: true; yourself)! !!PRLinkTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualReference	self deny: (self actualClass new reference: 'foo'; yourself) = (self actualClass new reference: 'bar'; yourself)! !!PRLinkTest methodsFor: 'tests-parameters' stamp: 'CyrilFerlicot 4/13/2015 23:22'!testHasParameter	self instance parameters: (Dictionary with: 'foo' -> 'zork' with: 'bar' -> nil).	self assert: (self instance hasParameter: 'foo').	self assert: (self instance hasParameter: 'bar').	self deny: (self instance hasParameter: 'zork')! !!PRLinkTest methodsFor: 'tests' stamp: 'lr 3/30/2009 21:35'!testIsBroken	self assert: (self instance isBroken or: [ self instance isBroken not ])! !!PRLinkTest methodsFor: 'tests' stamp: 'lr 4/1/2009 22:28'!testIsExternal	self deny: self instance isExternal! !!PRLinkTest methodsFor: 'tests' stamp: 'lr 3/30/2009 21:35'!testIsInternal	self deny: self instance isInternal! !!PRLinkTest methodsFor: 'tests' stamp: 'lr 3/30/2009 21:36'!testIsLink	self assert: self instance isLink! !!PRLinkTest methodsFor: 'tests-parameters' stamp: 'CyrilFerlicot 4/13/2015 23:27'!testParameterAt	self instance parameters: (Dictionary with: 'foo' -> 'bar').	self assert: (self instance parameters at: 'foo' ifAbsent: [nil]) = 'bar'.	self assert: (self instance parameters at: 'bar' ifAbsent: [nil]) isNil! !!PRLinkTest methodsFor: 'tests-parameters' stamp: 'CyrilFerlicot 4/13/2015 23:23'!testParameterAtIfAbsent	self instance parameters: (Dictionary with: 'foo' -> 'bar').	self assert: (self instance parameters at: 'foo' ifAbsent: [ 'zork' ]) = 'bar'.	self assert: (self instance parameters at: 'bar'  ifAbsent: [ 'zork' ]) = 'zork'! !!PRLinkTest methodsFor: 'tests-parameters' stamp: 'CyrilFerlicot 4/13/2015 23:23'!testParameterAtIfPresent	self instance parameters: (Dictionary with: 'foo' -> 'bar').	self assert: (self instance parameters at: 'foo' ifPresent: [ :value | '!!' , value ]) = '!!bar'.	self assert: (self instance parameters at: 'bar' ifPresent: [ :value | '!!' , value ]) isNil! !!PRLinkTest methodsFor: 'tests-parameters' stamp: 'CyrilFerlicot 4/13/2015 23:28'!testParameterAtPut	self assert: (self instance parameters at: 'foo' put: 'bar') = 'bar'.	self assert: (self instance parameters size = 1).	self assert: (self instance parameters keys first = 'foo').	self assert: (self instance parameters values first = 'bar').	self assert: (self instance parameters at: 'foo' put: 'zork') = 'zork'.	self assert: (self instance parameters size = 1).	self assert: (self instance parameters keys first = 'foo').	self assert: (self instance parameters values first = 'zork')! !!PRLinkTest methodsFor: 'tests-parameters' stamp: 'CyrilFerlicot 4/13/2015 23:22'!testParameterCopy	| copy |	self instance parameters at: 'class' put: 'active'.	copy := self instance copy.	copy parameters at: 'class' put: 'inactive'.	copy parameters at: 'foo' put: 'bar'.		self assert: (self instance parameters at: 'class') = 'active'.	self deny: (self instance hasParameter: 'foo').		self assert: (copy parameters at: 'class') = 'inactive'.	self assert: (copy parameters at: 'foo') = 'bar'! !!PRLinkTest methodsFor: 'tests-parameters' stamp: 'lr 8/27/2007 10:22'!testParameters	self assert: self instance parameters isEmpty.	self instance parameters: (Array with: 'foo' -> 'bar').	self assert: self instance parameters size = 1! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseAliased	| wiki text tree |	wiki := '*Alias>' , self referenceString , '*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'lr 2/2/2009 16:01'!testParseAliasedEmpty	| wiki text tree |	wiki := '*>' , self referenceString , '*'.	text := ''.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: '');				reference: self referenceString;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'lr 2/7/2007 15:06'!testParseBasic	| wiki text tree |	wiki := '*' , self referenceString , '*'.	text := self actualClass new		reference: self referenceString;		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'JohnCBorden 7/23/2014 06:41'!testParseEasynessEmbedded	| wiki1 wiki2 text tree |	wiki1 := '++' , self referenceString.	wiki2 := '\+' , Smalltalk os pillarLineEnding , '\+' , self referenceString.	text := '+' , Smalltalk os pillarLineEnding , '+' , self referenceString.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: '+');						add: PRLineBreak new;						add: (PRText content: '+' , self referenceString);						yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'JohnCBorden 7/23/2014 06:41'!testParseEasynessReferenced	| wiki1 wiki2 text tree |	wiki1 := '**' , self referenceString.	wiki2 := '\*' , Smalltalk os pillarLineEnding , '\*' , self referenceString.	text := '*' , Smalltalk os pillarLineEnding , '*' , self referenceString.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: '*');						add: PRLineBreak new;						add: (PRText content: '*' , self referenceString);						yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseEmbeddedAliased	| wiki text tree |	wiki := '+Alias>' , self referenceString , '+'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				embedded: true;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'lr 2/7/2007 15:10'!testParseEmbeddedBasic	| wiki text tree |	wiki := '+' , self referenceString , '+'.	text := self actualClass new		reference: self referenceString;		embedded: true;		title.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				reference: self referenceString;				embedded: true;				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 1/9/2014 10:50'!testParseEmptyEmbedded	| wiki1 wiki2 text tree |	wiki1 := '++'.	wiki2 := '\+\+'.	text := '++'.	tree := PRDocument new		add: (PRParagraph new				add: (PRText content: '++');				yourself);		yourself.	self 		assertWiki: wiki1		equalsTree: tree.	self 		assertWiki: wiki2		equalsTree: tree.	self 		assertTree: tree		equalsWiki: wiki2.	self 		assertTree: tree		equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 1/9/2014 10:50'!testParseEmptyReferenced	| wiki1 wiki2 text tree |	wiki1 := '**'.	wiki2 := '\*\*'.	text := '**'.	tree := PRDocument new		add: (PRParagraph new				add: (PRText content: '**');				yourself);		yourself.	self 		assertWiki: wiki1		equalsTree: tree.	self 		assertWiki: wiki2		equalsTree: tree.	self 		assertTree: tree		equalsWiki: wiki2.	self 		assertTree: tree		equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'JohnCBorden 7/23/2014 06:42'!testParseEscaped	| wiki text tree |	wiki := 'Star \*' , self referenceString , '\*' , Smalltalk os pillarLineEnding , 'Cross \+' , self referenceString , '\+'.	text := 'Star *' , self referenceString , '*' , Smalltalk os pillarLineEnding , 'Cross +' , self referenceString , '+'.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Star *' , self referenceString , '*');						add: PRLineBreak new;						add: (PRText content: 'Cross +' , self referenceString , '+');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'lr 12/21/2009 13:54'!testParseParameters	| wiki text tree |	wiki := '*Alias>' , self referenceString , '|a=1|b=2|c*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				parameters: (Array					with: 'a' -> '1'					with: 'b' -> '2'					with: 'c' -> nil);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'lr 9/12/2007 18:18'!testParseParametersEmpty	| wiki text tree |	wiki := '*Alias>' , self referenceString , '|a||b|*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				parameters: (Array					with: 'a' -> nil					with: 'b' -> nil);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/14/2015 10:00'!testParseParametersEscaped	| wiki text tree |	wiki := '*Alias>' , self referenceString , '|2=\|\=|\|\==1*'.	text := 'Alias'.	tree := PRDocument new		add: (PRParagraph new			add: (self actualClass new				add: (PRText content: 'Alias');				reference: self referenceString;				parameters: (Dictionary					with: '|=' -> '1'					with: '2' -> '|=');				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLinkTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testReference	self instance reference: 'zork'.	self assert: self instance reference = 'zork'! !!PRLinkTest methodsFor: 'tests-accessing' stamp: 'lr 10/20/2006 11:43'!testTitle	self deny: self instance title notNil! !!PRListItemTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRListItemTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRListItem! !!PRDefinitionDataTest class methodsFor: 'testing' stamp: 'lr 12/30/2007 21:37'!isAbstract	^ false! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 21:37'!actualClass	^ PRDefinitionList! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:30'!listItemClass	^ PRDataItem! !!PRDefinitionDataTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/7/2015 16:47'!testParseBug	| wiki1 wiki2 tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki1 := '::1' , nLine , '::-2'.	wiki2 := ':' , nLine , '::1' , nLine , '::-2'.	tree := PRDocument new		add:				(PRDefinitionList new						add:								(PRDataItem new										add:												(PRDefinitionList new														add:																(PRDataItem new																		add: (PRText content: '1');																		add:																				(PRUnorderedList new																						add:																								(PRListItem new																										add: (PRText content: '2');																										yourself);																						yourself);																		yourself);														yourself);										yourself);						yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2! !!PRDefinitionDataTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/7/2015 16:48'!testParseMixed	| wiki tree |	wiki := ';1' , Smalltalk os pillarLineEnding , ':2'.	tree := PRDocument new		add:				(PRDefinitionList new						add:								(PRTermItem new										add: (PRText content: '1');										yourself);						add:								(PRDataItem new										add: (PRText content: '2');										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:33'!textString: anObject level: anInteger	^ (super textString: anObject level: anInteger) , '  '! !!PRDefinitionDataTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:30'!wikiString	^ ':'! !!PRDefinitionTermTest class methodsFor: 'testing' stamp: 'lr 12/30/2007 23:29'!isAbstract	^ false! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:29'!actualClass	^ PRDefinitionList! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:30'!listItemClass	^ PRTermItem! !!PRDefinitionTermTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/7/2015 16:48'!testParseMixed	| wiki tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := ';1' , nLine , ';2' , nLine , ':3' , nLine , ':4'.	tree := PRDocument new		add:				(PRDefinitionList new						add:								(PRTermItem new										add: (PRText content: '1');										yourself);						add:								(PRTermItem new										add: (PRText content: '2');										yourself);						add:								(PRDataItem new										add: (PRText content: '3');										yourself);						add:								(PRDataItem new										add: (PRText content: '4');										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:33'!textString: anObject level: anInteger	^ (super textString: anObject level: anInteger) , '- '! !!PRDefinitionTermTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:29'!wikiString	^ ';'! !!PRListTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRListTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRList! !!PRListTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:28'!listItemClass	^ PRListItem! !!PRListTest methodsFor: 'private' stamp: 'lr 12/30/2007 23:28'!listItemWithText: aString	^ self listItemClass new		add: (PRText content: aString);		yourself! !!PRListTest methodsFor: 'tests-parsing' stamp: 'lr 12/30/2007 23:31'!testParseEmpty	| wiki text tree |	wiki := self wikiString.	text := self textString: 1 level: 1.	tree := PRDocument new		add: (self actualClass new			add: self listItemClass new;			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRListTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:31'!testParseFlat	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := self wikiString , '1st' , nLine , self wikiString , '2nd' , nLine , self wikiString , '3rd'.	text := (self textString: 1 level: 1) , '1st' , nLine , (self textString: 2 level: 1) , '2nd' , nLine		, (self textString: 3 level: 1) , '3rd'.	tree := PRDocument new		add:				(self actualClass new						add: (self listItemWithText: '1st');						add: (self listItemWithText: '2nd');						add: (self listItemWithText: '3rd');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRListTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:32'!testParseMultiple	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := self wikiString , '1st' , nLine , self wikiString , '2nd' , nLine , nLine , self wikiString , '3rd'.	text := (self textString: 1 level: 1) , '1st' , nLine , (self textString: 2 level: 1) , '2nd' , nLine , nLine		, (self textString: 1 level: 1) , '3rd'.	tree := PRDocument new		add:				(self actualClass new						add: (self listItemWithText: '1st');						add: (self listItemWithText: '2nd');						yourself);		add: PREmptyParagraph new;		add:				(self actualClass new						add: (self listItemWithText: '3rd');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRListTest methodsFor: 'private' stamp: 'lr 12/20/2007 23:21'!textString: anObject level: anInteger	^ (2 to: anInteger) inject: '' into: [ :result :each | result , '	' ]! !!PRListTest methodsFor: 'private' stamp: 'lr 2/7/2007 16:22'!wikiString	self subclassResponsibility! !!PROrderedListTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PROrderedListTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PROrderedList! !!PROrderedListTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:48'!testParseMixed	| wiki tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '#1' , nLine , '#2' , nLine , '-3'.	tree := PRDocument new		add:				(PROrderedList new						add: (self listItemWithText: '1');						add: (self listItemWithText: '2');						yourself);		add:				(PRUnorderedList new						add: (self listItemWithText: '3');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PROrderedListTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:49'!testParseNested	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := self wikiString , '1' , nLine , self wikiString , self wikiString , '1.1' , nLine , self wikiString		, self wikiString , '1.2'.	text := (self textString: 1 level: 1) , '1' , nLine , (self textString: 1 level: 2) , '1.1' , nLine		, (self textString: 2 level: 2) , '1.2'.	tree := PRDocument new		add:				(self actualClass new						add:								(PRListItem new										add: (PRText content: '1');										add:												(self actualClass new														add: (self listItemWithText: '1.1');														add: (self listItemWithText: '1.2');														yourself);										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PROrderedListTest methodsFor: 'private' stamp: 'jf 9/30/2009 01:10'!textString: anObject level: anInteger 	^ (super 		textString: anObject		level: anInteger) , anObject greaseString , '. '! !!PROrderedListTest methodsFor: 'private' stamp: 'lr 12/20/2007 20:13'!wikiString	^ '#'! !!PRUnorderedListTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRUnorderedListTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRUnorderedList! !!PRUnorderedListTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:51'!testParseMixed	| wiki tree text nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '#1' , nLine , '##2' , nLine , '###3' , nLine , '#-4' , nLine , '#-5' , nLine , '##6' , nLine , '#7'.	text := '1. 1' , nLine , '	1. 2' , nLine , '		1. 3' , nLine , '	* 4' , nLine , '	* 5' , nLine , '	1. 6' , nLine		, '2. 7'.	tree := PRDocument new		add:				(PROrderedList new						add:								(PRListItem new										add: (PRText content: '1');										add:												(PROrderedList new														add:																(PRListItem new																		add: (PRText content: '2');																		add:																				(PROrderedList new																						add: (self listItemWithText: '3');																						yourself);																		yourself);														yourself);										add:												(PRUnorderedList new														add: (self listItemWithText: '4');														add: (self listItemWithText: '5');														yourself);										add:												(PROrderedList new														add: (self listItemWithText: '6');														yourself);										yourself);						add: (self listItemWithText: '7');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRUnorderedListTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:51'!testParseNested	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := self wikiString , '1' , nLine , self wikiString , self wikiString , '1.1' , nLine , self wikiString		, self wikiString , self wikiString , '1.1.1'.	text := (self textString: 1 level: 1) , '1' , nLine , (self textString: 1 level: 2) , '1.1' , nLine		, (self textString: 1 level: 3) , '1.1.1'.	tree := PRDocument new		add:				(self actualClass new						add:								(PRListItem new										add: (PRText content: '1');										add:												(self actualClass new														add:																(PRListItem new																		add: (PRText content: '1.1');																		add:																				(self actualClass new																						add: (self listItemWithText: '1.1.1');																						yourself);																		yourself);														yourself);										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRUnorderedListTest methodsFor: 'private' stamp: 'lr 12/20/2007 23:20'!textString: anObject level: anInteger	^ (super textString: anObject level: anInteger) , '* '! !!PRUnorderedListTest methodsFor: 'private' stamp: 'lr 2/7/2007 16:23'!wikiString	^ '-'! !!PREmptyParagraphTest methodsFor: 'private' stamp: 'DamienCassou 3/20/2014 10:46'!actualClass	^ PREmptyParagraph! !!PREmptyParagraphTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/7/2015 16:53'!testParseEmptyParagraphAtBeginning	| wiki text tree content |	content := 'Lorem ipsum dolor sit amet.'.	wiki := Smalltalk os pillarLineEnding , content.	text := wiki.	tree := PRDocument new		add: PREmptyParagraph new;		add:				(PRParagraph new						add: (PRText content: content);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PREmptyParagraphTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/7/2015 16:53'!testParseEmptyParagraphInTheMiddle	| wiki text tree content nLine|	nLine := Smalltalk os pillarLineEnding.	content := 'Lorem ipsum dolor sit amet.'.	wiki := content , nLine , nLine , content.	text := wiki.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: content);						yourself);		add: PREmptyParagraph new;		add:				(PRParagraph new						add: (PRText content: content);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRParagraphTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRParagraph! !!PRParagraphTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:51'!testParseEmptyLineAtBeginning	| wiki text tree |	wiki := '' , Smalltalk os pillarLineEnding , 'Lorem ipsum dolor sit amet.'.	text := wiki.	tree := PRDocument new		add: PREmptyParagraph new;		add:				(PRParagraph new						add: (PRText content: 'Lorem ipsum dolor sit amet.');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest methodsFor: 'tests-parsing' stamp: 'lr 12/9/2007 09:38'!testParseOneLine	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: wiki);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:52'!testParseThreeEmptyLines	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := 'Lorem ipsum dolor sit amet.' , nLine , nLine , nLine , 'Nulla mattis elementum nulla.'.	text := wiki.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Lorem ipsum dolor sit amet.');						yourself);		add: PREmptyParagraph new;		add: PREmptyParagraph new;		add:				(PRParagraph new						add: (PRText content: 'Nulla mattis elementum nulla.');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:52'!testParseTwoConsecutiveNonTextLines	| wiki text tree sentence title nLine |	nLine := Smalltalk os pillarLineEnding.	sentence := 'sentence'.	title := 'title'.	wiki := sentence , nLine , '!!' , title.	text := sentence , nLine , title.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: sentence);						yourself);		add:				(PRHeader new						level: 1;						add: (PRText content: title);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRParagraphTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:52'!testParseTwoEmptyLines	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := 'Lorem ipsum dolor sit amet.' , nLine , nLine , 'Nulla mattis elementum nulla.'.	text := wiki.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Lorem ipsum dolor sit amet.');						yourself);		add: PREmptyParagraph new;		add:				(PRParagraph new						add: (PRText content: 'Nulla mattis elementum nulla.');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRPreformattedTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRPreformatted! !!PRPreformattedTest methodsFor: 'tests-parsing' stamp: 'DamienPollet 2/20/2014 18:47'!testParseBasic	| wiki text tree |	wiki := '= Line'.	text := 'Line'.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: 'Line');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'tests-parsing' stamp: 'DamienPollet 2/20/2014 18:47'!testParseEmpty	| wiki text tree |	wiki := '= '.	text := ''.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: '');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:54'!testParseMultiple	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '= line 1.1' , nLine , '= line 1.2' , nLine , nLine , '= line 2.1'.	text := 'line 1.1' , nLine , 'line 1.2' , nLine , nLine , 'line 2.1'.	tree := PRDocument new		add:				(PRPreformatted new						add: (PRText content: 'line 1.1');						add: (PRText content: 'line 1.2');						yourself);		add: PREmptyParagraph new;		add:				(PRPreformatted new						add: (PRText content: 'line 2.1');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:55'!testParseSpaces	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '=    A line with 3 spaces' , nLine , '= 	A line with a tab'.	text := '   A line with 3 spaces' , nLine , '	A line with a tab'.	tree := PRDocument new		add:				(PRPreformatted new						add: (PRText content: '   A line with 3 spaces');						add: (PRText content: '	A line with a tab');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRPreformattedTest methodsFor: 'tests-parsing' stamp: 'DamienPollet 2/20/2014 18:48'!testParseSpecials	| wiki text tree |	wiki := '= |, {, }, *, *, [, ||, |{, |}, +, +'.	text := '|, {, }, *, *, [, ||, |{, |}, +, +'.	tree := PRDocument new		add: (PRPreformatted new			add: (PRText content: '|, {, }, *, *, [, ||, |{, |}, +, +');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTableCellTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRTableCell! !!PRTableCellTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testAlign	self instance align: #right.	self assert: self instance align = #right! !!PRTableCellTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testBeAlignedCenter	self instance beAlignedCenter.	self assert: self instance align = #center.	self assert: self instance isAlignedCenter.	self deny: self instance isAlignedLeft.	self deny: self instance isAlignedRight! !!PRTableCellTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testBeAlignedLeft	self instance beAlignedLeft.	self assert: self instance align = #left.	self deny: self instance isAlignedCenter.	self assert: self instance isAlignedLeft.	self deny: self instance isAlignedRight! !!PRTableCellTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testBeAlignedRight	self instance beAlignedRight.	self assert: self instance align = #right.	self deny: self instance isAlignedCenter.	self deny: self instance isAlignedLeft.	self assert: self instance isAlignedRight! !!PRTableCellTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEqualAlign	self deny: self actualClass new beAlignedRight				= self actualClass new beAlignedCenter.	self deny: self actualClass new beAlignedCenter				= self actualClass new beAlignedLeft! !!PRTableCellTest methodsFor: 'tests-accessing' stamp: 'lr 8/14/2008 08:59'!testHeading	self deny: self instance heading.	self deny: self instance isHeading.		self instance heading: true.	self assert: self instance heading.	self assert: self instance isHeading.		self instance heading: false.	self deny: self instance heading.	self deny: self instance isHeading! !!PRTableCellTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:34'!testParseAlign1	| wiki text tree |	wiki := '|{left||center|}right'.	text := 'left	center	right'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					beAlignedCenter;					add: (PRText content: 'center');					yourself);				add: (PRTableCell new					beAlignedRight;					add: (PRText content: 'right');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:34'!testParseAlign2	| wiki text tree |	wiki := '|}right|none|{left|none'.	text := 'right	none	left	none'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beAlignedRight;					add: (PRText content: 'right');					yourself);				add: (PRTableCell new					add: (PRText content: 'none');					yourself);				add: (PRTableCell new					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					add: (PRText content: 'none');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:34'!testParseEncoding	| wiki text tree |	wiki := '|*link*|+embedded+|foo{}'.	text := 'link	embedded	foo{}'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRInternalLink new						reference: 'link';						yourself);					yourself);				add: (PRTableCell new					add: (PRInternalLink new						reference: 'embedded';						embedded: true;						yourself);					yourself);				add: (PRTableCell new					add: (PRText content: 'foo{}');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'tests-parsing' stamp: 'lr 8/14/2008 09:17'!testParseHeading1	| wiki text tree |	wiki := '|!!head|{!!left||!!center|}!!right'.	text := 'head	left	center	right'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beHeading;					add: (PRText content: 'head');					yourself);				add: (PRTableCell new					beHeading;					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					beHeading;					beAlignedCenter;					add: (PRText content: 'center');					yourself);				add: (PRTableCell new					beHeading;					beAlignedRight;					add: (PRText content: 'right');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableCellTest methodsFor: 'tests-parsing' stamp: 'lr 8/14/2008 09:17'!testParseHeading2	| wiki1 wiki2 text tree |	wiki1 := '|!!head|!!{left|!!|center|!!}right'.	wiki2 := '|!!head|{!!left||!!center|}!!right'.	text := 'head	left	center	right'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					beHeading;					add: (PRText content: 'head');					yourself);				add: (PRTableCell new					beHeading;					beAlignedLeft;					add: (PRText content: 'left');					yourself);				add: (PRTableCell new					beHeading;					beAlignedCenter;					add: (PRText content: 'center');					yourself);				add: (PRTableCell new					beHeading;					beAlignedRight;					add: (PRText content: 'right');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRTableRowTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTableRowTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRTableRow! !!PRTableRowTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testCount	self instance add: PRTableCell new.	self assert: self instance columnCount = 1.	self instance add: PRTableCell new.	self assert: self instance columnCount = 2! !!PRTableRowTest methodsFor: 'tests-accessing' stamp: 'DamienCassou 6/3/2014 10:38'!testRowWithHeadingCellIsHeading	self instance		add:			(self				addText: 'foo'				to:					(PRTableCell new						beHeading;						yourself)).	self assert: self instance isHeading! !!PRTableRowTest methodsFor: 'tests-accessing' stamp: 'DamienCassou 6/3/2014 10:37'!testRowWithHeadingCellsAndOneEmptyCellIsHeading	self instance		add:				(self						addText: 'foo'						to:							(PRTableCell new								beHeading;								yourself));		add: PRTableCell new.	self assert: self instance isHeading! !!PRTableRowTest methodsFor: 'tests-accessing' stamp: 'DamienCassou 6/3/2014 10:39'!testRowWithOnlyEmptyCellIsNotHeading	self instance		add: PRTableCell new;		add: PRTableCell new.	self deny: self instance isHeading! !!PRTableTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTableTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRTable! !!PRTableTest methodsFor: 'accessing' stamp: 'lr 7/13/2011 11:50'!expectedFailures	^ #(testParseWithPreformattedAndLinkWithParameters)! !!PRTableTest methodsFor: 'tests-accessing' stamp: 'lr 3/21/2006 18:43'!testCount	self instance add: (PRTableRow new add: PRTableCell new; yourself).	self assert: self instance rowCount = 1; assert: self instance columnCount = 1.	self instance add: (PRTableRow new add: PRTableCell new; add: PRTableCell new; yourself).	self assert: self instance rowCount = 2; assert: self instance columnCount = 2.	self instance add: (PRTableRow new add: PRTableCell new; yourself).	self assert: self instance rowCount = 3; assert: self instance columnCount = 2! !!PRTableTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:34'!testParseBasic	| wiki text tree |	wiki := '|cell'.	text := 'cell'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRText content: 'cell');					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:55'!testParseSquare	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '|a11|a12' , nLine , '|a21|a22'.	text := 'a11	a12' , nLine , 'a21	a22'.	tree := PRDocument new		add:				(PRTable new						add:								(PRTableRow new										add:												(PRTableCell new														add: (PRText content: 'a11');														yourself);										add:												(PRTableCell new														add: (PRText content: 'a12');														yourself);										yourself);						add:								(PRTableRow new										add:												(PRTableCell new														add: (PRText content: 'a21');														yourself);										add:												(PRTableCell new														add: (PRText content: 'a22');														yourself);										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:55'!testParseTriangle	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '|a11' , nLine , '|a21|a22' , nLine , '|a31|a32|a33'.	text := 'a11' , nLine , 'a21	a22' , nLine , 'a31	a32	a33'.	tree := PRDocument new		add:				(PRTable new						add:								(PRTableRow new										add:												(PRTableCell new														add: (PRText content: 'a11');														yourself);										yourself);						add:								(PRTableRow new										add:												(PRTableCell new														add: (PRText content: 'a21');														yourself);										add:												(PRTableCell new														add: (PRText content: 'a22');														yourself);										yourself);						add:								(PRTableRow new										add:												(PRTableCell new														add: (PRText content: 'a31');														yourself);										add:												(PRTableCell new														add: (PRText content: 'a32');														yourself);										add:												(PRTableCell new														add: (PRText content: 'a33');														yourself);										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTableTest methodsFor: 'tests-parsing' stamp: 'damiencassou 7/23/2009 16:35'!testParseWithPreformattedAndLinkWithParameters	| wiki tree |	wiki := '|==\+link\|a\+==|'.	tree := PRDocument new		add: (PRTable new			add: (PRTableRow new				add: (PRTableCell new					add: (PRMonospaceFormat new						add: (PRText content: '+link|a+');						yourself);					yourself);				add: (PRTableCell new					yourself);				yourself);			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.! !!PRDocumentItemTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRDocumentItem! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'DamienCassou 2/10/2014 14:39'!addText: aString to: aDocumentItem	^ aDocumentItem		add: (PRText content: aString);		yourself! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'DamienCassou 2/27/2014 11:33'!assertTree: aDocument equalsText: aString	self assert: (PRTextWriter write: aDocument) = aString description: aString resumable: true! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'DamienCassou 2/27/2014 11:33'!assertTree: aDocument equalsWiki: aString	"Asswert that traversing aDocument using the wiki writer results in aString."	self assert: (PRPillarWriter write: aDocument) = aString description: aString resumable: false! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'lr 8/27/2007 10:39'!assertWiki: aString equalsTree: aDocument	"Assert that parsing aString results in aDocument."	self		assert: (PRDocumentParser parse: aString) = aDocument		description: aString resumable: true! !!PRDocumentItemTest methodsFor: 'utilities' stamp: 'CyrilFerlicot 4/17/2015 10:04'!assertWikiTransform: aString equalsTree: aDocument	"Assert that parsing aString results in aDocument."	| config |	config := PRCocoonConfiguration new.	self		assert: (PRFileInclusion new configuration: config; start: (PRDocumentParser parse: aString); topNode) = aDocument		description: aString resumable: true! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 4/5/2007 14:32'!barInstance	^ PRText content: 'bar'! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 4/5/2007 14:32'!fooInstance	^ PRText content: 'foo'! !!PRDocumentItemTest methodsFor: 'private' stamp: 'lr 3/9/2006 11:31'!foobarInstances	^ Array with: self fooInstance with: self barInstance! !!PRDocumentItemTest methodsFor: 'tests-copying' stamp: 'lr 3/9/2006 11:31'!testCopy	self assert: self instance = self instance copy.	self assert: self instance hash = self instance copy hash.	self deny: self instance == self instance copy! !!PRDocumentItemTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEqueal	self assert: self instance = self instance.	self assert: self instance = self actualInstance! !!PRDocumentItemTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEquealNil	self deny: self instance isNil! !!PRDocumentItemTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testEquealOther	self deny: self instance = self fooInstance.	self deny: self instance = self barInstance! !!PRDocumentItemTest methodsFor: 'tests-testing' stamp: 'lr 3/9/2006 11:31'!testHasChildren	self deny: self instance hasChildren! !!PRDocumentItemTest methodsFor: 'tests-comparing' stamp: 'lr 3/9/2006 11:31'!testHash	self assert: self instance hash = self instance copy hash! !!PRDocumentItemTest methodsFor: 'tests' stamp: 'lr 3/30/2009 21:36'!testIsLink	self deny: self instance isLink! !!PRDocumentItemTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testText	self assert: self instance text isString! !!PRHorizontalRuleTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRHorizontalRuleTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRHorizontalRule! !!PRHorizontalRuleTest methodsFor: 'tests-parsing' stamp: 'lr 2/7/2007 16:42'!testParseBasic	| wiki text tree |	wiki := '_'.	text := self textString.	tree := PRDocument new		add: PRHorizontalRule new;		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 15:59'!testParseLink	| wiki1 wiki2 text tree |	wiki1 := '_ *link*'.	wiki2 := '\_ *link*'.	text := '_ link'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '_ ');			add: (PRInternalLink new				reference: 'link';				yourself);			yourself);		yourself.	self assertWiki: wiki1 equalsTree: tree.	self assertWiki: wiki2 equalsTree: tree.	self assertTree: tree equalsWiki: wiki2.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 16:56'!testParseMultiple	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '_' , nLine , '_' , nLine , nLine , '_'.	text := self textString , nLine , self textString , nLine , nLine , self textString.	tree := PRDocument new		add: PRHorizontalRule new;		add: PRHorizontalRule new;		add: PREmptyParagraph new;		add: PRHorizontalRule new;		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:33'!testParseParagraph	| wiki text tree |	wiki := '\_ is parsed as paragraph'.	text := '_ is parsed as paragraph'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '_ is parsed as paragraph');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'tests-parsing' stamp: 'nfr 9/26/2007 09:55'!testParseSpaces	| wiki text tree |	wiki := '_       '.	text := self textString.	tree := PRDocument new		add: PRHorizontalRule new;		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: '_'.	self assertTree: tree equalsText: text! !!PRHorizontalRuleTest methodsFor: 'private' stamp: 'lr 2/7/2007 16:42'!textString	^ String new: 40 withAll: $-! !!PRLineBreakTest class methodsFor: 'testing' stamp: 'lr 12/9/2007 09:24'!isAbstract	^ false! !!PRLineBreakTest methodsFor: 'private' stamp: 'lr 12/9/2007 09:24'!actualClass	^ PRLineBreak! !!PRLineBreakTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:19'!testParseOneEmptyLine	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := 'Lorem ipsum dolor sit amet.' , nLine , nLine , 'Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Lorem ipsum dolor sit amet.');						yourself);		add: PREmptyParagraph new;		add: (PRParagraph new add: (PRText content: 'Nulla quis urna.') yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLineBreakTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:19'!testParseTreeLines	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := 'Lorem ipsum dolor sit amet.' , nLine , 'Nulla quis urna.' , nLine , 'Vestibulum turpis.'.	text := wiki.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Lorem ipsum dolor sit amet.');						add: PRLineBreak new;						add: (PRText content: 'Nulla quis urna.');						add: PRLineBreak new;						add: (PRText content: 'Vestibulum turpis.');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRLineBreakTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:19'!testParseTwoEmptyLines	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := 'Lorem ipsum dolor sit amet.' , nLine , nLine , nLine , 'Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Lorem ipsum dolor sit amet.');						yourself);		add: PREmptyParagraph new;		add: PREmptyParagraph new;		add: (PRParagraph new add: (PRText content: 'Nulla quis urna.') yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: text.	self assertTree: tree equalsText: text! !!PRLineBreakTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:20'!testParseTwoLines	| wiki text tree |	wiki := 'Lorem ipsum dolor sit amet.' , Smalltalk os pillarLineEnding , 'Nulla quis urna.'.	text := wiki.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: 'Lorem ipsum dolor sit amet.');						add: PRLineBreak new;						add: (PRText content: 'Nulla quis urna.') yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRCommentedLineTest methodsFor: 'private' stamp: 'DamienCassou 3/5/2014 17:14'!actualClass	^ PRCommentedLine! !!PRCommentedLineTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 3/5/2014 17:17'!testParseBasic	| wiki text tree |	wiki := '%some comment'.	text := ''.	tree := PRDocument new		add: (PRCommentedLine content: 'some comment');		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRCommentedLineTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:21'!testParseDontInterruptLists	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '#item one' , nLine , '##item one-point-one' , nLine , '%comment' , nLine , '##item one-point-two'.	text := '1. item one' , nLine , '	1. item one-point-one' , nLine , '	2. item one-point-two'.	tree := PRDocument new		add:				(PROrderedList new						add:								(PRListItem new										add: (PRText content: 'item one');										add:												(PROrderedList new														add:																(PRListItem new																		add: (PRText content: 'item one-point-one');																		add: (PRCommentedLine content: 'comment');																		yourself);														add:																(PRListItem new																		add: (PRText content: 'item one-point-two');																		yourself);														yourself);										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRCommentedLineTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 3/5/2014 17:23'!testParseDontParseContent	| wiki text tree |	wiki := '%some *comment*'.	text := ''.	tree := PRDocument new		add: (PRCommentedLine content: 'some *comment*');		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest class methodsFor: 'testing' stamp: 'lr 2/2/2010 15:40'!isAbstract	^ false! !!PRRawTest methodsFor: 'private' stamp: 'DamienCassou 11/20/2013 17:18'!actualClass	^ PRRaw! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseBasic	| wiki text tree |	wiki := '{{{abc}}}'.	text := 'abc'.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'abc');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseEmpty	| wiki text tree |	wiki := '{{{}}}'.	text := ''.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: '');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:39'!testParseMultiline	| wiki text tree nLine|	nLine := Smalltalk os pillarLineEnding.	wiki := '{{{a' , nLine , 'b}}}'.	text := 'a' , nLine , 'b'.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'a' , nLine , 'b');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseMultiple	| wiki text tree |	wiki := '{{{a}}}b{{{c}}}'.	text := 'abc'.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'a');			add: (PRText content: 'b');			add: (PRRaw content: 'c');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:41'!testParseMultipleMultiline	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '{{{a' , nLine , 'b}}}c{{{d' , nLine , 'e}}}'.	text := 'a' , nLine , 'bcd' , nLine , 'e'.	tree := PRDocument new		add:				(PRParagraph new						add: (PRRaw content: 'a' , nLine , 'b');						add: (PRText content: 'c');						add: (PRRaw content: 'd' , nLine , 'e');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseStrange	| wiki text tree |	wiki := '{{{a{{||}}b}}}'.	text := 'a{{||}}b'.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'a{{||}}b');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseTypeHtml	| wiki text tree |	wiki := '{{{html:abc}}}'.	text := ''.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'abc' type: 'html');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseTypeInvalid	| wiki text tree |	wiki := '{{{invalid:abc}}}'.	text := 'invalid:abc'.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'invalid:abc');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseTypeLatex	| wiki text tree |	wiki := '{{{latex:abc}}}'.	text := ''.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'abc' type: 'latex');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 11/20/2013 17:18'!testParseTypeText	| wiki text tree |	wiki := '{{{text:abc}}}'.	text := 'abc'.	tree := PRDocument new		add: (PRParagraph new			add: (PRRaw content: 'abc' type: 'text');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRRawTest methodsFor: 'tests-accessing' stamp: 'lr 2/2/2010 16:01'!testText	self instance text: 'zork'.	self assert: self instance text = 'zork'! !!PRRawTest methodsFor: 'tests-accessing' stamp: 'lr 9/25/2011 13:37'!testType	self instance type: 'html'.	self assert: self instance type = 'html'! !!PRScriptTest commentStamp: '' prior: 34741368!A PRRawTest is xxxxxxxxx.!!PRScriptTest class methodsFor: 'testing' stamp: 'DamienCassou 1/8/2014 17:57'!isAbstract	^ false! !!PRScriptTest methodsFor: 'private' stamp: 'DamienCassou 1/8/2014 17:57'!actualClass	^ PRScript! !!PRScriptTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/10/2015 11:00'!testEqualScript	self deny: (self actualClass content: 'foo') = (self actualClass content: 'bar').	self assert: (self actualClass content: 'foo') = (self actualClass content: 'foo')! !!PRScriptTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/10/2015 11:01'!testEqualScriptWithLanguage	| param1 param2 |	param1 := PRParameterParser parse: 'language=smalltalk'.	param2 := PRParameterParser parse: 'language=html'.	self deny: (self actualClass content: 'foo' parameters: param1) = (self actualClass content: 'foo' parameters: param2).	self assert: (self actualClass content: 'foo' parameters: param1) = (self actualClass content: 'foo' parameters: param1)! !!PRScriptTest methodsFor: 'tests-comparing' stamp: 'CyrilFerlicot 4/7/2015 14:09'!testHash	| a b |	a := self actualClass content: 'foo'.	b := self actualClass content: 'foo'.	self assert: a hash = a copy hash.	self assert: a hash = b hash! !!PRScriptTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 1/10/2014 16:13'!testParseLanguage! !!PRScriptTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/8/2015 13:08'!testParseRealLanguage	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '[[[language=smalltalk' , nLine , 'foo' , nLine , ']]]'.	text := 'foo'.	tree := PRDocument new		add:				(PRParagraph new						add:								((PRScript content: 'foo')										language: PRSmalltalkScriptLanguage default;										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRScriptTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:51'!testParseSimple	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '[[[' , nLine , 'foo' , nLine , ']]]'.	text := 'foo'.	tree := PRDocument new		add:				(PRParagraph new						add: (PRScript content: 'foo');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRScriptTest methodsFor: 'tests-parsing' stamp: 'DamienCassou 6/3/2014 11:36'!testParseSimpleOn1Line	"This test does *not* specify a valid usage of script. This test is here to ensure that there is a sensible default when writing invalid Pillar text."	| wiki text tree |	wiki := '[[[foo]]]'.	text := '[[[foo]]]'.	tree := PRDocument new		add: (self addText: '[[[foo]]]' to: PRParagraph new);		yourself.	self assertWiki: wiki equalsTree: tree.	! !!PRScriptTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:22'!testParseWithSimpleCaption	| wiki text tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '[[[caption=foo' , nLine , 'foo' , nLine , ']]]'.	text := 'foo'.	tree := PRDocument new		add:				(PRParagraph new						add:								((PRScript content: 'foo')										caption: 'foo';										yourself);						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTextTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ false! !!PRTextTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRText! !!PRTextTest methodsFor: 'tests-instantiation' stamp: 'lr 4/5/2007 14:41'!testContent	instance := self actualClass content: 'zork'.	self assert: self instance text = 'zork'! !!PRTextTest methodsFor: 'tests-comparing' stamp: 'lr 4/5/2007 14:43'!testEqualText	self deny: (self actualClass content: 'foo') = (self actualClass content: 'bar')! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 9/4/2009 17:04'!testEscapeCpp	| wiki tree |	wiki := 'Text: \+\+'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Text: ++');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:20'!testEscapeFirst	| wiki tree nLine |	nLine := Smalltalk os pillarLineEnding.	wiki := '\* text' , nLine , '\+ text' , nLine , '\= text' , nLine , '\@ text' , nLine , '\!! text' , nLine , '\| text'		, nLine , '\# text' , nLine , '\- text'.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: '* text');						add: PRLineBreak new;						add: (PRText content: '+ text');						add: PRLineBreak new;						add: (PRText content: '= text');						add: PRLineBreak new;						add: (PRText content: '@ text');						add: PRLineBreak new;						add: (PRText content: '!! text');						add: PRLineBreak new;						add: (PRText content: '| text');						add: PRLineBreak new;						add: (PRText content: '# text');						add: PRLineBreak new;						add: (PRText content: '- text');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/7/2015 17:21'!testEscapeStrange	| wiki tree |	wiki := '< text' , Smalltalk os pillarLineEnding , '> text'.	tree := PRDocument new		add:				(PRParagraph new						add: (PRText content: '< text');						add: PRLineBreak new;						add: (PRText content: '> text');						yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:37'!testEscapeText	| wiki tree |	wiki := 'Text: \*\+'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Text: *+');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:39'!testEscapeWiki	| wiki tree |	wiki := 'Wiki: =, |, !!, #, {, }, |{, ||, |}, [, ] and -'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'Wiki: =, |, !!, #, {, }, |{, ||, |}, [, ] and -');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:39'!testParseBasic	| wiki tree |	wiki := 'abcdefghijklmnopqrstuvwxyz... ABCDEFGHIJKLMNOPQRSTUVWXYZ... 0123456789...'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: 'abcdefghijklmnopqrstuvwxyz... ABCDEFGHIJKLMNOPQRSTUVWXYZ... 0123456789...');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:40'!testParseHtml	| wiki tree |	wiki := '<strong>strong <emph>strong, emph</emph></strong>'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '<strong>strong <emph>strong, emph</emph></strong>');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:40'!testParseLatex	| wiki text tree |	wiki := '\\begin{foo}[bar]$zork$\\end{foo}'.	text := '\begin{foo}[bar]$zork$\end{foo}'.	tree := PRDocument new		add: (PRParagraph new			add: (PRText content: '\begin{foo}[bar]$zork$\end{foo}');			yourself);		yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki.	self assertTree: tree equalsText: text! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:40'!testParseSpecial	| wiki tree |	wiki := '????????????¬å???????????????¬ú??¬ü¬¬°¬¢¬£¬§¬·?¬ß?¬©¬¬´¬¨?¬Æ¬Ø¬¬±???¬µ¬¬??¬¬ª???¬ø¦Ä¦Å¦Ç¦É¦Ñ¦Ö¦Ü¦á¦à¦â¦ä¦ã¦å¦ç¦é¦è?¦ë¦í¦ì¦î¦ï¦ñ?¦ò¦ô¦ö¦õ¦ú??¦ü¦¦°¦¢¦£¦§¦·¦¶¦ß¦®¦©¦¦´¦¨¦¦Æ¦Ø?¦±¦¦¦¥¦µ¦¦¦¦¦¦ª¦º??'.	tree := (PRDocument new)				add: ((PRParagraph new)							add: (PRText										content: '????????????¬å???????????????¬ú??¬ü¬¬°¬¢¬£¬§¬·?¬ß?¬©¬¬´¬¨?¬Æ¬Ø¬¬±???¬µ¬¬??¬¬ª???¬ø¦Ä¦Å¦Ç¦É¦Ñ¦Ö¦Ü¦á¦à¦â¦ä¦ã¦å¦ç¦é¦è?¦ë¦í¦ì¦î¦ï¦ñ?¦ò¦ô¦ö¦õ¦ú??¦ü¦¦°¦¢¦£¦§¦·¦¶¦ß¦®¦©¦¦´¦¨¦¦Æ¦Ø?¦±¦¦¦¥¦µ¦¦¦¦¦¦ª¦º??');							yourself);				yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-parsing' stamp: 'lr 4/5/2007 14:40'!testParseWiki	| wiki tree |	wiki := ' !!_#-|=]@:<>\*'.	tree := (PRDocument new)				add: ((PRParagraph new)							add: (PRText content: ' !!_#-|=]@:<>*');							yourself);				yourself.	self assertWiki: wiki equalsTree: tree.	self assertTree: tree equalsWiki: wiki! !!PRTextTest methodsFor: 'tests-printing' stamp: 'DamienCassou 3/20/2014 18:04'!testPrinting	| text |	text := PRText content: 'abcdef'.	'*abcdef*' match: text printString! !!PRTextTest methodsFor: 'tests-accessing' stamp: 'lr 3/9/2006 11:31'!testText	self instance text: 'zork'.	self assert: self instance text = 'zork'! !!PRObjectTest class methodsFor: 'testing' stamp: 'lr 3/30/2007 22:22'!isAbstract	^ true! !!PRObjectTest class methodsFor: 'accessing' stamp: 'DamienCassou 10/8/2013 09:37'!packageNamesUnderTest	^ #('Pillar-Model')! !!PRObjectTest class methodsFor: 'testing' stamp: 'lr 3/9/2006 11:31'!shouldInheritSelectors	^ true! !!PRObjectTest methodsFor: 'private' stamp: 'lr 3/30/2007 22:22'!actualClass	^ PRObject! !!PRObjectTest methodsFor: 'private' stamp: 'DamienCassou 2/5/2014 14:23'!actualInstance	^ self actualClass new! !!PRObjectTest methodsFor: 'accessing' stamp: 'DamienCassou 2/5/2014 14:21'!instance	^ instance! !!PRObjectTest methodsFor: 'running' stamp: 'DamienCassou 2/5/2014 14:23'!setUp	super setUp.	instance := self actualInstance! !!PRObjectTest methodsFor: 'tests-copying' stamp: 'lr 6/22/2008 18:24'!testCopyProperties	self deny: self instance properties == self instance copy properties! !!PRObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:31'!testProperties	self assert: self instance properties notNil.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo put: #bar.	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsent: [ nil ].	self instance instVarNamed: 'properties' put: nil.	self instance propertyAt: #foo ifAbsentPut: [ #bar ].	self instance instVarNamed: 'properties' put: nil.	self instance hasProperty: #foo.	self instance instVarNamed: 'properties' put: nil! !!PRObjectTest methodsFor: 'tests-properties' stamp: 'DamienCassou 10/28/2013 16:47'!testPropertiesAt	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self should: [ self instance propertyAt: #bar ] raise: PRPropertyError! !!PRObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesAtIfAbsent	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsent: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsent: [ 'baz' ]) = 'baz'! !!PRObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesAtIfAbsentPut	self assert: (self instance propertyAt: #foo put: 'bar') = 'bar'.	self assert: (self instance propertyAt: #foo ifAbsentPut: [ 'baz' ]) = 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self assert: (self instance propertyAt: #bar ifAbsentPut: [ 'baz' ]) = 'baz'.	self assert: (self instance propertyAt: #bar) = 'baz'! !!PRObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesAtPut	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance propertyAt: #foo) = 'bar'.	self instance propertyAt: #foo put: 'baz'.	self assert: (self instance propertyAt: #foo) = 'baz'! !!PRObjectTest methodsFor: 'tests-properties' stamp: 'lr 3/9/2006 11:31'!testPropertiesHas	self deny: (self instance hasProperty: #foo).	self instance propertyAt: #foo put: 'bar'.	self assert: (self instance hasProperty: #foo).	self deny: (self instance hasProperty: #bar)! !!PRObjectTest methodsFor: 'tests' stamp: 'lr 3/9/2006 11:31'!testSanity	"If this test case fails, there is something wrong with the setup of the test-case."	self		assert: self actualClass isAbstract not		description: 'Unable to test abstract class.'.	self		assert: self instance class = self actualClass		description: 'Invalid test instance.'! !!PRScriptEvaluatorTest class methodsFor: 'testing' stamp: 'DamienCassou 4/5/2015 10:24'!isAbstract	^ false! !!PRScriptEvaluatorTest methodsFor: 'private' stamp: 'DamienCassou 4/5/2015 10:23'!actualClass	^ PRScriptEvaluator ! !!PRScriptEvaluatorTest methodsFor: 'tests' stamp: 'DamienCassou 4/5/2015 10:32'!testScriptWithEval	| input expected |	input := PRDocument new		add:				((PRScript content: 'stream nextPut: $h; nextPut: $e; nextPut: $l; nextPutAll: ''lo''')						eval: true;						yourself);		yourself.	expected := PRDocument new		add: (self addText: 'hello' to: PRParagraph new);		yourself.	self assert: (self transform: input) equals: expected! !!PRScriptEvaluatorTest methodsFor: 'tests' stamp: 'DamienCassou 4/5/2015 10:35'!testScriptWithProblematicEval	| input |	input := PRDocument new		add:				((PRScript content: 'Object SomethingThatIsNotAMethod')						eval: true;						yourself);		yourself.	self assert: (self transform: input) equals: input! !!PRTransformerTest class methodsFor: 'testing' stamp: 'DamienCassou 4/5/2015 10:24'!isAbstract	^ self = PRTransformerTest! !!PRTransformerTest methodsFor: 'private' stamp: 'DamienCassou 4/5/2015 10:23'!actualClass	^ PRTransformer! !!PRTransformerTest methodsFor: 'actions' stamp: 'DamienCassou 4/5/2015 10:29'!transform: aNode	^ self actualInstance start: aNode; topNode! !!PRVisitorTest class methodsFor: 'testing' stamp: 'DamienCassou 4/5/2015 10:24'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self = PRVisitorTest! !!PRVisitorTest methodsFor: 'private' stamp: 'DamienCassou 4/5/2015 10:23'!actualClass	^ PRVisitor! !!PRVisitorTest methodsFor: 'helpers' stamp: 'DamienCassou 4/5/2015 10:31'!addText: aString to: aDocumentItem	^ aDocumentItem		add: (PRText content: aString);		yourself! !!PRParameterParserTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/13/2015 22:56'!testParseParameters	| wiki expectedParameters |	wiki := 'a=1|b=2|c'.	expectedParameters := Dictionary 	with: 'a' -> '1'	with: 'b' -> '2'	with: 'c' -> nil.	self assert: (PRParameterParser parse: wiki) equals: expectedParameters! !!PRParameterParserTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/13/2015 22:56'!testParseParametersEmpty	| wiki expectedParameters |	wiki := '|a||b|'.	expectedParameters := Dictionary 	with: 'a' -> nil	with: 'b' -> nil.	self assert: (PRParameterParser parse: wiki) equals: expectedParameters! !!PRParameterParserTest methodsFor: 'tests-parsing' stamp: 'CyrilFerlicot 4/13/2015 22:56'!testParseParametersEscaped	| wiki expectedParameters |	wiki := '|\|\==1|2=\|\='.	expectedParameters := Dictionary 	with: '|=' -> '1'	with: '2' -> '|='.	self assert: (PRParameterParser parse: wiki) equals: expectedParameters! !!PRScriptLanguageTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/8/2015 10:34'!testEquals	self assert: (PRAbstractScriptLanguage for: 'smalltalk') = (PRAbstractScriptLanguage for: 'smalltalk')! !!PRScriptLanguageTest methodsFor: 'tests' stamp: 'DamienCassou 3/20/2014 17:57'!testFinding	self assert: (PRAbstractScriptLanguage concreteClassFor: '') equals: PRNoScriptLanguage.	self assert: (PRAbstractScriptLanguage concreteClassFor: '') default isSpecified.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'no language') equals: PRNoScriptLanguage.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'no language') default isSpecified.	self assert: (PRAbstractScriptLanguage concreteClassFor: nil) equals: PRUnspecifiedScriptLanguage.	self assert: (PRAbstractScriptLanguage concreteClassFor: nil) default isSpecified not.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'smalltalk') equals: PRSmalltalkScriptLanguage.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'smalltalk') default isSpecified.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'html') equals: PRHTMLScriptLanguage.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'html') default isSpecified.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'HTML') equals: PRHTMLScriptLanguage.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'HTML') default isSpecified.	self assert: (PRAbstractScriptLanguage concreteClassFor: 'non existing language foobar') equals: PRUnsupportedScriptLanguage .	self assert: (PRAbstractScriptLanguage concreteClassFor: 'non existing language foobar') new isSpecified not.! !!PRTextParserTest methodsFor: 'running' stamp: 'DamienCassou 2/10/2014 16:33'!setUp	parser := PRTextParser new! !!PRTextParserTest methodsFor: 'tests-escaping' stamp: 'DamienCassou 2/10/2014 16:33'!testEscape1	self assert: (parser class escape: '' using: 'a') = ''.	self assert: (parser class escape: 'a' using: 'a') = '\a'.	self assert: (parser class escape: 'ab' using: 'a') = '\ab'.	self assert: (parser class escape: 'ba' using: 'a') = 'b\a'.	self assert: (parser class escape: 'bab' using: 'a') = 'b\ab'! !!PRTextParserTest methodsFor: 'tests-escaping' stamp: 'DamienCassou 2/10/2014 16:33'!testEscape2	self assert: (parser class escape: 'aa' using: 'a') = '\a\a'.	self assert: (parser class escape: 'aab' using: 'a') = '\a\ab'.	self assert: (parser class escape: 'baa' using: 'a') = 'b\a\a'.	self assert: (parser class escape: 'baab' using: 'a') = 'b\a\ab'! !!PRTextParserTest methodsFor: 'tests-escaping' stamp: 'DamienCassou 2/10/2014 16:33'!testEscape3	self assert: (parser class escape: 'a' using: 'aa') = 'a'.	self assert: (parser class escape: 'aa' using: 'aa') = '\a\a'.	self assert: (parser class escape: 'aaa' using: 'aa') = '\a\aa'.	self assert: (parser class escape: 'aaaa' using: 'aa') = '\a\a\a\a'! !!PRTextParserTest methodsFor: 'tests-escaping' stamp: 'DamienCassou 2/27/2014 11:35'!testEscapedRoundTrip	| wikiText document |	wikiText := ' ==\=\=== '.	document := PRDocumentParser parse: wikiText.	self assert: (PRPillarWriter write: document) equals: wikiText! !!PRTextParserTest methodsFor: 'tests-escaping' stamp: 'DamienCassou 2/10/2014 16:33'!testUnescape1	self assert: (parser class unescape: '\a') = 'a'.	self assert: (parser class unescape: '\ab') = 'ab'.	self assert: (parser class unescape: 'b\a') = 'ba'.	self assert: (parser class unescape: 'b\ab') = 'bab'! !!PRTextParserTest methodsFor: 'tests-escaping' stamp: 'DamienCassou 2/10/2014 16:33'!testUnescape2	self assert: (parser class unescape: '\a\a') = 'aa'.	self assert: (parser class unescape: '\a\ab') = 'aab'.	self assert: (parser class unescape: 'b\a\a') = 'baa'.	self assert: (parser class unescape: 'b\a\ab') = 'baab'! !!PRTextParserTest methodsFor: 'tests-escaping' stamp: 'DamienCassou 2/10/2014 16:33'!testUnescape3	self assert: (parser class unescape: '') = ''.	self assert: (parser class unescape: '\') = ''.	self assert: (parser class unescape: '\\') = '\'.	self assert: (parser class unescape: '\\\') = '\'.	self assert: (parser class unescape: '\\\\') = '\\'! !"Pillar-Tests-Model"!!PRDocumentWriterTest commentStamp: 'DamienCassou 2/28/2014 09:35' prior: 0!I provide abstract tests and helper methods to test the subclasses of PRDocumentWriter.!!PRManualNumberingWriterTest commentStamp: 'DamienCassou 2/28/2014 09:34' prior: 0!Abstract writer to facilitate the job of writers that need their headers/figures/scripts to be numbered. My subclasses include the html and markdown writers. On the contrary, the latex writer relies on the latex engine to number these elements automatically.!!PRMockWriter commentStamp: 'DamienCassou 2/28/2014 09:38' prior: 0!I'm a class responsible for mimicking the behavior of a document writer. I'm useful for some testing classes that need a stupid writer.!!PRCascadingCounterTest commentStamp: 'DamienCassou 2/28/2014 09:36' prior: 0!I test the PRCascadingCounter class.!!PRDocumentWriterTest commentStamp: 'DamienCassou 2/28/2014 09:35' prior: 34863719!I provide abstract tests and helper methods to test the subclasses of PRDocumentWriter.!!PRDocumentWriterTest class methodsFor: 'testing' stamp: 'DamienCassou 2/28/2014 09:31'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #PRDocumentWriterTest! !!PRDocumentWriterTest methodsFor: 'private' stamp: 'DamienCassou 2/28/2014 09:28'!actualClass	^ PRDocumentWriter! !!PRDocumentWriterTest methodsFor: 'private' stamp: 'DamienCassou 2/5/2014 14:26'!actualInstance	^  self createWriterOn: String new! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'BenComan 6/2/2014 17:18'!annotation		^ self shouldBeImplemented.  ! !!PRDocumentWriterTest methodsFor: 'asserting' stamp: 'DamienCassou 2/26/2014 17:17'!assert: result includesSubstring: expected	expected isEmpty ifTrue: [ ^ self ].	self		assert: (result includesSubstring: expected)		description:			('''{1}'' not in ''{2}'''				format:					{expected.					result})! !!PRDocumentWriterTest methodsFor: 'asserting' stamp: 'DamienCassou 11/21/2013 11:22'!assertWriting: aDocumentItem includesText: aString	| result |	result := self write: aDocumentItem.	self assert: result includesSubstring: aString! !!PRDocumentWriterTest methodsFor: 'asserting' stamp: 'DamienCassou 11/21/2013 11:23'!assertWriting: aDocumentItem includesTexts: aCollection	| resultString |	resultString := self write: aDocumentItem.	aCollection do: [ :testString | self assert: resultString includesSubstring: testString ]! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 15:06'!boldFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 4/2/2015 09:42'!configuration	^ configuration ifNil: [ configuration := PRCocoonConfiguration new ]! !!PRDocumentWriterTest methodsFor: 'helpers' stamp: 'DamienCassou 1/10/2014 16:08'!createWriterOn: aWriteStream 	^ (self actualClass on: aWriteStream)		configuration: self configuration;		yourself! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:20'!dataItemWithBar	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:37'!definitionListBegin	self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/28/2014 14:48'!emailToFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:20'!figureAnchorForPierLogo	^ self subclassResponsibility ! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:46'!figureBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'data' stamp: 'DamienCassou 11/21/2013 07:49'!foo	^ 'foo'! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/5/2014 18:30'!horizontalRule	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:51'!italicFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:43'!level1HeaderBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:17'!level1HeaderWithFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 15:01'!level2HeaderBegin	^ self subclassResponsibility ! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:43'!level3HeaderBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:17'!level3HeaderWithFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:42'!listItemWith1	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:51'!monospaceFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:32'!orderedListBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/15/2014 16:53'!packageNamesUnderTest	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:45'!paragraphFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 15:55'!preformattedFooBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 15:55'!preformattedTextFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:44'!rawText	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/22/2013 18:21'!referenceToFigurePierLogo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 15:43'!scriptAnchorForMyScript	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:16'!scriptWithCaptionBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:10'!scriptWithoutCaptionBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:53'!strikethroughFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:53'!subscriptFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:53'!superscriptFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 1/10/2014 17:07'!supportSyntaxHighlighting	^ true! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 15:44'!tableBegin	^ self subclassResponsibility ! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 15:45'!tableCellWithFoo	^ self subclassResponsibility ! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 16:02'!tableCellWithHeadingFoo	^ self subclassResponsibility ! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 15:44'!tableRow	^ self subclassResponsibility ! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:37'!termItemWithFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'BenComan 6/2/2014 22:07'!testAnnotation	| item |	{ 'note' . 'dothis' } do:	[	:annotation |			item := PRAnnotatedParagraph new			annotation: annotation;			add: (PRText content: 'foo');			yourself.		self 			assertWriting: item			includesTexts: 				{self annotationBegin: annotation . 'foo'}. 	].! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testBoldFormat	| item |	item := self addText: 'foo' to: PRBoldFormat new.	self		assertWriting: item		includesTexts:			{self boldFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 3/5/2014 17:44'!testCommentedLineNotVisibleInOutput	| item result |	item := PRCommentedLine content: 'some comment'.	result := self write: item.	self assert: result isEmpty.! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 3/20/2014 18:32'!testConsecutiveTextsInAParagraphAreSeparatedByWhitespace	| item |	item := PRParagraph new		add: (PRText content: 'foo');		add: (PRLineBreak new);		add: (PRText content: 'bar');		yourself.	self assertWriting: item includesText: 'foo', self configuration newLine, 'bar'! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 12/11/2013 17:08'!testDefaultConfigurations	self assert: self actualClass defaultConfigurations notEmpty! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testDefinitionList	| item |	item := PRDefinitionList new		add: (self addText: 'foo' to: PRTermItem new);		add: (self addText: 'bar' to: PRDataItem new);		yourself.	self		assertWriting: item		includesTexts:			{self definitionListBegin.			self termItemWithFoo.			self dataItemWithBar}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testFigure	| item |	item := PRExternalLink new		reference: 'file://picture.png';		embedded: true;		yourself.	self		assertWriting: item		includesTexts:			{(self figureBegin).			'picture.png'}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/13/2015 23:12'!testFigureLabelGenerateAnchor	| item |	item := PRExternalLink new		reference: 'file://picture.png';		embedded: true;		parameterAt: 'label' put: 'pierLogo';		yourself.	self		assertWriting: item		includesTexts:			{(self figureAnchorForPierLogo).			'pierLogo'}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testFigureReference	| item resultString indexOfReference referenceString |	item := PRParagraph new		add:				(PRExternalLink new						reference: 'file://picture.png';						embedded: true;						parameterAt: 'label' put: 'pierLogo';						yourself);		add: (PRText content: 'See figure ');		add: (PRInternalLink reference: 'pierLogo');		yourself.		resultString := self write: item.	indexOfReference := resultString indexOfSubCollection: 'See figure ' startingAt: 1 ifAbsent: [ self fail: 'The string ''See figure '' should have been found' ].	referenceString := resultString allButFirst: indexOfReference - 1.	self assert: referenceString includesSubstring: self referenceToFigurePierLogo! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/21/2014 17:40'!testFigureWithWidth	| item width |	width := '50'.	item := PRExternalLink new		reference: 'file://picture.png';		embedded: true;		parameterAt: 'width' put: width;		yourself.	self assertWriting: item includesText: self widthFor50percents! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testFiguresHaveACaption	| item caption filename |	caption := 'A description'.	filename := 'picture.png'.	item := PRExternalLink new		reference: 'file://' , filename;		embedded: true;		label: 'picture';		add: (PRText content: caption);		yourself.	self		assertWriting: item		includesTexts:			{(self figureBegin).			filename.			caption}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 12/9/2013 14:04'!testFileExtension	| fileExtension |	fileExtension := self instance fileExtension.	self assert: fileExtension notNil.	self assert: fileExtension isString! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 12/11/2013 17:22'!testHasName	self assert: self actualClass writerName notEmpty! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testHeader	| item |	item := PRHeader new		level: 1;		add: (PRText content: 'foo');		yourself.	self assertWriting: item includesTexts: {self level1HeaderWithFoo}.	self configuration headingLevelOffset: 2.	self assertWriting: item includesTexts: {self level3HeaderWithFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 3/5/2014 18:29'!testHorizontalRule	| item  |	item := PRHorizontalRule new.	self assertWriting: item includesText: self horizontalRule! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testItalicFormat	| item |	item := self addText: 'foo' to: PRItalicFormat new.	self		assertWriting: item		includesTexts:			{self italicFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testLanguageForScript	| item smalltalk writer http |	writer := self instance.	item := PRScript content: 'foo'.	smalltalk := PRSmalltalkScriptLanguage new.	http := PRHTTPScriptLanguage new.	self assert: (writer languageForScript: item) class equals: PRUnspecifiedScriptLanguage.	self configuration defaultScriptLanguage: smalltalk.	self assert: (writer languageForScript: item) equals: smalltalk.	item := (PRScript content: 'foo') language: http.	self assert: (writer languageForScript: item) equals: http! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 4/26/2014 18:16'!testMailLink	| item |	configuration scrambledEmailAddresses: false.	item := self addText: 'Foo Bar' to: (PRMailLink reference: 'foo@bar.com').	self		assertWriting: item		includesTexts:			{self emailToFoo . 'Foo Bar'}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 12/9/2013 14:04'!testMarkupType	| markupType |	markupType := self instance markupType.	self assert: markupType notNil.	self assert: markupType isSymbol! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testMonospaceFormat	| item |	item := self addText: 'foo' to: PRMonospaceFormat new.	self		assertWriting: item		includesTexts:			{self monospaceFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testOrderedList	| item |	item := PROrderedList new		add: (self addText: '1' to: PRListItem new);		yourself.	self		assertWriting: item		includesTexts:			{(self orderedListBegin).			(self listItemWith1)}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testParagraph	| item |	item := self addText: 'foo' to: PRParagraph new.	self assertWriting: item includesText: self paragraphFoo! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testPreformatted	| item |	item := self addText: 'foo' to: PRPreformatted new.	self assertWriting: item includesTexts: {self preformattedFooBegin . self preformattedTextFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testPreformattedWithMultipleLines	| item |	item := PRPreformatted new		add: (PRText content: 'foo');		add: (PRText content: 'bar');		yourself.	self assertWriting: item includesText: 'foo' , self configuration newLine! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testRaw	| item |	item := PRRaw content: self rawText.	self		assertWriting: item		includesText:			self rawText! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testScript	| item |	item := PRScript content: 'foo'.	self assertWriting: item includesTexts: {self scriptWithoutCaptionBegin . self foo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testScriptLabelGenerateAnchor	| item |	item := (PRScript content: 'foo')		label: 'myScript';		yourself.	self		assertWriting: item		includesTexts:			{(self scriptAnchorForMyScript).			'myScript'}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testScriptLanguage	| item |	self supportSyntaxHighlighting ifFalse: [ self skip ].	item := (PRScript content: 'foo')		language: 'html';		yourself.	self assertWriting: item includesTexts: {(PRHTMLScriptLanguage standardName)}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testScriptWithProblematicEval	| item nonExistingMethod |	nonExistingMethod := 'FooBarDoesNotExistX'.	item := (PRScript content: 'Object ' , nonExistingMethod)		eval: true;		yourself.	self assert: item isEvaluated.	self assertWriting: item includesText: nonExistingMethod! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testScriptsHaveACaption	| item caption |	caption := 'A description'.	item := (PRScript content: 'foo')		caption:  caption;		yourself.	self		assertWriting: item		includesTexts:			{(self scriptWithCaptionBegin).			caption}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 1/15/2014 16:53'!testSpecifyPackageNamesUnderTest	self assert: self packageNamesUnderTest isCollection.	self deny: self packageNamesUnderTest isEmpty.	self packageNamesUnderTest		do: [ :packageName | self deny: (RPackage organizer packageNamed: packageName) methodReferences isEmpty ]! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testStrikethroughFormat	| item |	item := self addText: 'foo' to: PRStrikethroughFormat new.	self		assertWriting: item		includesTexts:			{self strikethroughFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testSubscriptFormat	| item |	item := self addText: 'foo' to: PRSubscriptFormat new.	self		assertWriting: item		includesTexts:			{self subscriptFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testSuperscriptFormat	| item |	item := self addText: 'foo' to: PRSuperscriptFormat new.	self		assertWriting: item		includesTexts:			{self superscriptFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testTable	| item |	item := PRTable new		add:				(PRTableRow new						add: (self addText: 'foo' to: PRTableCell new);						yourself);		yourself.	self		assertWriting: item		includesTexts:			{(self tableBegin).			(self tableRow).			(self tableCellWithFoo)}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testTableWith2CellsInARow	| item |	item := PRTable new		add:				(PRTableRow new						add: (self addText: 'foo' to: PRTableCell new);						add: (self addText: 'foo' to: PRTableCell new);						yourself);		yourself.	self		assertWriting: item		includesTexts:			{(self tableBegin).			(self tableRow).			(self tableCellWithFoo)}.	^ item! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testTableWithHeading	| item |	item := PRTable new		add:				(PRTableRow new						add:								(self										addText: 'foo'										to:											(PRTableCell new												beHeading;												yourself));						yourself);		yourself.	self		assertWriting: item		includesTexts:			{(self tableBegin).			(self tableRow).			(self tableCellWithHeadingFoo)}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testUnderlineFormat	| item |	item := self addText: 'foo' to: PRUnderlineFormat new.	self		assertWriting: item		includesTexts:			{self underlineFoo}! !!PRDocumentWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testUnorderedList	| item |	item := PRUnorderedList new		add: (self addText: '1' to: PRListItem new);		yourself.	self		assertWriting: item		includesTexts:			{(self unorderedListBegin).			(self listItemWith1)}! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:53'!underlineFoo	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:32'!unorderedListBegin	^ self subclassResponsibility! !!PRDocumentWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/21/2014 17:39'!widthFor50percents	^ '50'! !!PRDocumentWriterTest methodsFor: 'helpers' stamp: 'DamienCassou 1/10/2014 16:07'!write: aDocumentItem	| writer |	^ String		streamContents: [ :stream | 			writer := self createWriterOn: stream.			writer start: aDocumentItem ]! !!PRManualNumberingWriterTest commentStamp: 'DamienCassou 2/28/2014 09:34' prior: 34863892!Abstract writer to facilitate the job of writers that need their headers/figures/scripts to be numbered. My subclasses include the html and markdown writers. On the contrary, the latex writer relies on the latex engine to number these elements automatically.!!PRManualNumberingWriterTest class methodsFor: 'testing' stamp: 'DamienCassou 11/21/2013 07:40'!isAbstract	"Override to true if a TestCase subclass is Abstract and should not have	TestCase instances built from it"	^self name = #PRManualNumberingWriterTest! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:36'!counter11DefinitionString	^ '1.1. '! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 12:42'!counter11ReferenceString	^ '1.1'! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:35'!counter1DefinitionString	^ '1. '! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:36'!counter1ReferenceString	^ '1'! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:36'!counter2DefinitionString	^ '2. '! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:57'!level1HeaderWith1Foo	^ self level1HeaderBegin , self counter1DefinitionString , self foo! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 15:04'!level2HeaderWith11Foo	^ self level2HeaderBegin , self counter11DefinitionString , self foo! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 15:00'!level2HeaderWith1Foo	^ self level2HeaderBegin , self counter1DefinitionString , self foo! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 15:00'!level2HeaderWithFoo	^ self level2HeaderBegin , self foo! !!PRManualNumberingWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/22/2013 18:21'!referenceToFigurePierLogo	^ '0.1'! !!PRManualNumberingWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testHeadersAreNumbered	| item |	item := PRDocument new		add:				(PRHeader new						level: 1;						add: (PRText content: 'foo');						yourself);		add:				(PRHeader new						level: 1;						add: (PRText content: 'foo');						yourself);		yourself.	self configuration startNumberingAtHeadingLevel: 1.	self		assertWriting: item		includesTexts:			{(self counter1DefinitionString).			(self counter2DefinitionString)}! !!PRManualNumberingWriterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/13/2015 23:19'!testReferenceToFigureAnchor	| item resultString indexOfReference referenceString |	item := PRDocument new	add: (PRHeader new						level: 1;						add: (PRText content: 'foo');						yourself);	add: (PRParagraph new		add:				(PRExternalLink new						reference: 'file://picture.png';						parameterAt: 'label' put: 'fig:picture';						embedded: true;						yourself);		add: (PRText content: 'See Figure ');		add:				(PRInternalLink new						reference: 'fig:picture';						yourself);		yourself).	self configuration startNumberingAtHeadingLevel: 1.	resultString := self write: item.	indexOfReference := resultString		indexOfSubCollection: 'See Figure '		startingAt: 1		ifAbsent: [ self fail: 'The string ''See Figure '' should have been found' ].	referenceString := resultString allButFirst: indexOfReference - 1.	self assert: referenceString includesSubstring: self counter11ReferenceString! !!PRManualNumberingWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testReferenceToHeaderAnchor	| item resultString indexOfReference referenceString |	item := PRDocument new		add:				(PRHeader new						level: 1;						add: (PRText content: 'foo');						yourself);		add: (PRAnchor named: 'chap:foo');		add:				(PRParagraph new						add: (PRText content: 'See Chapter ');						add:								(PRInternalLink new										reference: 'chap:foo';										yourself);						yourself);		yourself.	self configuration startNumberingAtHeadingLevel: 1.	resultString := self write: item.	indexOfReference := resultString indexOfSubCollection: 'See Chapter ' startingAt: 1 ifAbsent: [ self fail: 'The string ''See Chapter '' should have been found' ].	referenceString := resultString allButFirst: indexOfReference - 1.	self assert: referenceString includesSubstring: self counter1ReferenceString! !!PRManualNumberingWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testStartNumberingAtHeadingLevel	| item |	item := PRDocument new		add:				(PRHeader new						level: 1;						add: (PRText content: 'foo');						yourself);		add:				(PRHeader new						level: 2;						add: (PRText content: 'foo');						yourself);		yourself.	self assertWriting: item includesText: self level1HeaderWithFoo.	self configuration startNumberingAtHeadingLevel: 1.	self assertWriting: item includesText: self level1HeaderWith1Foo.	self configuration startNumberingAtHeadingLevel: 2.	self assertWriting: item includesTexts: {self level1HeaderWithFoo. self level2HeaderWith1Foo}.! !!PRManualNumberingWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testStopNumberingAtHeadingLevel	| item |	item := PRDocument new		add:				(PRHeader new						level: 1;						add: (PRText content: 'foo');						yourself);		add:				(PRHeader new						level: 2;						add: (PRText content: 'foo');						yourself);		yourself.	self configuration startNumberingAtHeadingLevel: 1.		self configuration stopNumberingAtHeadingLevel: Float infinity.	self assertWriting: item includesText: self level2HeaderWith11Foo.	self configuration stopNumberingAtHeadingLevel: 3.	self assertWriting: item includesText: self level2HeaderWith11Foo.	self configuration stopNumberingAtHeadingLevel: 2.	self assertWriting: item includesText: self level2HeaderWithFoo.! !!PRManualNumberingWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testSubHeadersAreNumbered	| item |	item := PRDocument new		add:				(PRHeader new						level: 1;						add: (PRText content: 'foo');						yourself);		add:				(PRHeader new						level: 2;						add: (PRText content: 'foo');						yourself);		yourself.		self configuration startNumberingAtHeadingLevel: 1.	self		assertWriting: item		includesTexts:			{(self counter1DefinitionString).			(self counter11DefinitionString)}! !!PRMockWriter commentStamp: 'DamienCassou 2/28/2014 09:38' prior: 34864221!I'm a class responsible for mimicking the behavior of a document writer. I'm useful for some testing classes that need a stupid writer.!!PRMockWriter class methodsFor: 'accessing' stamp: 'DamienCassou 1/8/2014 10:45'!fileExtension	^ 'mock'! !!PRMockWriter class methodsFor: 'testing' stamp: 'DamienCassou 1/8/2014 10:47'!isAbstract	^ false! !!PRMockWriter class methodsFor: 'accessing' stamp: 'DamienCassou 1/8/2014 10:46'!writerName	^ 'mock'! !!PRMockWriter methodsFor: 'accessing' stamp: 'DamienCassou 6/4/2014 17:24'!canvasClass	^ PRExportCanvas! !!PRCocoonConfigurationTest methodsFor: 'helper' stamp: 'CyrilFerlicot 3/31/2015 16:58'!mockWriterClass	^ PRMockWriter ! !!PRCocoonConfigurationTest methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 16:58'!packageNamesUnderTest	^ #('Pillar-ExporterCore')! !!PRCocoonConfigurationTest methodsFor: 'running' stamp: 'CyrilFerlicot 3/31/2015 16:58'!setUp	super setUp.	baseDirectory := FileSystem memory root! !!PRCocoonConfigurationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/1/2015 18:20'!testDocumentPropertiesAreAccessible	| doc data |	doc := PRDocument new propertyAt: 'authors' put: 'Someone'; yourself.	data := PRCocoonConfiguration new extractDataFrom: doc using: PRMockWriter new.	self assert: (data includesKey: 'authors').	self assert: (data at: 'authors') equals: 'Someone'! !!PRCocoonConfigurationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/16/2015 09:59'!testDocumentPropertiesCanBeReferencedFromTemplates	| doc data conf output |	doc := PRDocument new		propertyAt: 'authors' put: 'Someone';		yourself.	conf := PRCocoonConfiguration new		templateStream: 'Authors: {{{authors}}}';		yourself.	output := String		streamContents: [ :outStream | 			conf outputFile: outStream.			data := conf write: doc using: PRMockWriter new ].	self assert: output equals: 'Authors: Someone'! !!PRCocoonConfigurationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/1/2015 18:20'!testDocumentPropertiesTakePrecedence	| doc data conf |	doc := PRDocument new propertyAt: 'title' put: 'Should win'; yourself.	conf := PRCocoonConfiguration new.	conf title: 'Should fail'.	data := conf extractDataFrom: doc using: PRMockWriter new.	self assert: (data includesKey: 'title').	self assert: (data at: 'title') equals: 'Should win'! !!PRCocoonConfigurationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/16/2015 09:59'!testDocumentsAreLinked	| inputFiles outputFile1 outputFile2 |	inputFiles := OrderedCollection new.	inputFiles		add:			((baseDirectory / 'file1.pillar')				writeStreamDo: [ :st | st nextPutAll: '{{title: 1st file}}' ];				yourself).	inputFiles		add:			((baseDirectory / 'file2.pillar')				writeStreamDo: [ :st | st nextPutAll: '{{title: 2nd file}}' ];				yourself).	PRCocoonConfiguration new		templateStream: '{{#next}}Next: {{{title}}}{{/next}}';		outputType: PRMockWriter;		inputFiles: inputFiles;		exportSeparatedOutputFiles.	outputFile1 := baseDirectory / 'file1.pillar.mock'.	self assert: outputFile1 exists.	self assert: outputFile1 contents equals: 'Next: 2nd file'.	outputFile2 := baseDirectory / 'file2.pillar.mock'.	self assert: outputFile2 exists.	self assert: outputFile2 contents equals: ''! !!PRCocoonConfigurationTest methodsFor: 'tests' stamp: 'DamienCassou 4/5/2015 18:50'!testDocumentsAreTransformed	| configuration input output |	input := '[[[eval=truestream nextPut: $h; nextPutAll: ''ello'']]]'.	output := WriteStream on: String new.	configuration := PRCocoonConfiguration new		inputString: input;		outputStream: output;		outputType: PRMockWriter;		yourself.	configuration exportAllInOneOutputFile.	self assert: output contents equals: 'hello'! !!PRCocoonConfigurationTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/1/2015 18:20'!testSubNoInfiniteRecursion	PRCocoonConfiguration new subConfigurationNamed: self mockWriterClass writerName. 	"If this tests terminates, it passes :-). I tried to use #should:notTakeMoreThan: but it failed on Jenkins"! !!PRCocoonConfigurationInterpreterTest methodsFor: 'helper' stamp: 'CyrilFerlicot 4/16/2015 10:19'!fromString: aString 	^ (PRCocoonConfigurationInterpreter baseDirectory: self baseDirectory) buildFromString: aString! !!PRCocoonConfigurationInterpreterTest methodsFor: 'accessing' stamp: 'CyrilFerlicot 3/31/2015 17:03'!packageNamesUnderTest	^ #('Pillar-ExporterCore')! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 3/31/2015 17:05'!testDefaultScriptLanguage	| ston configuration |	ston := '{ #defaultScriptLanguage : "smalltalk" }'.	configuration := self fromString: ston.	self assert: configuration defaultScriptLanguage class equals: PRSmalltalkScriptLanguage.		ston := '{ #defaultScriptLanguage : "" }'.	configuration := self fromString: ston.	self assert: configuration defaultScriptLanguage class equals: PRNoScriptLanguage.! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 3/31/2015 17:05'!testDefaultTemplate	| configuration output bindings |		bindings := (Dictionary new		at: 'content'		put: 'chapeau';		yourself).			configuration := self fromString: '{}'.	output := configuration expandTemplateWithBindings: bindings.	self assert: output equals: 'chapeau'.! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 3/31/2015 17:06'!testEnsureNewFileWhenExporting	|  configuration  |		(baseDirectory / 'foo.html') writeStreamDo: [ :stream | stream nextPutAll: 'some very long string' ].		configuration := self fromString: '{ #outputFile: "foo.html" }'.	configuration outputStreamDuring: [:outStream | configuration writeOutput: 'short' toStream: outStream].	self assert: (baseDirectory / 'foo.html') readStream contents asString equals: 'short'! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 3/31/2015 17:06'!testNewLine	| ston configuration |	ston := '{ #newLine : #crlf }'.	configuration := self fromString: ston.	self assert: configuration newLine equals: String crlf.		ston := '{ #newLine : ''my newline'' }'.	configuration := self fromString: ston.	self assert: configuration newLine equals: 'my newline'.	configuration newLine: 'another'.	self assert: configuration newLine equals: 'another'! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 3/31/2015 17:07'!testSimpleConfiguration	| ston configuration |	ston := '{ #headingLevelOffset : 2 }'.	configuration := self fromString: ston.	self assert: configuration headingLevelOffset equals: 2! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/16/2015 11:13'!testTemplate	| configuration |	self assert: (self fromString: '{}') template equals: PRCocoonConfiguration new defaultTemplate.	self should: [ (self fromString: '{#template: "Something.txt"}') templateContents ] raise: PRTemplateError.	baseDirectory / 'something.txt' writeStreamDo: [ :s | s nextPutAll: 'a content' ].	configuration := (self fromString: '{#template: "something.txt"}') yourself.	self assert: configuration templateContents asString equals: 'a content'! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 3/31/2015 17:09'!testTemplateContentsIsUsed	| configuration output bindings |		bindings := (Dictionary new		at: 'lapin'		put: 'chapeau';		yourself).	(baseDirectory / 'foobar') writeStreamDo: [ :s | s << 'foobar' ].	configuration := self fromString: '{ #template: "foobar"}'.	configuration baseDirectory: baseDirectory.	output := configuration expandTemplateWithBindings: bindings.	self assert: output equals: 'foobar'.		(baseDirectory / 'lapin') writeStreamDo: [ :s | s << '{{{lapin}}}' ].	configuration := self fromString: '{ #template: "lapin"}'.	configuration baseDirectory: baseDirectory.	output := configuration expandTemplateWithBindings: bindings.	self assert: output equals: 'chapeau'.! !!PRCocoonConfigurationInterpreterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 3/31/2015 17:09'!testWithMultipleInputFiles	| ston configuration  document |	ston := '{ #inputFiles : [ "file1", "file2" ] }'.	baseDirectory / 'file1' writeStreamDo: [ :s | s nextPutAll: 'foo' ].	baseDirectory / 'file2' writeStreamDo: [ :s | s nextPutAll: 'bar' ].	configuration :=(self fromString: ston) baseDirectory: baseDirectory; yourself.	document := configuration parseAllInputFiles.	self assert: document children size equals: 2.	self assert: document children first text equals: 'foo'.	self assert: document children second text equals: 'bar'! !!PRCocoonConfigurationInterpreterTest methodsFor: 'helpers' stamp: 'CyrilFerlicot 3/31/2015 17:04'!unexistingFilename	| name |	name := 'foo'.	[ name asFileReference exists] whileTrue: [ name := name, 'a' ].	^ name! !!PRCascadingCounterTest commentStamp: 'DamienCassou 2/28/2014 09:36' prior: 34864437!I test the PRCascadingCounter class.!!PRCascadingCounterTest methodsFor: 'accessing' stamp: 'DamienCassou 1/15/2014 16:10'!packageNamesUnderTest	^ #('Pillar-ExporterCore')! !!PRCascadingCounterTest methodsFor: 'tests' stamp: 'DamienCassou 11/21/2013 13:00'!testElementsForNonSimpleCounter	| counter |	counter := PRCascadingCounter maxLevel: 5.	self assert: counter elements equals: { 0 }.	counter incrementAt: 2.	self assert: counter elements equals: { 0 . 1 }! !!PRCascadingCounterTest methodsFor: 'tests' stamp: 'DamienCassou 11/21/2013 12:59'!testElementsForSimpleCounter	| counter |	counter := PRCascadingCounter maxLevel: 5.	self assert: counter elements equals: { 0 }.	counter incrementAt: 1.	self assert: counter elements equals: { 1 }! !"Pillar-Tests-ExporterCore"!!PRGitHubMarkdownWriterTest methodsFor: 'private' stamp: 'DamienCassou 1/9/2014 09:33'!actualClass	^ PRGitHubMarkdownWriter! !!PRGitHubMarkdownWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:35'!scriptWithCaptionBegin	^ '```'! !!PRGitHubMarkdownWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:35'!scriptWithoutCaptionBegin	^ '```'! !!PRGitHubMarkdownWriterTest methodsFor: 'tests' stamp: 'DamienCassou 1/10/2014 17:08'!supportSyntaxHighlighting	^ true! !!PRGitHubMarkdownWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:36'!underlineFoo	"no underlining in github markdown"	^ 'foo'! !!PRMarkdownStreamWriterTest methodsFor: 'private' stamp: 'DamienCassou 11/21/2013 17:33'!actualClass	^ PRMarkdownWriter! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'BenComan 6/2/2014 22:44'!annotationBegin: annotationString	^'<p class="' , annotationString, '">' 	! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:28'!boldFoo	^ '**foo**'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 18:07'!counter11DefinitionString	^ '1\.1\. '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 18:07'!counter11ReferenceString	^ '1\.1'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 18:07'!counter1DefinitionString	^ '1\. '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 18:07'!counter1ReferenceString	^ '1'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 18:07'!counter2DefinitionString	^ '2\. '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:29'!dataItemWithBar	^ '<dd>bar</dd>'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:29'!definitionListBegin	^ '<dl>'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 4/26/2014 18:14'!emailToFoo	^ '<a href="mailto:foo@bar.com">'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 17:24'!figureAnchorForPierLogo	^ '[pierLogo]'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:47'!figureBegin	^ '!!['! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/5/2014 18:34'!horizontalRule	^ '---'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:29'!italicFoo	^ '*foo*'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:30'!level1HeaderBegin	^ '#'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:19'!level1HeaderWithFoo	^ '#foo'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 15:02'!level2HeaderBegin	^ '##'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:30'!level3HeaderBegin	^ '###'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:19'!level3HeaderWithFoo	^ '###foo'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:53'!listItemWith1	^ '1'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:36'!monospaceFoo	^ '`foo`'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:37'!orderedListBegin	^ '1. '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/15/2014 16:54'!packageNamesUnderTest	^ #('Pillar-ExporterMarkdown')! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:57'!paragraphFoo	^ 'foo'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:43'!preformattedFooBegin	^ '    foo'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:43'!preformattedTextFoo	^ 'foo'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:45'!rawText	^ '<u>foo</u>'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/22/2013 19:11'!referenceToFigurePierLogo	^ '0\.1'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 17:25'!scriptAnchorForMyScript	^ '<a name="myScript">'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:11'!scriptWithCaptionBegin	^ '    '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:11'!scriptWithoutCaptionBegin	^ '    '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:41'!strikethroughFoo	^ '<del>foo</del>'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:41'!subscriptFoo	^ '<sub>foo</sub>'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:40'!superscriptFoo	^ '<sup>foo</sup>'! !!PRMarkdownStreamWriterTest methodsFor: 'tests' stamp: 'DamienCassou 1/10/2014 17:07'!supportSyntaxHighlighting	^ false! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:39'!tableBegin	^ '| '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:39'!tableCellWithFoo	^ '| foo'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:40'!tableCellWithHeadingFoo	^ '| foo'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:38'!tableRow	^ '| '! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:51'!termItemWithFoo	^ '<dt>foo'! !!PRMarkdownStreamWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testLinkNameNotEscaped	| item |	item := PRExternalLink new		reference: 'file://picture.png';		embedded: true;		label: 'a_b';		yourself.	self assertWriting: item includesText: 'a_b'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:38'!underlineFoo	^ '<u>foo</u>'! !!PRMarkdownStreamWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 17:38'!unorderedListBegin	^ '- '! !"Pillar-Tests-ExporterMarkdown"!!PRLaTeXWriterTest class methodsFor: 'testing' stamp: 'DamienCassou 10/8/2013 10:56'!isAbstract	^ false! !!PRLaTeXWriterTest methodsFor: 'private' stamp: 'DamienCassou 10/8/2013 11:19'!actualClass	^ PRLaTeXWriter! !!PRLaTeXWriterTest methodsFor: 'private' stamp: 'BenComan 6/2/2014 22:42'!annotationBegin: annotationString	"Maybe annotations should all be environments, but currently 'dothis' is a command"	('dothis' = annotationString) ifTrue: [ ^ '\dothis{' ].		^ '\begin{' , annotationString , '}'.	! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 15:07'!boldFoo	^ '\textbf{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:40'!dataItemWithBar	^ ' bar'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:43'!definitionListBegin	^ '\begin{description}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 4/26/2014 18:14'!emailToFoo	^ '\href{mailto:foo@bar.com'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 16:23'!figureAnchorForPierLogo	^ '\label{pierLogo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:59'!figureBegin	^ '\begin{figure}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/5/2014 18:31'!horizontalRule	^ '\rule{\textwidth}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 14:55'!italicFoo	^ '\textit{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 07:49'!level1HeaderBegin	^ '\part{'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:17'!level1HeaderWithFoo	^ '\part{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 15:01'!level2HeaderBegin	^ '\chapter{'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 07:50'!level3HeaderBegin	^ '\section{'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:17'!level3HeaderWithFoo	^ '\section{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/8/2013 13:20'!listItemWith1	^ '\item 1'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/20/2014 11:40'!monospaceFoo	^ '\ct{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:31'!orderedListBegin	^ '\begin{enumerate}'! !!PRLaTeXWriterTest methodsFor: 'accessing' stamp: 'DamienCassou 1/15/2014 16:47'!packageNamesUnderTest	^ #('Pillar-ExporterLaTeX')! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 12/9/2013 13:29'!paragraphFoo	| newLine |	newLine := self configuration newLine.	^ 'foo', newLine! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 15:59'!preformattedFooBegin	^ '\begin{verbatim}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 15:54'!preformattedTextFoo	^ 'foo'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 17:46'!rawText	^ '\textbf{\textit{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/22/2013 18:21'!referenceToFigurePierLogo	^ '\ref{pierLogo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 17:24'!scriptAnchorForMyScript	^ '[myScript]'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:10'!scriptWithCaptionBegin	^ '\begin{script}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:10'!scriptWithoutCaptionBegin	^ '\begin{code}{}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 14:57'!strikethroughFoo	^ '\sout{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/22/2014 15:32'!subscriptFoo	^ '\textsubscript{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/22/2014 15:31'!superscriptFoo	^ '\textsuperscript{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 16:21'!tableBegin	^ '\begin{tabular}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 16:22'!tableCellWithFoo	^ 'foo'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 16:22'!tableCellWithHeadingFoo	^ '\textbf{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 16:21'!tableRow	^ '\\'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:40'!termItemWithFoo	^ '\item[foo]'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testAnchor	| item |	item := PRAnchor new name: 'foo'.	self assertWriting: item includesText: '\label{foo}'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testFigureLabelNotEscaped	| item |	item := PRExternalLink new		reference: 'file://picture.png';		embedded: true;		label: 'a_b';		yourself.	self assertWriting: item includesText: 'a_b'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testLinksWithBadCharactersInCaption	| item url caption |	url := 'http://www.pharo.org'.	caption := 'bad chars #_'.	item := PRExternalLink new		reference: url;		add: (PRText content: caption);		yourself.	self assertWriting: item includesText: 'bad chars \#\_'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testLinksWithEitherHrefOrUrl	| item url caption |	url := 'http://www.pharo.org#foo'.	caption := 'some caption'.	item := PRExternalLink new reference: url.	self assertWriting: item includesText: '\url{' , url , '}'.	item := PRExternalLink new		reference: url;		add: (PRText content: caption);		yourself.	self assertWriting: item includesText: '\href{' , url , '}{' , caption , '}'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 1/30/2015 10:02'!testPreformattedExportsToUnprotectedVerbatim	"Special characters in a Pillar preformattted group should not be protected by backslashes because they are exported in a verbatim LaTeX environment."	| item |	item := PRPreformatted with: (PRText content: '[[[').	self		assertWriting: item		includesText: '\begin{verbatim}' , self configuration newLine , '[[[' , self configuration newLine , '\end{verbatim}'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testReferencesToSectionsAreNotEscaped	|item|	item := PRInternalLink reference: 'a_section_somewhere'.	self assertWriting: item includesText: 'a_section_somewhere'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testScriptWithCorrectNewLines	| item |	item := (PRScript content: 'foo')		label: 'myScript';		caption: 'a caption';		yourself.	self		assertWriting: item		includesText:			'\begin{script}[myScript]{a caption}' , self configuration newLine , 'foo' , self configuration newLine , '\end{script}'! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testTableWith2CellsInARow	| item |	item := super testTableWith2CellsInARow.	self assertWriting: item includesText: 'foo & foo \\'	! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'DamienCassou 6/3/2014 10:29'!testTablesHaveSeparatingLines	| text |	text := '|!!Syntax |!!What it represents|startPoint|a variable name'.	self assertWriting: (PRDocumentParser parse: text) includesTexts: { 'toprule' . 'midrule' . 'bottomrule' }! !!PRLaTeXWriterTest methodsFor: 'tests' stamp: 'CyrilFerlicot 4/8/2015 13:09'!testThereIsABlankLineBetweenTextAndTable	| text nLine |	nLine := Smalltalk os pillarLineEnding.	text := 'This is a table:| foo| bar'.	self		assertWriting: (PRDocumentParser parse: text)		includesText: 'This is a table:' , nLine , nLine , '\begin{tab'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 14:57'!underlineFoo	^ '\uline{foo}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:31'!unorderedListBegin	^ '\begin{itemize}'! !!PRLaTeXWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/21/2014 17:40'!widthFor50percents	^ '0.5'! !"Pillar-Tests-ExporterLaTeX"!!PRBeamerWriterTest methodsFor: 'private' stamp: 'DamienCassou 4/2/2015 09:39'!actualClass	^ PRBeamerWriter! !!PRBeamerWriterTest methodsFor: 'accessing' stamp: 'DamienCassou 4/2/2015 09:40'!packageNamesUnderTest	^ #('Pillar-ExporterBeamer')! !!PRBeamerWriterTest methodsFor: 'tests' stamp: 'DamienCassou 4/2/2015 11:04'!testExport1SimpleSlide	"self debug: #testExportSlideTitle"	| item |	item := PRDocument new		add:				(self						addText: 'Slide title'						to:							(PRHeader new								level: 2;								yourself));		add: (PRText content: 'Presentation text');		yourself.	self		assertWriting: item		includesTexts:			{'\begin{frame}'.			'\frametitle{Slide title}'.			'Presentation text'.			'\end{frame}'}! !!PRBeamerWriterTest methodsFor: 'tests' stamp: 'DamienCassou 4/2/2015 11:04'!testExport1SlideClosesOnce	"self debug: #testExport1SlideClosesOnce"	| item resultString index |	item := PRDocument new		add:				(self						addText: 'Slide 1'						to:							(PRHeader new								level: 2;								yourself));		yourself.	resultString := self write: item.	index := resultString findString: '\end{frame}' startingAt: 0.	self assert: index > 0.	index := resultString findString: '\end{frame}' startingAt: index + 1.	"\end{frame} appears only once in the result"	self assert: index equals: 0		! !!PRBeamerWriterTest methodsFor: 'tests' stamp: 'DamienCassou 4/2/2015 11:04'!testExport2SlidesCloseAllFrames	"self debug: #testExportSlideTitle"	| item resultString index |	item := PRDocument new		add:				(self						addText: 'Slide 1'						to:							(PRHeader new								level: 2;								yourself));		add:				(self						addText: 'Slide 2'						to:							(PRHeader new								level: 2;								yourself));		yourself.	resultString := self write: item.	index := resultString findString: '\end{frame}' startingAt: 0.	self assert: index > 0.	index := resultString findString: '\end{frame}' startingAt: index + 1.	self assert: index > 0		! !!PRBeamerWriterTest methodsFor: 'tests' stamp: 'DamienCassou 4/2/2015 14:37'!testHeader	"Override as this test is meaningless here."! !"Pillar-Tests-ExporterBeamer"!!PRHTMLWriterTest class methodsFor: 'testing' stamp: 'DamienCassou 10/8/2013 10:56'!isAbstract	^ false! !!PRHTMLWriterTest methodsFor: 'private' stamp: 'DamienCassou 10/8/2013 11:19'!actualClass	^ PRHTMLWriter! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'BenComan 6/2/2014 22:14'!annotationBegin: annotationString	^'<p class="' , annotationString, '">' ! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 15:11'!boldFoo	^ '<strong>foo</strong>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:41'!dataItemWithBar	^ '<dd>bar</dd>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:38'!definitionListBegin	^ '<dl>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 4/26/2014 18:18'!emailToFoo	^ '<a href="mailto:foo@bar.com">'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 13:41'!figureAnchorForPierLogo	^ '<a name="pierLogo">'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 11:58'!figureBegin	^ '<img src="'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/5/2014 18:30'!horizontalRule	^ '<hr>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 14:45'!italicFoo	^ '<em>foo</em>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 07:47'!level1HeaderBegin	^ '<h1>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:18'!level1HeaderWithFoo	^ '<h1>foo</h1>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 15:01'!level2HeaderBegin	^ '<h2>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/21/2013 07:47'!level3HeaderBegin	^ '<h3>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/7/2014 14:18'!level3HeaderWithFoo	^ '<h3>foo</h3>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:43'!listItemWith1	^ '<li>1</li>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:54'!monospaceFoo	^ '<code>foo</code>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/8/2013 13:48'!orderedListBegin	^ '<ol>'! !!PRHTMLWriterTest methodsFor: 'accessing' stamp: 'DamienCassou 1/15/2014 16:47'!packageNamesUnderTest	^ #('Pillar-ExporterHTML')! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/10/2014 12:42'!paragraphFoo	^ '<p>foo</p>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 15:56'!preformattedFooBegin	^ '<pre>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 15:56'!preformattedTextFoo	^ 'foo'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 17:39'!rawText	^ '<img>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 15:44'!scriptAnchorForMyScript	^ '<a name="myScript">'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:10'!scriptWithCaptionBegin	^ '<pre><code'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 1/9/2014 09:10'!scriptWithoutCaptionBegin	^ '<pre><code'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:56'!strikethroughFoo	^ '<s>foo</s>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:57'!subscriptFoo	^ '<sub>foo</sub>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:57'!superscriptFoo	^ '<sup>foo</sup>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 16:18'!tableBegin	^ '<table'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 15:45'!tableCellWithFoo	^ '<td>foo</td>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 16:02'!tableCellWithHeadingFoo	^ '<th>foo</th>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 11/20/2013 15:45'!tableRow	^ '<tr>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:41'!termItemWithFoo	^ '<dt>foo</dt>'! !!PRHTMLWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/20/2014 08:52'!testAnchor	| item |	item := PRAnchor new name: 'foo'.	self assertWriting: item includesText: 'id="foo"'! !!PRHTMLWriterTest methodsFor: 'tests' stamp: 'DamienCassou 4/18/2014 17:41'!testExportingIsolatedRaw	"The idea is that you don''t want the <p> when using a Raw that potentially displays a <div>, because this is not HTML compliant"	| item |	item := PRDocument new		add:				(PRParagraph new						add: (PRRaw content: '<div>foo</div>');						yourself);		yourself.	self assert: (self write: item) equals: '<div>foo</div>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/14/2013 13:59'!underlineFoo	^ '<u>foo</u>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 10/9/2013 14:31'!unorderedListBegin	^ '<ul>'! !!PRHTMLWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/21/2014 17:42'!widthFor50percents	^ '50%'! !"Pillar-Tests-ExporterHTML"!!PRPillarWriterTest methodsFor: 'private' stamp: 'DamienCassou 2/20/2014 09:10'!actualClass	^ PRPillarWriter! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'BenComan 6/2/2014 22:05'!annotationBegin: annotationString	^'@@' , annotationString.! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:13'!boldFoo	^ '""foo""'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:24'!dataItemWithBar	^ ':bar'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:35'!definitionListBegin	^ ';'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 4/26/2014 18:15'!emailToFoo	^ 'foo@bar.com*'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:02'!figureAnchorForPierLogo	^ 'label=pierLogo'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:53'!figureBegin	^ '+'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/5/2014 18:31'!horizontalRule	^ '_'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:38'!italicFoo	^ '''foo'''! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:20'!level1HeaderWithFoo	^ '!!foo'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:21'!level3HeaderWithFoo	^ '!!!!!!foo'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:34'!listItemWith1	^ '1'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:42'!monospaceFoo	^ '==foo=='! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:33'!orderedListBegin	^ '#'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:17'!packageNamesUnderTest	^ #('Pillar-ExporterPillar')! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:53'!paragraphFoo	^ 'foo'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:03'!preformattedFooBegin	^ '='! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:03'!preformattedTextFoo	^ 'foo'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:06'!rawText	^ '*foo>http://bar.com* ''italic'''! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:55'!referenceToFigurePierLogo	^ '*pierLogo*'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:15'!scriptAnchorForMyScript	^ 'label=myScript'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:16'!scriptWithCaptionBegin	^ '[[['! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:10'!scriptWithoutCaptionBegin	^ '[[['! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:14'!strikethroughFoo	^ '--foo--'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:26'!subscriptFoo	^ '@@foo@@'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:26'!superscriptFoo	^ '^^foo^^'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:17'!tableBegin	^ '|'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:17'!tableCellWithFoo	^ '|foo'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:19'!tableCellWithHeadingFoo	^ '|!!foo'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:17'!tableRow	^ '|'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:36'!termItemWithFoo	^ ';foo'! !!PRPillarWriterTest methodsFor: 'tests' stamp: 'DamienCassou 3/5/2014 17:49'!testCommentedLineNotVisibleInOutput	"in Pillar output, we really want our comments back"! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 10:17'!underlineFoo	^ '__foo__'! !!PRPillarWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/20/2014 09:27'!unorderedListBegin	^ '-'! !"Pillar-Tests-ExporterPillar"!!PRTextWriterTest methodsFor: 'private' stamp: 'DamienCassou 2/26/2014 16:55'!actualClass	^ PRTextWriter! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'BenComan 6/2/2014 22:15'!annotationBegin: annotationString	^''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:14'!boldFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:15'!dataItemWithBar	^ 'bar'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:15'!definitionListBegin	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 4/26/2014 18:14'!emailToFoo	^ 'foo@bar.com'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:18'!figureAnchorForPierLogo	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:18'!figureBegin	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 3/5/2014 18:32'!horizontalRule	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:21'!italicFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:21'!level1HeaderWithFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:21'!level3HeaderWithFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:23'!listItemWith1	^ '1'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:23'!monospaceFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:23'!orderedListBegin	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:28'!packageNamesUnderTest	^ #('Pillar-ExporterText')! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:26'!paragraphFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:26'!preformattedFooBegin	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:26'!preformattedTextFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:27'!rawText	^ 'nothing raw in plain text'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:20'!referenceToFigurePierLogo	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:27'!scriptAnchorForMyScript	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:27'!scriptWithCaptionBegin	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:27'!scriptWithoutCaptionBegin	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:29'!strikethroughFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:29'!subscriptFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:29'!superscriptFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:29'!tableBegin	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:30'!tableCellWithFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:30'!tableCellWithHeadingFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:29'!tableRow	^ ''! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:15'!termItemWithFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/26/2014 17:37'!testFigureLabelGenerateAnchor	"ignore as there is no anchor support in simple text"! !!PRTextWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/27/2014 16:47'!testFigureWithWidth	"ignore as there is no figure language support in simple text"! !!PRTextWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/26/2014 17:37'!testFiguresHaveACaption	"ignore as there is no caption support in simple text"! !!PRTextWriterTest methodsFor: 'tests' stamp: 'DamienCassou 4/26/2014 22:08'!testMailLink	"ignore as there is the email address is not written"! !!PRTextWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/26/2014 17:37'!testScriptLabelGenerateAnchor	"ignore as there is no anchor support in simple text"! !!PRTextWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/26/2014 17:38'!testScriptLanguage	"ignore as there is no script language support in simple text"! !!PRTextWriterTest methodsFor: 'tests' stamp: 'DamienCassou 2/26/2014 17:39'!testScriptsHaveACaption	"ignore as there is no caption support in simple text"! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:30'!underlineFoo	^ 'foo'! !!PRTextWriterTest methodsFor: 'requirements' stamp: 'DamienCassou 2/26/2014 17:30'!unorderedListBegin	^ ''! !!PRDocumentTest methodsFor: '*pillar-tests-exportertext' stamp: 'DamienCassou 6/6/2014 16:41'!testTitle	| tree |	tree := PRDocument new		propertyAt: 'title' put: 'Atom heart mother';		yourself.	self assert: tree title equals: 'Atom heart mother'.	tree := PRDocument new		add:			(PRHeader new				level: 1;				add: (PRText content: 'Echoes');				yourself).	self assert: tree title equals: 'Echoes'.	self assert: PRDocument new title equals: 'No title'! !"Pillar-Tests-ExporterText"!!PRToolIconSelector commentStamp: 'TorstenBergmann 3/6/2015 01:47' prior: 0!An item selector for SpotterInstance Variables	icon:		<Object>icon	- xxxxx!!PRToolLabelSelector commentStamp: 'TorstenBergmann 3/6/2015 01:00' prior: 0!A visitor to display the correct label in spotterInstance Variables	label:		<String>label	- xxxxx!!PRToolIcons commentStamp: 'TorstenBergmann 3/5/2015 23:46' prior: 0!An icon cache!!PRDocumentItem methodsFor: '*Pillar-Pharo-Tools' stamp: 'DamienCassou 4/3/2015 10:44'!gtInspectorBeamerRepresentationIn: composite	<gtInspectorPresentationOrder: 80>	composite text 		title: 'Beamer';		display: [ 			(PRBeamerWriter write: self) ]! !!PRDocumentItem methodsFor: '*Pillar-Pharo-Tools' stamp: 'TorstenBergmann 3/6/2015 08:28'!gtInspectorHTMLRepresentationIn: composite	<gtInspectorPresentationOrder: 50>	composite text 		title: 'HTML';		display: [ 			(PRHTMLWriter write: self) ]! !!PRDocumentItem methodsFor: '*Pillar-Pharo-Tools' stamp: 'TorstenBergmann 3/6/2015 08:28'!gtInspectorLaTeXRepresentationIn: composite	<gtInspectorPresentationOrder: 80>	composite text 		title: 'LaTeX';		display: [ 			(PRLaTeXWriter write: self) ]! !!PRDocumentItem methodsFor: '*Pillar-Pharo-Tools' stamp: 'TorstenBergmann 3/6/2015 08:28'!gtInspectorMarkdownRepresentationIn: composite	<gtInspectorPresentationOrder: 70>	composite text 		title: 'Markdown';		display: [ 			(PRMarkdownWriter write: self) ]! !!PRDocumentItem methodsFor: '*Pillar-Pharo-Tools' stamp: 'TorstenBergmann 3/6/2015 08:28'!gtInspectorPillarRepresentationIn: composite	<gtInspectorPresentationOrder: 40>	composite text 		title: 'Pillar';		display: [ 			(PRPillarWriter write: self) ]! !!PRDocumentItem methodsFor: '*Pillar-Pharo-Tools' stamp: 'TorstenBergmann 3/6/2015 08:28'!gtInspectorTextRepresentationIn: composite	<gtInspectorPresentationOrder: 60>	composite text 		title: 'Text';		display: [ 			(PRTextWriter write: self) ]! !!PRDocumentItem methodsFor: '*Pillar-Pharo-Tools' stamp: 'TorstenBergmann 3/6/2015 01:03'!spotterForPillarDocumentFor: aStep	<spotterOrder: 40>	aStep listProcessor 		title: 'Children';		candidatesLimit: Float infinity;		allCandidates: [ self children ];		itemName: [:item | (PRToolLabelSelector new)									visit: item;									label ];		itemIcon: [:item | (PRToolIconSelector new)									visit: item;									icon ];		matchSubstring! !!PRDocumentGroup methodsFor: '*Pillar-Pharo-Tools' stamp: 'DamienCassou 4/3/2015 15:35'!gtInspectorTreeRepresentationIn: composite	<gtInspectorPresentationOrder: 30>	composite tree		title: 'Tree';		children: [ :item | 					item hasChildren						ifTrue: [ item children ] ];		format: [ :item | (item class name allButFirst: 2) , '(' , ((PRPillarWriter write: item) printStringLimitedTo: 2000) , ')' ]! !!PRToolIconSelector commentStamp: 'TorstenBergmann 3/6/2015 01:47' prior: 34932454!An item selector for SpotterInstance Variables	icon:		<Object>icon	- xxxxx!!PRToolIconSelector class methodsFor: 'testing' stamp: 'TorstenBergmann 3/6/2015 00:14'!isAbstract	^ false! !!PRToolIconSelector methodsFor: 'accessing' stamp: 'TorstenBergmann 3/6/2015 00:18'!icon	^icon! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 00:54'!visitAnchor: anObject		icon := PRToolIcons anchorIcon ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 00:38'!visitBoldFormat: anObject	icon := PRToolIcons boldIcon! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 00:48'!visitEmptyParagraph: anObject		icon := PRToolIcons emptyParagraphIcon ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 00:36'!visitHeader: aHeader	aHeader level = 1 ifTrue: [ icon := PRToolIcons heading1Icon ].	aHeader level = 2 ifTrue: [ icon := PRToolIcons heading2Icon ].	aHeader level = 3 ifTrue: [ icon := PRToolIcons heading3Icon ].	aHeader level = 4 ifTrue: [ icon := PRToolIcons heading4Icon ].	aHeader level = 5 ifTrue: [ icon := PRToolIcons heading5Icon ].	aHeader level = 6 ifTrue: [ icon := PRToolIcons heading6Icon ].	aHeader level > 6 ifTrue: [ icon := PRToolIcons headingXIcon ].! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:46'!visitItalicFormat: anObject	icon := PRToolIcons italicIcon  ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:13'!visitListItem: anObject	icon := PRToolIcons listItemIcon! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:09'!visitOrderedList: anObject	icon := PRToolIcons orderedList ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 00:48'!visitParagraph: anObject		icon := PRToolIcons paragraphIcon ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:23'!visitSubscriptFormat: anObject	icon := PRToolIcons subscriptIcon  ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:23'!visitSuperscriptFormat: anObject	icon := PRToolIcons superscriptIcon ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:54'!visitTable: anObject		icon := PRToolIcons tableIcon ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:56'!visitTableCell: anObject		icon := PRToolIcons tableCellIcon! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:57'!visitTableRow: anObject		icon := PRToolIcons tableRowIcon! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:30'!visitText: anObject	icon := PRToolIcons textIcon  ! !!PRToolIconSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:08'!visitUnorderedList: anObject	icon := PRToolIcons unorderedList ! !!PRToolLabelSelector commentStamp: 'TorstenBergmann 3/6/2015 01:00' prior: 34932615!A visitor to display the correct label in spotterInstance Variables	label:		<String>label	- xxxxx!!PRToolLabelSelector class methodsFor: 'testing' stamp: 'TorstenBergmann 3/6/2015 01:04'!isAbstract	^ false! !!PRToolLabelSelector methodsFor: 'accessing' stamp: 'TorstenBergmann 3/6/2015 01:03'!label	^ label! !!PRToolLabelSelector methodsFor: 'accessing' stamp: 'TorstenBergmann 3/6/2015 01:03'!label: anObject	label := anObject! !!PRToolLabelSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:00'!visitAnchor: anObject		label := anObject name! !!PRToolLabelSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:35'!visitCommentedLine: aCommentedLine	label := aCommentedLine text! !!PRToolLabelSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:38'!visitEmptyParagraph: anObject	label := ''! !!PRToolLabelSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:42'!visitOrderedList: anObject	label := '#... (', anObject children size asString, ')' ! !!PRToolLabelSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 02:01'!visitTable: anObject	label := anObject rowCount asString, ' row(s) x ', anObject columnCount asString, ' column(s)'! !!PRToolLabelSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:27'!visitText: anObject	label := anObject text! !!PRToolLabelSelector methodsFor: 'visiting-document' stamp: 'TorstenBergmann 3/6/2015 01:41'!visitUnorderedList: anObject	label := '-... (', anObject children size asString, ')' ! !!PRToolIcons commentStamp: 'TorstenBergmann 3/5/2015 23:46' prior: 34932791!An icon cache!!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:54'!anchorIcon	^(self iconCache) 		at: #anchorIcon		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:37'!boldIcon	^(self iconCache) 		at: #boldIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))! !!PRToolIcons class methodsFor: 'utilities' stamp: 'TorstenBergmann 3/5/2015 23:47'!browseIcons	<script>		self iconCache inspect! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:33'!commentIcon	^(self iconCache) 		at: #commentIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:47'!emptyParagraphIcon	^(self iconCache) 		at: #emptyParagraphIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:31'!heading1Icon	^(self iconCache) 		at: #heading1Icon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:31'!heading2Icon	^(self iconCache) 		at: #heading2Icon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:31'!heading3Icon	^(self iconCache) 		at: #heading3Icon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 4278190080 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:32'!heading4Icon	^(self iconCache) 		at: #heading4Icon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 4278190080 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:32'!heading5Icon	^(self iconCache) 		at: #heading5Icon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 4278190080 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:32'!heading6Icon	^(self iconCache) 		at: #heading6Icon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:33'!headingXIcon	^(self iconCache) 		at: #headingXIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 0 4278190080 0 0 0 4278190080 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 4278190080 0 4278190080 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'private accessing' stamp: 'TorstenBergmann 3/5/2015 23:47'!iconCache	^ IconCache ifNil: [ IconCache := Dictionary new ]! !!PRToolIcons class methodsFor: 'accessing' stamp: 'TorstenBergmann 3/5/2015 23:46'!iconNamed: aSymbol	"Returns the icon with the given name"		^(self iconCache) 		at: aSymbol 		ifAbsentPut: [ self perform: aSymbol ]! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:45'!italicIcon	^(self iconCache) 		at: #italicIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:13'!listItemIcon	^(self iconCache) 		at: #listItemIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:09'!orderedList	^(self iconCache) 		at: #orderedList 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 00:46'!paragraphIcon	^(self iconCache) 		at: #paragraphIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'initialization-release' stamp: 'TorstenBergmann 3/5/2015 23:47'!reset	"Reset the icon cache"		<script>		IconCache := nil! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:22'!subscriptIcon	^(self iconCache) 		at: #subscriptIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0 0 4278190080 0 0 4278190080 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 0 0 0 0 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:22'!superscriptIcon	^(self iconCache) 		at: #superscriptIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 4278190080 4278190080 0 0 0 0 4278190080 4278190080 0 0 4278190080 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:56'!tableCellIcon	^(self iconCache) 		at: #tableCellIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:53'!tableIcon	^(self iconCache) 		at: #tableIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:57'!tableRowIcon	^(self iconCache) 		at: #tableRowIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 4278190080 0 0 0 4278190080 0 0 0 0 4278190080 0 0 0 4278190080 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:29'!textIcon	^(self iconCache) 		at: #textIcon 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 4278190080 0 0 0 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !!PRToolIcons class methodsFor: 'icons' stamp: 'TorstenBergmann 3/6/2015 01:08'!unorderedList	^(self iconCache) 		at: #unorderedList 		ifAbsentPut: (Form	extent: (16@16)	depth: 32	fromArray: #( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4278190080 4278190080 4278190080 0 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 4278190080 0 0 0 4278190080 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)	offset: (0@0))! !"Pillar-Pharo-Tools"!!PRCommandLineHandler commentStamp: 'TorstenBergmann 1/17/2015 01:21' prior: 0!I am the top level command line handler for Pillar.My keyword is "pillar".I can not be used by myself, but I dispatch the rest of the command line to my sub command line handlers (see PRSubCommandLineHandler and its subclasses)!!PRSubCommandLineHandler commentStamp: '<historical>' prior: 0!I am the abstract super class of all sub commands for Pillar (export, export-all etc).See subclasses for concrete implementations!!PRCommandLineHandler commentStamp: 'TorstenBergmann 1/17/2015 01:21' prior: 34969419!I am the top level command line handler for Pillar.My keyword is "pillar".I can not be used by myself, but I dispatch the rest of the command line to my sub command line handlers (see PRSubCommandLineHandler and its subclasses)!!PRCommandLineHandler class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 15:23'!commandName	^ 'pillar'! !!PRCommandLineHandler class methodsFor: 'as yet unclassified' stamp: 'DamienCassou 12/11/2013 15:40'!isResponsibleFor: aCommandLineArguments	^ aCommandLineArguments includesSubCommand: self commandName! !!PRCommandLineHandler methodsFor: 'private' stamp: 'DamienCassou 12/11/2013 15:36'!subCommandsRoot	^ PRSubCommandLineHandler! !!PRSubCommandLineHandler commentStamp: '<historical>' prior: 34969716!I am the abstract super class of all sub commands for Pillar (export, export-all etc).See subclasses for concrete implementations!!PRSubCommandLineHandler methodsFor: 'activation' stamp: 'BenjaminVanRyseghem 1/9/2014 10:41'!activate	| confFilename |	self activateHelp		ifTrue: [ ^ self ].	self		optionAt: 'configurationFile'		ifPresent: [ :file | confFilename := file ]		ifAbsent: [ confFilename := 'pillar.conf' ].	self optionAt: 'baseDirectory' ifPresent: [ :dir | baseDirectory := dir asFileReference ].	self createConfiguration: confFilename! !!PRSubCommandLineHandler methodsFor: 'accessing' stamp: 'BenjaminVanRyseghem 1/9/2014 11:01'!baseDirectory	^ baseDirectory ifNil: [ (OSEnvironment default getEnv: 'PWD') asFileReference ]! !!PRSubCommandLineHandler methodsFor: 'activation' stamp: 'CyrilFerlicot 4/1/2015 18:20'!createConfiguration: confFilename	| confFile |	confFile := self baseDirectory resolve: confFilename.	configuration := confFile exists		ifTrue: [ self readConfigurationFromFile: confFile ]		ifFalse: [ PRCocoonConfiguration new ].! !!PRSubCommandLineHandler methodsFor: 'error handling' stamp: 'DamienCassou 12/11/2013 16:34'!error: aString	self stderr << aString; lf.	self exitFailure! !!PRSubCommandLineHandler methodsFor: 'error handling' stamp: 'DamienCassou 1/8/2014 11:13'!errorMissingParameter: aParameterName	self error: 'Missing required parameter --', aParameterName ! !!PRSubCommandLineHandler methodsFor: 'activation' stamp: 'CyrilFerlicot 4/1/2015 18:20'!readConfigurationFromFile: confFile	^ [ (PRCocoonConfigurationInterpreter baseDirectory: self baseDirectory) buildFromFile: confFile ]		on: STONReaderError		do: [ :error | self exitFailure: error messageText ]! !!PRExportCommandLineHandler class methodsFor: 'accessing' stamp: 'DamienCassou 12/11/2013 15:37'!commandName	^ 'export'! !!PRExportCommandLineHandler methodsFor: 'activation' stamp: 'BenjaminVanRyseghem 1/9/2014 11:06'!activate	super activate.	subconfName isEmptyOrNil ifTrue: [ self errorMissingParameter: 'to' ].	self optionAt: 'outputFile' ifPresent: [ :file | configuration outputFile: file asFileReference ].	self parseInputFiles.	self export.	self exitSuccess! !!PRExportCommandLineHandler methodsFor: 'activation' stamp: 'CyrilFerlicot 3/31/2015 11:22'!export	[ subconfName ifNil: [ configuration export ] ifNotNil: [ configuration export: subconfName ] ]		on: CCConfigurationError, PRNoInputFileError		do: [ :error | self exitFailure: error messageText ]! !!PRExportCommandLineHandler methodsFor: 'activation' stamp: 'BenjaminVanRyseghem 1/9/2014 11:02'!parseInputFiles	(self arguments last beginsWith: '--')		ifFalse: [ 			| inputFile |			inputFile := self baseDirectory resolve: self arguments last.			inputFile exists				ifFalse: [ self exitFailure: '"' , inputFile pathString , '" does not exist' ].			configuration inputFiles: { inputFile } ]! !!PRExportCommandLineHandler methodsFor: 'activation' stamp: 'DamienCassou 12/11/2013 16:24'!printConfiguration	self stdout << subconfName.	self stdout lf.	configuration properties keysAndValuesDo: [ :key :value | self stdout << key << ' = ' << value printString; lf ]! !!PRShowCommandLineHandler class methodsFor: 'accessing' stamp: 'DamienCassou 1/8/2014 11:34'!commandName	^ 'show'! !!PRShowCommandLineHandler methodsFor: 'activation' stamp: 'DamienCassou 1/8/2014 11:41'!activate	super activate.	self activateInputFiles! !!PRShowCommandLineHandler methodsFor: 'activation' stamp: 'DamienCassou 1/8/2014 11:41'!activateInputFiles	self arguments		detect: [ :arg | arg = 'inputFiles' ]		ifFound: [ 			configuration inputFiles				do: [ :file | 					self stdout						nextPutAll: file pathString;						lf ].			self exitSuccess ]! !!PRWithConfigurationCommandLineHandler methodsFor: 'activation' stamp: 'DamienCassou 1/8/2014 11:28'!activate	super activate.	self		optionAt: 'to'		ifPresent: [ :subconf | subconfName := subconf ].! !"Pillar-Cli"!!PRPrepareForGitBookCommandLineHandler class methodsFor: 'accessing' stamp: 'DamienCassou 6/6/2014 15:32'!commandName	^ 'prepareForGitBook'! !!PRPrepareForGitBookCommandLineHandler methodsFor: 'activation' stamp: 'DamienCassou 6/6/2014 16:26'!activate	super activate.	self		optionAt: 'from'		ifPresent: [ :subconf | configuration := configuration subConfigurationNamed: subconf ]		ifAbsent: [ self errorMissingParameter: 'from' ].	self generateSummary.	self exitSuccess! !!PRPrepareForGitBookCommandLineHandler methodsFor: 'activation' stamp: 'DamienCassou 6/6/2014 16:24'!generateSummary	(baseDirectory / 'SUMMARY.md') asFileReference		writeStreamDo: [ :stream | 			stream << '# Summary' << String lf << String lf.			stream << 'Abstract (to be done)' << String lf << String lf.			configuration inputFiles				do: [ :inputFile | 					| document title |					document := configuration parseFile: inputFile.					title := document title.					stream << '* [' << title << ']('.					(inputFile , PRMarkdownWriter fileExtension relativeTo: baseDirectory) printOn: stream delimiter: $/.					stream << ')' << String lf ] ]! !"Pillar-GitBook"!----QUIT----2015-04-22T00:42:38.143419+02:00 Pillar.image priorSource: 341604!----STARTUP----2015-04-23T13:42:47.347733+02:00 as /Users/peralta/A4BPDocumentation/Pharo.image!----QUIT----2015-04-23T13:42:47.35833+02:00 Pharo.image priorSource: 1421419!----STARTUP----2015-04-23T13:42:47.799275+02:00 as /Users/peralta/A4BPDocumentation/Pharo.image!----QUIT----2015-04-23T13:42:47.810241+02:00 Pharo.image priorSource: 1421598!